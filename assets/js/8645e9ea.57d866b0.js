"use strict";(self.webpackChunkcf_infra_docs=self.webpackChunkcf_infra_docs||[]).push([[85700],{86210:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"minutes/2016-09-09","title":"2016-09-09","description":"Time00 UTC","source":"@site/community/minutes/2016-09-09.md","sourceDirName":"minutes","slug":"/minutes/2016-09-09","permalink":"/community/minutes/2016-09-09","draft":false,"unlisted":false,"editUrl":"https://github.com/conda-forge/conda-forge.github.io/tree/refs/heads/main/community/minutes/2016-09-09.md","tags":[],"version":"current","lastUpdatedAt":1743584527000,"frontMatter":{"title":"2016-09-09"},"sidebar":"community","previous":{"title":"2016-09-23","permalink":"/community/minutes/2016-09-23"},"next":{"title":"2016-08-25","permalink":"/community/minutes/2016-08-25"}}');var l=i(74848),r=i(28453);const t={title:"2016-09-09"},c="2016-09-09: General discussion",o={},d=[];function a(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",package:"package",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"2016-09-09-general-discussion",children:"2016-09-09: General discussion"})}),"\n",(0,l.jsx)(n.p,{children:"Time: 14:00 UTC"}),"\n",(0,l.jsxs)(n.p,{children:["Hangout link: ",(0,l.jsx)(n.a,{href:"https://hangouts.google.com/call/v5olhwzpfzgzpoq5i3wthjpqpie"}),(0,l.jsx)(n.a,{href:"https://hangouts.google.com/call/v5olhwzpfzgzpoq5i3wthjpqpie",children:"https://hangouts.google.com/call/v5olhwzpfzgzpoq5i3wthjpqpie"})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Attendees"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Jonathan Helmus, Filipe, Michael, Ray, ",(0,l.jsx)(n.a,{href:"https://conda-forge.hackpad.com/ep/profile/yJqDqpPqJyz",children:"Eric Dill"}),", Bj\xf6rn Gr\xfcning, ",(0,l.jsx)(n.a,{href:"https://conda-forge.hackpad.com/ep/profile/yBvjHx0Ad3Y",children:"Matt Craig"})," (late)"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Standing items"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"How many repos? ~1100"}),"\n",(0,l.jsx)(n.li,{children:"How many contributors? ~220"}),"\n",(0,l.jsx)(n.li,{children:"New core devs?"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Notes"})}),"\n",(0,l.jsx)(n.p,{children:"Bioconda updates:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Rebuilding binaries for the conda-build 2.0 when the source tarballs that disappear. Bioconda is arching the sources."}),"\n",(0,l.jsx)(n.li,{children:"Automate  process to archive source tarball and test in a container (nice as a  service to create a bundle-container to run packages)."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Core Devs"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Eric Dill (invite)"}),"\n",(0,l.jsx)(n.li,{children:"Peter M. Landwehr (already invited)"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Split builds"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["conda-build issue (xref?)  ",(0,l.jsx)(n.a,{href:"https://github.com/conda/conda-build/issues/1338",children:"conda/conda build#1338"})]}),"\n",(0,l.jsx)(n.li,{children:"continuum compiler toolchain to use gcc (Linux), clang and gfortran (OS X) consistently."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Pre-releases/RC"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Needs a champion to write a proposal!"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Eric Dill will take this on. Hopefully a CFEP will land within one week, 2016-09-16\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Eric  suggests having both dev and ",(0,l.jsx)(n.package,{children:'-dev labels.  The former is  for "cutting edge people" but the latter is people who only want to be  testing/using the new version of only one thing (plus any dependencies).'})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"dev is a bad name.  These packages are more for testing than for development.  Testing? RC?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Filipe thinks we should not accept versions earlier than RC  (Not really do not accept but encourage people to call their dev  version a RC.  The thinking is that conda-forge is a place to release  binaries and nightly testing builds, for example, are beyond the scope  IMO.)"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"The feather-feedstock maintainers question:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"They  want to build Python 2.7 with a modern Visual Studio and conda-forge  should suggest to them that this will create a different ecosystem that  is compatible with conda-forge."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"conda-build 2.0 and conda-build-all. Mike asked if we are ready to use conda-build 2.0. conda-forge needs to check:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"where are the pins to conda-build <2.0"}),"\n",(0,l.jsx)(n.li,{children:"check conda-inspect"}),"\n",(0,l.jsx)(n.li,{children:"check the upload script"}),"\n",(0,l.jsx)(n.li,{children:"check conda-smithy"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Use pip in the build script."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"On Windows need conda > 4.2"}),"\n",(0,l.jsx)(n.li,{children:"Need to check if the entry_points must be declared or not in the recipe."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Agenda"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Next meeting: can we do 2016-09-16?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Update from the bioconda community. Tarball archiving and automatic Container (Docker, rkt) builds."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Archives: ",(0,l.jsx)(n.a,{href:"https://github.com/bioconda/bioconda-recipes/issues/2194",children:"bioconda/bioconda recipes#2194"})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Container: ",(0,l.jsx)(n.a,{href:"https://github.com/bioconda/bioconda-recipes/issues/2297",children:"bioconda/bioconda recipes#2297"})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Is conda-forge interested in a similar integration?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"OSX - getting back to a usable, coherent, stack"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"libc++ (clang) vs libstdc++ (gcc/g++)"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Apple's Blocks extension to C (these are like lambdas) isn't in recent (or non-Apple) GCC: ",(0,l.jsx)(n.a,{href:"https://gcc.gnu.org/ml/gcc/2009-09/msg00264.html"}),(0,l.jsx)(n.a,{href:"https://gcc.gnu.org/ml/gcc/2009-09/msg00264.html",children:"https://gcc.gnu.org/ml/gcc/2009-09/msg00264.html"})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Can  we link gfortran and LLVM system/c++ libraries together w/o violating  GPL w/runtime exception (compiler_rt + libc++) - not if link is done  statically to the best of my knowledge, and also can gfortran be built  on top of compiler_rt? These are big unknowns."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Minimum OSX required for clang (10.8, I think?)"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Actually clang is usable beginning in 10.7. So, this would be viable given your compatibility constraints."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Also, all the refs I have seen suggest that this will still have C++11 support."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Compatibility  with defaults (built on 10.7, uses gcc) - where will people break?  I  think only if mixing packages - how do we assure that we have all the  ones we need?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Metadata unification with Continuum - are we OK with adding some fields to about section to match Anaconda standard?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["example at ",(0,l.jsx)(n.a,{href:"https://github.com/ContinuumIO/anaconda-recipes/blob/master/colander/meta.yaml"}),(0,l.jsx)(n.a,{href:"https://github.com/ContinuumIO/anaconda-recipes/blob/master/colander/meta.yaml",children:"https://github.com/ContinuumIO/anaconda-recipes/blob/master/colander/meta.yaml"})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"license_family"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"doc_url"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"dev_url"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"constrain summary to 80 chars (longer stuff use description)"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Can we add this to linter, and add to recipes as we update them?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"What support for unicode should we have?  Any?  Summary/description only?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"CUDA/cuDNN update"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Improving infrastructure"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Better workflows with staged-recipes\n\n        *   Fast finish AppVeyor on merge ( [conda forge/staged recipes#1142](https://github.com/conda-forge/staged-recipes/pull/1142) )\n*   Drop Travis CI matrix ( [conda forge/staged recipes#1234](https://github.com/conda-forge/staged-recipes/pull/1234) )\n*   Use CircleCI for feedstock generation ( [conda forge/staged recipes#916](https://github.com/conda-forge/staged-recipes/issues/916) )\n*   Keeping recipes out of PRs ( [conda forge/staged recipes#942](https://github.com/conda-forge/staged-recipes/issues/942) )\n*   Bank work in partial conversion ( [conda forge/staged recipes#915](https://github.com/conda-forge/staged-recipes/issues/915) )\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Notifications (how do we stay on top of them)"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"MSYS2"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Available on defaults - was in conda 4.1.7, but that was pulled.  Coming in 4.1.8.\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Discussing Ray Donnelly's work on MSYS2 packages and how we want to use and integrate these into conda-forge."}),"\n",(0,l.jsx)(n.li,{children:"Some use cases to consider OpenBLAS, FFTW, build tools, others?"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Binary data"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Do we include it in recipes?\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"What kinds do we allow if any (e.g. icons)?"}),"\n",(0,l.jsx)(n.li,{children:"How do we verify the licensing?"}),"\n",(0,l.jsx)(n.li,{children:"How do we verify that they are safe?"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Dev releases: Where do they happen?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Do we do them at conda-forge?\n\n        *   Maybe add a label.\n\n*   Do we let others do them with a feedstock on their own repo?\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"How do we enforce whatever we decide?"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Channel mirroring"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Can this point be a little bit explained? I thought about this as well and would like to contribute to this point.\n\n        *   Eric Dill has put together a script for copying a package from one channel to another here: [conda forge/conda forge.github.io#134](https://github.com/conda-forge/conda-forge.github.io/pull/134)\n*   I have a really, really crude script that copies all of the packages in one channel to another that I just put at: [](https://gist.github.com/mwcraig/8473cf840f6d29236d6d8af699404555)[https://gist.github.com/mwcraig/8473cf840f6d29236d6d8af699404555](https://gist.github.com/mwcraig/8473cf840f6d29236d6d8af699404555)\n*   conda-build-all can copy from one channel to another: `conda build-all --inspect-channels conda-forge --upload-channels astropy some_packge_recipe` will copy the `some_package`  from the channel conda-forge to  astropy if it can, or build it if it  doesn't exist on conda-forge. Discussion  about what the desired  behavior should be has started at: [SciTools/conda build all#46](https://github.com/SciTools/conda-build-all/issues/46)\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Feedstock history"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Is it sacred?\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Do we rebase/force push?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"    *   If so, under what conditions?\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"How do we avoid multiple people doing this simultaneously?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"        *   I don't think you can.\n\n*   IMHO,  if it's just one author in staged recipes, sure.  If feedstock, no  force push - only to PRs to feedstock.  If people don't mind merge PRs,  it sure is a lot simpler to not rebase.  I have messed up rebasing a few  times recently... =(\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Drop numpy 1.10 and reduce our build matrix. (Numba now works with numpy 1.11.)"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Feedstocks philosophy:  Explicit vs implicit / reproducible vs redundant"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Signing packages"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Should be easy to do. ( [](http://conda.pydata.org/docs/signed-packages.html)[http://conda.pydata.org/docs/signed-packages.html](http://conda.pydata.org/docs/signed-packages.html) )\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"There has been some interest previously."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"HTTPError: 503 Server Error: Service Unavailable: Back-end server is at capacity for url..."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Seems we are regularly running into this issue under normal usage conditions.\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Had discussed previously caching packages on AppVeyor and trying to reuse those to start."}),"\n",(0,l.jsx)(n.li,{children:"Maybe we need to consider caching on all CIs."}),"\n",(0,l.jsxs)(n.li,{children:["Building our own Miniconda-like self-extracting scripts with packages via ",(0,l.jsx)(n.a,{href:"https://github.com/conda/constructor",children:(0,l.jsx)(n.code,{children:"constructor"})}),"."]}),"\n",(0,l.jsx)(n.li,{children:"There  have been improvements on Continuum's side that should help this.  In  short, repodata (the package index for a given channel) was being  generated for each anaconda.org query.  This was unnecessarily high  cost, and some caching schemes have been implemented."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Handling removal of unpinned/improperly pinned packages."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Has been done manually thus far.\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"This doesn't scale well though."}),"\n",(0,l.jsx)(n.li,{children:"Should we (semi) automate removal?"}),"\n",(0,l.jsxs)(n.li,{children:["Should we hot-fix broken packages? ( ",(0,l.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge.github.io/pull/170",children:"conda forge/conda forge.github.io#170"})," )"]}),"\n",(0,l.jsx)(n.li,{children:"Should we label them as broken"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Not currently buildable packages"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   In particular open source code that is out of scope for CIs.\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Examples include Qt4, Qt5, possibly PyQt4, possibly PyQt5, gcc, VTK, etc."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"How do we indicate they are built manually?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Are we ok with uploading non-built binaries?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"When do we determine something is ok to be built manually?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"What procedures should people follow for building manually?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"    *   Use a standard build docker image, VM, or vagrant file\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Sign package?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Implement reproducible builds where feasible (linux)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"        *   [](https://reproducible-builds.org/)[https://reproducible-builds.org/](https://reproducible-builds.org/)\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"What changes do we need to make in conda-smithy elsewhere?"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"What other build infrastructure could we utilize?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"    *   Would  be nice to provide some volunteer builder abstraction, so that we could  have an elastic worker farm that would be somewhat resilient.\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Standardizing build images is probably (relatively) easy - how to orchestrate, though?"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://conda-forge.hackpad.com/DZNKZdgiMbF",children:"Staged Releases"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Windows BLAS Solutions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Still don't have a BLAS for Windows yet need something.\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Don't build a BLAS"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"    *   NumPy has a small subset of BLAS functionality.\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Not sure what to do with SciPy (unable to find Windows wheels for them either)."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Build OpenBLAS with C support only."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Will be pretty slow.\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Should work on all Pythons."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Build OpenBLAS with MinGW compilers."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Works with Python 2.7 and 3.4.\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Won't work with Python 3.5?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Reuse something like R's BLAS."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Is there a package for something like this?\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Will it have the same issues with Python 3.5?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"ATLAS?"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var s=i(96540);const l={},r=s.createContext(l);function t(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);