"use strict";(self.webpackChunkcf_infra_docs=self.webpackChunkcf_infra_docs||[]).push([[64178],{57865:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>a,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"minutes/2016-08-25","title":"2016-08-25","description":"Time00 UTC","source":"@site/community/minutes/2016-08-25.md","sourceDirName":"minutes","slug":"/minutes/2016-08-25","permalink":"/community/minutes/2016-08-25","draft":false,"unlisted":false,"editUrl":"https://github.com/conda-forge/conda-forge.github.io/tree/refs/heads/main/community/minutes/2016-08-25.md","tags":[],"version":"current","lastUpdatedAt":1761156093000,"frontMatter":{"title":"2016-08-25"},"sidebar":"community","previous":{"title":"2016-09-09","permalink":"/community/minutes/2016-09-09"},"next":{"title":"2016-08-12","permalink":"/community/minutes/2016-08-12"}}');var r=i(74848),o=i(28453);const l={title:"2016-08-25"},t="2016-08-25: General discussion",c={},d=[];function h(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"2016-08-25-general-discussion",children:"2016-08-25: General discussion"})}),"\n",(0,r.jsx)(n.p,{children:"Time: 14:00 UTC"}),"\n",(0,r.jsxs)(n.p,{children:["Hangout link: ",(0,r.jsx)(n.a,{href:"https://hangouts.google.com/call/v5olhwzpfzgzpoq5i3wthjpqpie"}),(0,r.jsx)(n.a,{href:"https://hangouts.google.com/call/v5olhwzpfzgzpoq5i3wthjpqpie",children:"https://hangouts.google.com/call/v5olhwzpfzgzpoq5i3wthjpqpie"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Attendees"})}),"\n",(0,r.jsxs)(n.p,{children:["Jonathan Helmus, Filipe, ",(0,r.jsx)(n.a,{href:"https://conda-forge.hackpad.com/ep/profile/yHQTJXZ4gyS",children:"Michael Sarahan"}),", ",(0,r.jsx)(n.a,{href:"https://conda-forge.hackpad.com/ep/profile/wv6uvIZX6h0",children:"John Kirkham"}),", Jake VanderPlas, Eric Dill, Ray Donnelly , ",(0,r.jsx)(n.a,{href:"https://conda-forge.hackpad.com/ep/profile/AviM60TiesB",children:"Phil Elson"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Standing items"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"How many repos? 1035"}),"\n",(0,r.jsx)(n.li,{children:"How many contributors? 212 (with a few bots)"}),"\n",(0,r.jsx)(n.li,{children:"New core devs?"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Invite  Peter M. Landwehr (pmlandwehr) to be involved with review of  staged-recipes.  Should we give these type of people a title, Filipe  will reach out to."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Governing Open Source Projects at Scale: Lessons from Wikipedia's Growing Pains | Staurt Geiger ",(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=ZSQJYEVcMWM&index=89&list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6"}),(0,r.jsx)(n.a,{href:"https://www.youtube.com/watch?v=ZSQJYEVcMWM&index=89&list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6",children:"https://www.youtube.com/watch?v=ZSQJYEVcMWM&index=89&list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Enhancement proposal document, Jonathan has notes will write these up later today."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:['Governance document - help is welcomed.  Also "whos who" or "about" page. ',(0,r.jsx)(n.a,{href:"https://conda-forge.github.io/#about"}),(0,r.jsx)(n.a,{href:"https://conda-forge.github.io/#about",children:"https://conda-forge.github.io/"}),(0,r.jsx)(n.a,{href:"https://conda-forge.hackpad.com/ep/search/?q=%23about&via=2YkV96cvxPG",children:"#about"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   This page could be expanded, should mentioned these meeting.\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Removing items from agenda"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Prioritize items on agenda which we should/must talk about.\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cross link items to GitHub issues/discussions"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Status page: ",(0,r.jsx)(n.a,{href:"https://conda-forge.github.io/status/"}),(0,r.jsx)(n.a,{href:"https://conda-forge.github.io/status/",children:"https://conda-forge.github.io/status/"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'*   Linked to "status" repo:  [](https://github.com/conda-forge/status)[https://github.com/conda-forge/status](https://github.com/conda-forge/status)\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"conda-forge code of conduct - Filipe still workin on"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Many groups working on new build systems: Filipe, Phil, Continuum"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Continuum's  plan would allow others to add build workers, perhaps conda-forge could  use these in addition to the CI services, especially for long builds\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Organize new meeting to discuss this topic"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Open sourcing Anaconda Build, should we push to get this released?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Would be helpful to have our own build system rather than being dependent on CI systems.\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Travis CI can increase time if we reduce concurrency"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Can we switch between longer time and concurrency?  How much work is this?\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Probably not going to take offer at the moment"}),"\n",(0,r.jsx)(n.li,{children:"Better to find trusted hardware somewhere"}),"\n",(0,r.jsx)(n.li,{children:"Vagrant for OS X builds, can we look into this"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Security"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   If user changes name and someone takes old name can be a security issue:  [](https://groups.google.com/forum/#)[https://groups.google.com/forum/#](https://groups.google.com/forum/#%21topic/rustlang-security-announcements/BK_3gbXhSn4)[!topic/rustlang-security-announcements/BK_3gbXhSn4](https://groups.google.com/forum/#%21topic/rustlang-security-announcements/BK_3gbXhSn4)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Can be solved by using unique user ID rather than GitHub username"}),"\n",(0,r.jsx)(n.li,{children:"Want tokens for Anaconda.org which allow writing to a single package (Phil will push Continuum on this) rather than globally."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Metadata unification"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Should conda-forge include additional metadata which would make it easier for Continuum to re-use recipes\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Should this be required or optional?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"    *   Required would likely reduce number of contributors\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Will require time/work to add these to all current packages"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Add to linter and conda skeleton"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'*   Make linter have "warnings" not hard fails\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Many of these seem redundant, can we re-use existing metadata?"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"License file should likely be required"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"    *   Legal vs. suggested\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Agenda"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Marking agenda items as done."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Share status page. :) Also figure out how to direct notifications effectively."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Enhancement proposal document update."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["conda-forge code of conduct doc: ",(0,r.jsx)(n.a,{href:"https://docs.google.com/document/d/10dxX0Zse0Rx1HqsxC73Wfsghmy5m8PP8cHuBIOhWKpc/edit"}),(0,r.jsx)(n.a,{href:"https://docs.google.com/document/d/10dxX0Zse0Rx1HqsxC73Wfsghmy5m8PP8cHuBIOhWKpc/edit",children:"https://docs.google.com/document/d/10dxX0Zse0Rx1HqsxC73Wfsghmy5m8PP8cHuBIOhWKpc/edit"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Mention Travis-CI offer for more CI time."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"We  could look at increasing your build time to 180 mins, but we may need  to decrease your default concurrency from 5 jobs to 3 as you will be  using multiple VMs for a long period at a time."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Mention/Discuss Travis Oliphant's ",(0,r.jsx)(n.a,{href:"https://github.com/Anaconda-Platform/support/issues/55#issuecomment-242206322",children:"comment"})," regarding open sourcing Anaconda Build CI."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Security"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Feedstocks philosophy:  Explicit vs implicit / reproducible vs redundant"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Metadata unification with Continuum - are we OK with adding some fields to about section to match Anaconda standard?"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Including license file"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Many recipes don't include the license file."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Almost every license has some terms about making the license available."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Should we just start requiring this field."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Note some developers are not including the license file either."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"In some cases it has been a struggle to get them to."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"CUDA/cuDNN update"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Improving infrastructure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Better workflows with staged-recipes\n\n        *   Fast finish AppVeyor on merge ( [conda forge/staged recipes#1142](https://github.com/conda-forge/staged-recipes/pull/1142) )\n*   Drop Travis CI matrix ( [conda forge/staged recipes#1234](https://github.com/conda-forge/staged-recipes/pull/1234) )\n*   Use CircleCI for feedstock generation ( [conda forge/staged recipes#916](https://github.com/conda-forge/staged-recipes/issues/916) )\n*   Keeping recipes out of PRs ( [conda forge/staged recipes#942](https://github.com/conda-forge/staged-recipes/issues/942) )\n*   Bank work in partial conversion ( [conda forge/staged recipes#915](https://github.com/conda-forge/staged-recipes/issues/915) )\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Notifications (how do we stay on top of them)"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"MSYS2"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Available on defaults - was in conda 4.1.7, but that was pulled.  Coming in 4.1.8.\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Discussing Ray Donnelly's work on MSYS2 packages and how we want to use and integrate these into conda-forge."}),"\n",(0,r.jsx)(n.li,{children:"Some use cases to consider OpenBLAS, FFTW, build tools, others?"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Binary data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Do we include it in recipes?\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"What kinds do we allow if any (e.g. icons)?"}),"\n",(0,r.jsx)(n.li,{children:"How do we verify the licensing?"}),"\n",(0,r.jsx)(n.li,{children:"How do we verify that they are safe?"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Dev releases: Where do they happen?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Do we do them at conda-forge?\n\n        *   Maybe add a label.\n\n*   Do we let others do them with a feedstock on their own repo?\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"How do we enforce whatever we decide?"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Channel mirroring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Can this point be a little bit explained? I thought about this as well and would like to contribute to this point.\n\n        *   Eric Dill has put together a script for copying a package from one channel to another here: [conda forge/conda forge.github.io#134](https://github.com/conda-forge/conda-forge.github.io/pull/134)\n*   I have a really, really crude script that copies all of the packages in one channel to another that I just put at: [](https://gist.github.com/mwcraig/8473cf840f6d29236d6d8af699404555)[https://gist.github.com/mwcraig/8473cf840f6d29236d6d8af699404555](https://gist.github.com/mwcraig/8473cf840f6d29236d6d8af699404555)\n*   conda-build-all can copy from one channel to another: `conda build-all --inspect-channels conda-forge --upload-channels astropy some_packge_recipe` will copy the `some_package`  from the channel conda-forge to  astropy if it can, or build it if it  doesn't exist on conda-forge. Discussion  about what the desired  behavior should be has started at: [SciTools/conda build all#46](https://github.com/SciTools/conda-build-all/issues/46)\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Feedstock history"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Is it sacred?\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Do we rebase/force push?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"    *   If so, under what conditions?\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"How do we avoid multiple people doing this simultaneously?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"        *   I don't think you can.\n\n*   IMHO,  if it's just one author in staged recipes, sure.  If feedstock, no  force push - only to PRs to feedstock.  If people don't mind merge PRs,  it sure is a lot simpler to not rebase.  I have messed up rebasing a few  times recently... =(\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Continuum metadata request: can we add these to linter?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   example metadata: [](https://github.com/ContinuumIO/anaconda-recipes/blob/master/anaconda-build/meta.yaml#L36-L44)[https://github.com/ContinuumIO/anaconda-recipes/blob/master/anaconda-build/meta.yaml#L36-L44](https://github.com/ContinuumIO/anaconda-recipes/blob/master/anaconda-build/meta.yaml#L36-L44)\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Also, distinguish summary (limit of 77 or 80 chars) from description (unlimited)"}),"\n",(0,r.jsx)(n.li,{children:"Anaconda  verify: would be nice to meet in the middle, rather than diverge.   conda-build may integrate anaconda-verify, would be nice if conda-forge  added metadata here."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Drop numpy 1.10 and reduce our build matrix. (Numba now works with numpy 1.11.)"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Signing packages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Should be easy to do. ( [](http://conda.pydata.org/docs/signed-packages.html)[http://conda.pydata.org/docs/signed-packages.html](http://conda.pydata.org/docs/signed-packages.html) )\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"There has been some interest previously."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"HTTPError: 503 Server Error: Service Unavailable: Back-end server is at capacity for url..."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Seems we are regularly running into this issue under normal usage conditions.\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Had discussed previously caching packages on AppVeyor and trying to reuse those to start."}),"\n",(0,r.jsx)(n.li,{children:"Maybe we need to consider caching on all CIs."}),"\n",(0,r.jsxs)(n.li,{children:["Building our own Miniconda-like self-extracting scripts with packages via ",(0,r.jsx)(n.a,{href:"https://github.com/conda/constructor",children:(0,r.jsx)(n.code,{children:"constructor"})}),"."]}),"\n",(0,r.jsx)(n.li,{children:"There  have been improvements on Continuum's side that should help this.  In  short, repodata (the package index for a given channel) was being  generated for each anaconda.org query.  This was unnecessarily high  cost, and some caching schemes have been implemented."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Handling removal of unpinned/improperly pinned packages."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Has been done manually thus far.\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"This doesn't scale well though."}),"\n",(0,r.jsx)(n.li,{children:"Should we (semi) automate removal?"}),"\n",(0,r.jsxs)(n.li,{children:["Should we hot-fix broken packages? ( ",(0,r.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge.github.io/pull/170",children:"conda forge/conda forge.github.io#170"})," )"]}),"\n",(0,r.jsx)(n.li,{children:"Should we label them as broken"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Not currently buildable packages"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   In particular open source code that is out of scope for CIs.\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Examples include Qt4, Qt5, possibly PyQt4, possibly PyQt5, gcc, VTK, etc."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"How do we indicate they are built manually?"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Are we ok with uploading non-built binaries?"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"When do we determine something is ok to be built manually?"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"What procedures should people follow for building manually?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"    *   Use a standard build docker image, VM, or vagrant file\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Sign package?"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Implement reproducible builds where feasible (linux)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"        *   [](https://reproducible-builds.org/)[https://reproducible-builds.org/](https://reproducible-builds.org/)\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"What changes do we need to make in conda-smithy elsewhere?"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"What other build infrastructure could we utilize?"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"    *   Would  be nice to provide some volunteer builder abstraction, so that we could  have an elastic worker farm that would be somewhat resilient.\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Standardizing build images is probably (relatively) easy - how to orchestrate, though?"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://conda-forge.hackpad.com/DZNKZdgiMbF",children:"Staged Releases"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Windows BLAS Solutions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Still don't have a BLAS for Windows yet need something.\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Don't build a BLAS"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"    *   NumPy has a small subset of BLAS functionality.\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Not sure what to do with SciPy (unable to find Windows wheels for them either)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Build OpenBLAS with C support only."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Will be pretty slow.\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Should work on all Pythons."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Build OpenBLAS with MinGW compilers."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Works with Python 2.7 and 3.4.\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Won't work with Python 3.5?"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Reuse something like R's BLAS."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"*   Is there a package for something like this?\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Will it have the same issues with Python 3.5?"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"ATLAS?"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>t});var s=i(96540);const r={},o=s.createContext(r);function l(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);