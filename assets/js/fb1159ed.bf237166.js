"use strict";(self.webpackChunkcf_infra_docs=self.webpackChunkcf_infra_docs||[]).push([[25672],{40089:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var s=t(70449),r=t(74848),a=t(28453);const i={authors:["marcelotrevisani"],tags:["conda"]},l="By the power of Grayskull... I have the Conda recipe!",o={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Current status",id:"current-status",level:2},{value:"Installation",id:"installation",level:2},{value:"With conda",id:"with-conda",level:3},{value:"With pip",id:"with-pip",level:3},{value:"Grayskull vs conda-build skeleton",id:"grayskull-vs-conda-build-skeleton",level:2},{value:"Grayskull (0.2.1) - took 4 seconds to generate the recipe",id:"grayskull-021---took-4-seconds-to-generate-the-recipe",level:3},{value:"Skeleton (3.18.11) - took 31 seconds to generate the recipe",id:"skeleton-31811---took-31-seconds-to-generate-the-recipe",level:3},{value:"Original recipe on <code>conda-forge</code> for <code>pytest 5.3.5</code>",id:"original-recipe-on-conda-forge-for-pytest-535",level:3},{value:"Major differences",id:"major-differences",level:3},{value:"Usage Grayskull (0.2.1)",id:"usage-grayskull-021",level:2},{value:"Future plans",id:"future-plans",level:2},{value:"Issues",id:"issues",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",del:"del",em:"em",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"The main goal of the Skeleto"}),(0,r.jsx)(n.del,{children:"n"}),(0,r.jsx)(n.em,{children:"r is to conquer Grayskull."})]}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["All jokes aside, the new project\n",(0,r.jsx)(n.a,{href:"https://github.com/marcelotrevisani/grayskull",children:"grayskull"})," was created\nwith the ",(0,r.jsx)(n.strong,{children:"intention"})," of generating better Conda recipes that would\nallow to package properly projects available in different channels such\nas PyPI, CRAN, Conan, GitHub register, GitHub repositories and so on. On\ntop of that, Grayskull is also being developed to help\n",(0,r.jsx)(n.a,{href:"https://conda-forge.org/",children:"conda-forge"})," to update recipes."]}),"\n",(0,r.jsx)(n.h2,{id:"current-status",children:"Current status"}),"\n",(0,r.jsxs)(n.p,{children:["Currently, Grayskull (version ",(0,r.jsx)(n.code,{children:"0.2.1"}),") is able to generate recipes just\nlooking for packages on ",(0,r.jsx)(n.a,{href:"https://pypi.org/",children:"PyPI"}),", and it is available\non ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/grayskull/",children:"PyPI"})," and\n",(0,r.jsx)(n.a,{href:"https://github.com/conda-forge/grayskull-feedstock",children:"conda-forge"}),". The\nGitHub repository for this package is:\n",(0,r.jsx)(n.a,{href:"https://github.com/marcelotrevisani/grayskull",children:"marcelotrevisani/grayskull"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Before Grayskull, we just had ",(0,r.jsx)(n.code,{children:"conda-build skeleton"})," to generate recipes\nfor Python packages on PyPI. In all other aspects, the difference of\nquality of the generated recipes, and also the time spent to generate\nthem have a big discrepancy when compared to ",(0,r.jsx)(n.code,{children:"conda-build skeleton"})," and\n",(0,r.jsx)(n.code,{children:"grayskull"}),". Grayskull generates recipes taking in consideration the\nplatform, Python version available, selectors, compilers (Fortran, C and\nC++), packages constrains, license type, license file, and so forth. It\nuses metadata available from multiple sources to try to create the best\nrecipe possible."]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(n.p,{children:["You can install ",(0,r.jsx)(n.code,{children:"grayskull"})," using ",(0,r.jsx)(n.code,{children:"pip"})," or ",(0,r.jsx)(n.code,{children:"conda"}),". ",(0,r.jsx)(n.code,{children:"Grayskull"})," does not\nrely on ",(0,r.jsx)(n.code,{children:"conda"})," to run and can generate recipes with minimum\ndependencies."]}),"\n",(0,r.jsx)(n.h3,{id:"with-conda",children:"With conda"}),"\n",(0,r.jsx)(n.p,{children:"Grayskull is available on the conda-forge channel."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"conda install -c conda-forge grayskull\n"})}),"\n",(0,r.jsx)(n.h3,{id:"with-pip",children:"With pip"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install grayskull\n"})}),"\n",(0,r.jsx)(n.h2,{id:"grayskull-vs-conda-build-skeleton",children:"Grayskull vs conda-build skeleton"}),"\n",(0,r.jsxs)(n.p,{children:["There are some differences of recipes generated by ",(0,r.jsx)(n.code,{children:"grayskull"})," and\n",(0,r.jsx)(n.code,{children:"conda skeleton"}),". Taking as example the ",(0,r.jsx)(n.code,{children:"pytest"})," recipe, which has\nselectors for platforms, Python version constrains, and has several\npackage constrains as well."]}),"\n",(0,r.jsx)(n.h3,{id:"grayskull-021---took-4-seconds-to-generate-the-recipe",children:"Grayskull (0.2.1) - took 4 seconds to generate the recipe"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'{% set name = "pytest" %}\n{% set version = "5.3.5" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 0d5fe9189a148acc3c3eb2ac8e1ac0742cb7618c084f3d228baaec0c254b318d\n\nbuild:\n  number: 0\n  skip: true   # [py2k]\n  entry_points:\n    - pytest=pytest:main\n    - py.test=pytest:main\n  script: {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  host:\n    - pip\n    - python\n    - setuptools >=40.0\n    - setuptools_scm\n  run:\n    - atomicwrites >=1.0      # [win]\n    - attrs >=17.4.0\n    - colorama      # [win]\n    - importlib-metadata >=0.12        # [py<38]\n    - more-itertools >=4.0.0\n    - packaging\n    - pathlib2 >=2.2.0        # [py<36]\n    - pluggy <1.0,>=0.12\n    - py >=1.5.0\n    - python\n    - wcwidth\n\ntest:\n  imports:\n    - pytest\n  commands:\n    - pip check\n    - pytest --help\n    - py.test --help\n  requires:\n    - pip\n\nabout:\n  home: https://pypi.org/project/pytest/\n  summary: \'pytest: simple powerful testing with Python\'\n  dev_url: https://github.com/pytest-dev/pytest\n  license: MIT\n  license_file: LICENSE\n\nextra:\n  recipe-maintainers:\n    - marcelotrevisani\n'})}),"\n",(0,r.jsx)(n.h3,{id:"skeleton-31811---took-31-seconds-to-generate-the-recipe",children:"Skeleton (3.18.11) - took 31 seconds to generate the recipe"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'{% set name = "pytest" %}\n{% set version = "5.3.5" %}\n\npackage:\n  name: "{{ name|lower }}"\n  version: "{{ version }}"\n\nsource:\n  url: "https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz"\n  sha256: 0d5fe9189a148acc3c3eb2ac8e1ac0742cb7618c084f3d228baaec0c254b318d\n\nbuild:\n  number: 0\n  script: "{{ PYTHON }} -m pip install . -vv"\n\nrequirements:\n  host:\n    - atomicwrites >=1.0\n    - attrs >=17.4.0\n    - colorama;sys_platform =="win32"\n    - importlib-metadata >=0.12\n    - more-itertools >=4.0.0\n    - packaging\n    - pathlib2 >=2.2.0\n    - pip\n    - pluggy >=0.12,<1.0\n    - py >=1.5.0\n    - python\n    - wcwidth\n  run:\n    - atomicwrites >=1.0\n    - attrs >=17.4.0\n    - colorama;sys_platform =="win32"\n    - importlib-metadata >=0.12\n    - more-itertools >=4.0.0\n    - packaging\n    - pathlib2 >=2.2.0\n    - pluggy >=0.12,<1.0\n    - py >=1.5.0\n    - python\n    - wcwidth\n\nabout:\n  home: The package home page\n  license: MIT\n  license_family: MIT\n  license_file:\n  summary: "pytest: simple powerful testing with Python"\n  doc_url:\n  dev_url:\n\nextra:\n  recipe-maintainers:\n    - your-github-id-here\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"original-recipe-on-conda-forge-for-pytest-535",children:["Original recipe on ",(0,r.jsx)(n.code,{children:"conda-forge"})," for ",(0,r.jsx)(n.code,{children:"pytest 5.3.5"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'{% set version = "5.3.5" %}\n\npackage:\n  name: pytest\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/p/pytest/pytest-{{ version }}.tar.gz\n  sha256: 0d5fe9189a148acc3c3eb2ac8e1ac0742cb7618c084f3d228baaec0c254b318d\n\nbuild:\n  skip: True  # [py27]\n  number: 1\n  script: "{{ PYTHON }} setup.py install --single-version-externally-managed --record record.txt"\n  entry_points:\n    - py.test = py.test:main\n    - pytest = py.test:main\n\nrequirements:\n  host:\n    - pip\n    - python\n    - setuptools >=40.0\n    - setuptools_scm\n  run:\n    - atomicwrites >=1.0  # [win]\n    - attrs >=17.4.0\n    - colorama  # [win]\n    - importlib_metadata >=0.12  # [py<38]\n    - more-itertools >=4.0\n    - packaging\n    - pathlib2 >=2.2.0  # [py<36]\n    - pluggy >=0.12,<1.0\n    - py >=1.5.0\n    - python\n    - setuptools >=40.0\n    - wcwidth\n  run_constrained:\n    # pytest-faulthandler 2 is a dummy package.\n    # if an older version of fault-handler is installed, it will conflict with pytest >=5.\n    - pytest-faulthandler >=2\n\ntest:\n  commands:\n    - pytest -h\n  imports:\n    - pytest\n\nabout:\n  home: https://docs.pytest.org/en/latest/\n  license: MIT\n  license_file: LICENSE\n  summary: \'Simple and powerful testing with Python.\'\n  description: |\n    The pytest framework makes it easy to write small tests, yet scales to\n    support complex functional testing for applications and libraries.\n    doc_url: https://docs.pytest.org/en/latest/\n    dev_url: https://github.com/pytest-dev/pytest/\n\nextra:\n  recipe-maintainers:\n    - flub\n    - goanpeca\n    - nicoddemus\n    - ocefpaf\n    - mingwandroid\n'})}),"\n",(0,r.jsx)(n.h3,{id:"major-differences",children:"Major differences"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Attribute"}),(0,r.jsx)(n.th,{children:"Grayskull (0.2.1)"}),(0,r.jsx)(n.th,{children:"Skeleton (3.18.11)"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Command"})}),(0,r.jsx)(n.td,{children:"\u2705 grayskull pypi pytest"}),(0,r.jsx)(n.td,{children:"\u2705 conda skeleton pypi pytest"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Time"})}),(0,r.jsx)(n.td,{children:"\u2705 4 seconds"}),(0,r.jsx)(n.td,{children:"\u274c 31 seconds"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"License"})}),(0,r.jsx)(n.td,{children:"\u2705 Added the license file and license type correctly"}),(0,r.jsx)(n.td,{children:"\u2757\ufe0f Added just the license type"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Host Requirements"})}),(0,r.jsx)(n.td,{children:"\u2705 Added correctly all the host requirements"}),(0,r.jsx)(n.td,{children:"\u274c it didn't add the correctly the host dependencies. It added unnecessary dependencies and it is missing quite a few of them necessary to build the package"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Run Requirements"})}),(0,r.jsx)(n.td,{children:"\u2705 Missing just setuptools from the host requirements (but this dependency is not defined on pytest package)"}),(0,r.jsx)(n.td,{children:"\u274c incorrect dependencies added to the project"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Selectors"})}),(0,r.jsx)(n.td,{children:"\u2705 Skipping correctly Python 2 and added selectors for windows and python versions"}),(0,r.jsx)(n.td,{children:"\u274c it didn't add any information regarding selectors. Actually conda-build added wrong information which will result in a broken recipe. For example 'sys_platform == win32' was added which is a wrong format for conda recipes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Entry points"})}),(0,r.jsx)(n.td,{children:"\u2705 Added all entry points correctly"}),(0,r.jsx)(n.td,{children:"\u274c No entry points"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Does it build?"})}),(0,r.jsx)(n.td,{children:"\u2705 YES"}),(0,r.jsx)(n.td,{children:"\u274c NO"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["In the case of ",(0,r.jsx)(n.code,{children:"noarch: python"}),", Grayskull is smart enough to detect\nwhen the recipe supports it, which is not done by Skeleton. It is\nimportant to highlight that Skeleton does not detect compilers as well.\nNevertheless, Grayskull always try to detect it."]}),"\n",(0,r.jsx)(n.h2,{id:"usage-grayskull-021",children:"Usage Grayskull (0.2.1)"}),"\n",(0,r.jsx)(n.p,{children:"Project options:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ grayskull --help\nusage: grayskull [-h] [--version] {pypi} ...\n\nGrayskull - Conda recipe generator\n\npositional arguments:\n{pypi}         Options to generate PyPI recipes\npypi         Generate recipes based on PyPI\n\noptional arguments:\n-h, --help     show this help message and exit\n--version, -v  Print Grayskull version and exit\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ grayskull pypi --help\nusage: grayskull pypi [-h] [--maintainers MAINTAINERS [MAINTAINERS...]]\n[--output OUTPUT]\npypi_packages [pypi_packages ...]\n\npositional arguments:\npypi_packages         Specify the PyPI package name.\n\noptional arguments:\n-h, --help            show this help message and exit\n--maintainers MAINTAINERS [MAINTAINERS ...], -m MAINTAINERS [MAINTAINERS...] List of maintainers which will be added to the recipe.\n--output OUTPUT, -o OUTPUT Path to where the recipe will be created\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To generate the recipe you can just call ",(0,r.jsx)(n.code,{children:"grayskull"})," and pass the\nchannel (as for now we are just supporting PyPI, it should be pypi) and\nthe package name. You should also specify an output folder using the\noption ",(0,r.jsx)(n.code,{children:"--output"})," or ",(0,r.jsx)(n.code,{children:"-o"})," and it will create the package folder, and the\nrecipe in there. It is important to note that the user can specify a\nlist of maintainers which will be added to the recipe using the option\n",(0,r.jsx)(n.code,{children:"--maintainers"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Example for pytest:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/marcelotrevisani/grayskull/15e4a0317da4e6c2f66a381329682b7e9dc70da0/docs/images/cli_example_grayskull.gif",alt:"Grayskull CLI"})}),"\n",(0,r.jsx)(n.p,{children:"If you need to specify the package version you can do it just puting the\nequal sign after the package name and the version just right after that.\nExample:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"grayskull pypi requests=2.21.0\n"})}),"\n",(0,r.jsx)(n.p,{children:"or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"grayskull pypi requests==2.21.0\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/marcelotrevisani/grayskull/15e4a0317da4e6c2f66a381329682b7e9dc70da0/docs/images/cli_example_grayskull_version.gif",alt:"Grayskull pinned package -requests"})}),"\n",(0,r.jsx)(n.p,{children:"If you want to generate multiple recipes just pass a list of packages,\nsuch as:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"grayskul pypi pytest requests=2.21.0 colorama\n"})}),"\n",(0,r.jsx)(n.h2,{id:"future-plans",children:"Future plans"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"For the next major version (1.0.0) it is planned to add the\nfunctionality to be able to load the recipe and update just parts\nof it;"}),"\n",(0,r.jsx)(n.li,{children:"Generate Conda recipes using CRAN (R) channel (2.0.0);"}),"\n",(0,r.jsx)(n.li,{children:"Generate Conda recipes using Conan (C++) channel (3.0.0);"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"issues",children:"Issues"}),"\n",(0,r.jsxs)(n.p,{children:["Any problem, question, suggestions please feel free to open ",(0,r.jsx)(n.a,{href:"https://github.com/marcelotrevisani/grayskull/issues",children:"an issue on\nthe repository"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Contributions are very welcome! :)"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["This work was possible thanks to the ",(0,r.jsx)(n.a,{href:"https://numfocus.org/",children:"NumFOCUS"}),"\nSmall Development Grant program."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(96540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},70449:e=>{e.exports=JSON.parse('{"permalink":"/blog/2020/03/05/grayskull","editUrl":"https://github.com/conda-forge/conda-forge.github.io/tree/refs/heads/main/blog/2020-03-05-grayskull.md","source":"@site/blog/2020-03-05-grayskull.md","title":"By the power of Grayskull... I have the Conda recipe!","description":"The main goal of the Skeleto~~n~~r is to conquer Grayskull.","date":"2020-03-05T00:00:00.000Z","tags":[{"inline":true,"label":"conda","permalink":"/blog/tags/conda"}],"readingTime":6.925,"hasTruncateMarker":true,"authors":[{"name":"Marcelo Duarte Trevisani","title":"Member of conda-forge/core","url":"https://github.com/marcelotrevisani","imageURL":"https://github.com/marcelotrevisani.png","key":"marcelotrevisani","page":null}],"frontMatter":{"authors":["marcelotrevisani"],"tags":["conda"]},"unlisted":false,"prevItem":{"title":"PyPy builds on conda-forge","permalink":"/blog/2020/03/10/pypy"},"nextItem":{"title":"Google Summer of Code 2020 improved automatic maintenance of conda-forge","permalink":"/blog/2020/02/04/gsoc"}}')}}]);