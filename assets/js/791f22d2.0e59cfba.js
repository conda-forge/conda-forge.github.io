"use strict";(self.webpackChunkcf_infra_docs=self.webpackChunkcf_infra_docs||[]).push([[82856],{3125:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var o=t(97957),i=t(74848),s=t(28453);const r={},a="Dropping CUDA 11.8 as a default CUDA version",c={authorsImageUrls:[]},d=[];function l(e){const n={a:"a",code:"code",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["CUDA 11.8 is the last holdover from the old days before conda-forge\n",(0,i.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge.github.io/issues/1963",children:"switched"}),"\nto the new and shiny CUDA 12+ infrastructure, where the CUDA toolchain\nis provided as native conda-packages, rather than a blob in an image."]}),"\n",(0,i.jsx)(n.p,{children:"For CUDA-enabled feedstocks, we've been building both 11.8 and 12.6 by default\nfor a while now, but many feedstocks (notably pytorch, tensorflow, onnx, jax etc.)\nhave dropped CUDA 11.8 for many months already."}),"\n",(0,i.jsx)(n.p,{children:"Due to various constraints (details below), we are dropping CUDA 11.8 as a default\nversion in our global pinning on June 5th. It will still be possible to opt into\nbuilding CUDA 11.8 on a per-feedstock basis where this is necessary or beneficial."}),"\n",(0,i.jsx)(n.p,{children:"The above-mentioned contraints are mainly:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["it ",(0,i.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge-pinning-feedstock/issues/6967",children:"complicates our pinning"})," due to needing to switch images and compilers with 11.8."]}),"\n",(0,i.jsxs)(n.li,{children:["it keeps us from ",(0,i.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge-pinning-feedstock/pull/7005",children:"migrating"}),"\nto newer CUDA 12.x versions necessary to support new architectures."]}),"\n",(0,i.jsxs)(n.li,{children:["it's ",(0,i.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge.github.io/issues/2138#issuecomment-2916743741",children:"not compatible with VS2022"}),", which is due to become the default toolchain on windows\nin conda-forge soon (the previous VS2019 has reached end-of-life more than a year ago)."]}),"\n",(0,i.jsx)(n.li,{children:"it complicates our infrastructure in several places, due to the big differences between the\nbefore/after of the new CUDA architecture."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"After we have removed CUDA 11.8 from the pinning, any feedstock still building that version\nwill drop the respective CI jobs upon rerendering. For feedstocks wanting to keep building\nCUDA 11.8 a bit longer, we have provided a custom migrator."}),"\n",(0,i.jsxs)(n.p,{children:["The way to make use of this is to copy\n",(0,i.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge-pinning-feedstock/blob/main/recipe/migrations/cuda118.yaml",children:(0,i.jsx)(n.code,{children:"cuda118.yaml"})}),"\nfrom the global pinning into ",(0,i.jsx)(n.code,{children:".ci_support/migrations"})," on your feedstock.\nIf the ",(0,i.jsx)(n.code,{children:"migrations"})," subfolder doesn't exist, please create it. Once that's committed\n(and there are no skips in the recipe for CUDA 11.8), rerendering the feedstock\nwill reinstate the builds for CUDA 11.8. If you have trouble with that, please open\na thread on ",(0,i.jsx)(n.a,{href:"https://conda-forge.zulipchat.com/",children:"https://conda-forge.zulipchat.com/"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Finally, please let us\nknow in the ",(0,i.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge-pinning-feedstock/issues/7404",children:"issue"}),"\nif your feedstock still needs to support CUDA 11.8 and why (later down the line we'll want to\ndrop support also in conda-forge-ci-setup, and knowing what feedstocks - if any - still need\nCUDA 11.8 will help guide the decision on timing)."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(96540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}},97957:e=>{e.exports=JSON.parse('{"permalink":"/news/2025/05/29/cuda-118","source":"@site/news/2025-05-29-cuda-118.md","title":"Dropping CUDA 11.8 as a default CUDA version","description":"CUDA 11.8 is the last holdover from the old days before conda-forge","date":"2025-05-29T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Moving to Visual Studio 2022 as default windows compiler","permalink":"/news/2025/06/11/moving-to-vs2022"},"nextItem":{"title":"Upcoming closure of NumPy 2.0 migration","permalink":"/news/2025/05/28/numpy-2-migration-closure"}}')}}]);