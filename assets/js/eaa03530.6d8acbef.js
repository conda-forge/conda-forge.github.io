"use strict";(self.webpackChunkcf_infra_docs=self.webpackChunkcf_infra_docs||[]).push([[45003],{37900:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"minutes/2024-01-24","title":"2024-01-24","description":"Add new agenda items under the Your new() agenda items heading","source":"@site/community/minutes/2024-01-24.md","sourceDirName":"minutes","slug":"/minutes/2024-01-24","permalink":"/community/minutes/2024-01-24","draft":false,"unlisted":false,"editUrl":"https://github.com/conda-forge/conda-forge.github.io/tree/refs/heads/main/community/minutes/2024-01-24.md","tags":[],"version":"current","lastUpdatedAt":1733216895000,"frontMatter":{"title":"2024-01-24"},"sidebar":"community","previous":{"title":"2024-02-07","permalink":"/community/minutes/2024-02-07"},"next":{"title":"2024-01-10","permalink":"/community/minutes/2024-01-10"}}');var s=t(74848),d=t(28453);const r={title:"2024-01-24"},l="conda-forge core meeting 2024-01-24",o={},a=[{value:"Attendees",id:"attendees",level:2},{value:"Standing items",id:"standing-items",level:3},{value:"From previous meeting(s)",id:"from-previous-meetings",level:3},{value:"Active votes",id:"active-votes",level:3},{value:"Your <code>__new__()</code> agenda items",id:"your-__new__-agenda-items",level:3},{value:"Pushed to next meeting",id:"pushed-to-next-meeting",level:3},{value:"CFEPs",id:"cfeps",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"conda-forge-core-meeting-2024-01-24",children:"conda-forge core meeting 2024-01-24"})}),"\n",(0,s.jsxs)(n.p,{children:["Add new agenda items under the ",(0,s.jsx)(n.code,{children:"Your __new__() agenda items"})," heading"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://zoom.us/j/9138593505?pwd=SWh3dE1IK05LV01Qa0FJZ1ZpMzJLZz09",children:"Zoom link"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://dateful.com/convert/utc?t=5pm",children:"What time is the meeting in my time zone"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://hackmd.io/#REPLACE_ME#",children:"Last week's meeting"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"attendees",children:"Attendees"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Initials"}),(0,s.jsx)(n.th,{children:"GitHub ID"}),(0,s.jsx)(n.th,{children:"Affiliation"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Jaime Rodr\xedguez-Guerra"}),(0,s.jsx)(n.td,{children:"JRG"}),(0,s.jsx)(n.td,{children:"jaimergp"}),(0,s.jsx)(n.td,{children:"Quansight/cf"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Michael Sarahan"}),(0,s.jsx)(n.td,{children:"MCS"}),(0,s.jsx)(n.td,{children:"msarahan"}),(0,s.jsx)(n.td,{children:"NVIDIA/CF"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Marius van Niekerk"}),(0,s.jsx)(n.td,{children:"MvN"}),(0,s.jsx)(n.td,{children:"mariusvniekerk"}),(0,s.jsx)(n.td,{children:"Voltron Data/CF"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Cheng H. Lee"}),(0,s.jsx)(n.td,{children:"CHL"}),(0,s.jsx)(n.td,{children:"chenghlee"}),(0,s.jsx)(n.td,{children:"Anaconda/CF"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"12 people total"}),"\n",(0,s.jsx)(n.h3,{id:"standing-items",children:"Standing items"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"[ ]"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"from-previous-meetings",children:"From previous meeting(s)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"[ ]"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"active-votes",children:"Active votes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"[ ]"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"your-__new__-agenda-items",children:["Your ",(0,s.jsx)(n.code,{children:"__new__()"})," agenda items"]}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," (HV) How do we introduce ",(0,s.jsx)(n.code,{children:'{{ stdlib("c") }}'}),"?\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Design ",(0,s.jsx)(n.a,{href:"https://github.com/conda/conda-build/issues/5053",children:"objections"})," were withdrawn, functionality is released in conda-build 3.28 already."]}),"\n",(0,s.jsxs)(n.li,{children:["Main question is how to roll out this change broadly. I suggest to keep it tightly scoped to just the C stdlib for now (though the possibility of linking it with a dedicated ",(0,s.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge.github.io/issues/2015",children:"migration"})," for ",(0,s.jsx)(n.code,{children:"error_overlinking: true"})," remains an option, if we want)."]}),"\n",(0,s.jsx)(n.li,{children:"(IF) Think we should have a mini-migrator (piggyback) so we don't have to rebuild all C/C++ packages; only rebuild when we really have to."}),"\n",(0,s.jsx)(n.li,{children:"(MvN) Agrees that we should take a lazy approach to migration; maybe have a list of some packages to eagerly migrate"}),"\n",(0,s.jsx)(n.li,{children:'(MvN/IF) We can safely assume that the "world is flat" -> dependent packages won\'t need to be migrated as well.'}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," (HV) ",(0,s.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge-pinning-feedstock/pull/5191",children:"Migrate"})," boost 1.84?\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Recently we've migrated every 4th release of boost; previously it happened more often (every second release). There was a suggestion by a core member (Uwe) to migrate for 1.84; I think it'd be worth doing."}),"\n",(0,s.jsx)(n.li,{children:"After the big refactor with 1.82 (splitting off header-only lib, adding run-export), it should be easier to migrate nowadays."}),"\n",(0,s.jsx)(n.li,{children:"(IF) We should collect/review data on how long it takes to perform a boost migration, and use that to judge how often we should update. e.g. if it takes 3 months, then maybe once a year is sensible; if it takes 1 month, then every six months?"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," (KE) Can we create an sccache store to reduce build redundancy?\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:['(MvN) Big question is, "where do we put the cache?"\n',(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(MCS) Do we have contacts at MSFT or other cloud providers we can talk with?"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["(MvN) ",(0,s.jsx)(n.code,{children:"conda-build"})," behavior complicates caching; e.g., use of timestamps in build env names can leak into cache if not careful"]}),"\n",(0,s.jsx)(n.li,{children:"(IF) When do we need sccache? E.g., does building different build numbers vs [upstream] versions benefit from cache?"}),"\n",(0,s.jsxs)(n.li,{children:["(MCS/KE) Opinion at Nvidia is Rapids can't get on conda-forge because it would take too long to build. Exploring if sccache would make conda-forge distribution feasible.\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(IF) using Quansight-hosted builder may be an option"}),"\n",(0,s.jsx)(n.li,{children:"(KK) Building all of Rapids likely a bigger job than PyTorch or TensorFlow. May also want to consider splitting into per-device architecture builds"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["(MCS) Need clear motivation to distribute Rapids via c-f; don't want to overload c-f infrastructure otherwise\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"(KK) Currently not possible to [easily] depend on cuDF, cuML"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"pushed-to-next-meeting",children:"Pushed to next meeting"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"[ ]"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"cfeps",children:"CFEPs"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"[ ]"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(96540);const s={},d=i.createContext(s);function r(e){const n=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);