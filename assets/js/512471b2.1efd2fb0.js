"use strict";(self.webpackChunkcf_infra_docs=self.webpackChunkcf_infra_docs||[]).push([[92991],{79365:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>h});var a=t(77547),i=t(74848),o=t(28453);const s={authors:["cj-wright"],tags:["autotick-bot"]},r="Automatically Deployed ABI Migrations",c={authorsImageUrls:[void 0]},h=[];function d(e){const n={a:"a",code:"code",p:"p",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Handling application binary interface (ABI) migrations has always been a\nhassle for Conda-Forge. Maintaining ABI consistency helps enable the\n\"just use conda-forge\" experience for many of our users, making\ncertain that numpy's blas is the same as scipy's. As libraries update\ntheir code, the new versions may be ABI incompatible, as function\nsignatures and other symbols may have changed, leading to the dreaded\n",(0,i.jsx)(n.code,{children:"SegmentationFault"})," and other errors."]}),"\n",(0,i.jsx)(n.p,{children:"Conda-Forge handles this by having a pinning file that tracks all the\ncurrently supported ABIs. These pinned ABIs are then used to build the\ndownstream packages, making certain that all are consistent. As new\nversions of pinned software are released the pins are updated, causing a\nmigration of the pin, and the rebuilding of all packages which rely on\nthe pinned package. In the past, this was handled by a change to the\nglobal pinnings and a subsequent migration via the auto-tick bot. While\nthis worked, there were issues that this created. Firstly, this approach\ncould cause unsatisfiable build dependencies for new packages, as some\nof the new package's dependencies had been compiled with the new pins,\nbut not all. Secondly, migrations happened in series, if a second pin\nwas moved while the first was being migrated then the migration could go\nwrong as packages which were being rebuilt for the first pin got the\nsecond pin before they were ready."}),"\n",(0,i.jsx)(n.p,{children:"Conda-Forge Core has recently approved CFEP-9, a migration policy to fix\nthese issues. With CFEP-9 pinnings are proposed as small yaml snippets\nwhich contain the new pins. The auto-tick bot then starts migrating the\npackages in order, applying the yaml snippet to each package in turn. If\na second pinning change is issued then the bot starts the migration for\nthat package too, enabling the two migrations to work independently. If\na package needs a change in both pins then the maintainers can choose\nthe order in which they apply the pins by merging one pin before the\nother."}),"\n",(0,i.jsxs)(n.p,{children:["This approach will yield much greater stability in migrations and will\nenable more maintainers to issue migrations. Migrations can be issued by\nputting a PR into\n",(0,i.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge-pinning-feedstock",children:"conda-forge/conda-forge-pinning-feedstock"}),",\nadding a file to the ",(0,i.jsx)(n.code,{children:"migrations"})," folder, PRs into the auto-tick bot are\nnot needed anymore."]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(96540);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}},77547:e=>{e.exports=JSON.parse('{"permalink":"/blog/2019/12/06/cfep09","editUrl":"https://github.com/conda-forge/conda-forge.github.io/tree/refs/heads/main/blog/2019-12-06-cfep09.md","source":"@site/blog/2019-12-06-cfep09.md","title":"Automatically Deployed ABI Migrations","description":"Handling application binary interface (ABI) migrations has always been a","date":"2019-12-06T00:00:00.000Z","tags":[{"inline":true,"label":"autotick-bot","permalink":"/blog/tags/autotick-bot"}],"readingTime":1.855,"hasTruncateMarker":true,"authors":[{"name":"Christopher J. \'CJ\' Wright","title":"Member of conda-forge/core","url":"https://github.com/cj-wright","imageURL":"https://github.com/cj-wright.png","key":"cj-wright","page":null}],"frontMatter":{"authors":["cj-wright"],"tags":["autotick-bot"]},"unlisted":false,"prevItem":{"title":"Google Summer of Code 2020 improved automatic maintenance of conda-forge","permalink":"/blog/2020/02/04/gsoc"}}')}}]);