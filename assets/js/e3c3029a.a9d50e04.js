"use strict";(self.webpackChunkcf_infra_docs=self.webpackChunkcf_infra_docs||[]).push([[24957],{67246:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"minutes/2016-08-12","title":"2016-08-12","description":"Time00 UTC","source":"@site/community/minutes/2016-08-12.md","sourceDirName":"minutes","slug":"/minutes/2016-08-12","permalink":"/community/minutes/2016-08-12","draft":false,"unlisted":false,"editUrl":"https://github.com/conda-forge/conda-forge.github.io/tree/refs/heads/main/community/minutes/2016-08-12.md","tags":[],"version":"current","lastUpdatedAt":1755751825000,"frontMatter":{"title":"2016-08-12"},"sidebar":"community","previous":{"title":"2016-08-25","permalink":"/community/minutes/2016-08-25"},"next":{"title":"2016-07-22","permalink":"/community/minutes/2016-07-22"}}');var l=s(74848),o=s(28453);const r={title:"2016-08-12"},c="2016-08-12: General discussion",t={},a=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",s:"s",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"2016-08-12-general-discussion",children:"2016-08-12: General discussion"})}),"\n",(0,l.jsx)(n.p,{children:"Time: 14:00 UTC"}),"\n",(0,l.jsxs)(n.p,{children:["Hangout link: ",(0,l.jsx)(n.a,{href:"https://hangouts.google.com/call/v5olhwzpfzgzpoq5i3wthjpqpie"}),(0,l.jsx)(n.a,{href:"https://hangouts.google.com/call/v5olhwzpfzgzpoq5i3wthjpqpie",children:"https://hangouts.google.com/call/v5olhwzpfzgzpoq5i3wthjpqpie"})]}),"\n",(0,l.jsx)(n.p,{children:"2016-07-22: General discussion"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Attendees"})}),"\n",(0,l.jsx)(n.p,{children:"Eric Dill"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://conda-forge.hackpad.com/ep/profile/AviM60TiesB",children:"Phil Elson"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://conda-forge.hackpad.com/ep/profile/yHQTJXZ4gyS",children:"Michael Sarahan"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.a,{href:"https://conda-forge.hackpad.com/ep/profile/wv6uvIZX6h0",children:"John Kirkham"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Standing items"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"How many repos?"}),"\n",(0,l.jsx)(n.li,{children:"How many contributors?"}),"\n",(0,l.jsx)(n.li,{children:"New core devs?"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Agenda"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Prerelease versions"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Python prerelease done at [conda forge/python feedstock#45](https://github.com/conda-forge/python-feedstock/pull/45) - is this an example to follow?\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Do we have documentation on how to do this?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Waiting PR: ",(0,l.jsx)(n.a,{href:"https://github.com/conda-forge/scikit-image-feedstock/pull/2",children:"conda forge/scikit image feedstock#2"})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Conda itself: ",(0,l.jsx)(n.a,{href:"https://github.com/conda/conda/pull/3262",children:"conda/conda#3262"}),"#issuecomment-239410077"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"proposal for naming pre-release channels:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"    *   embed the package name in the anaconda label so that you can specify exactly which pre-release things to install\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["The conda install command to specify from a label other than ",(0,l.jsx)(n.code,{children:"main"})," is:** **"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'        *   **`conda** install -c conda-forge/label/rc <package>`\n\n*   So  if you embed, for example, "matplotlib-" in the label name, then you  can specifically install *just* the matplotlib pre-release with:\n\n        *   `conda install -c conda-forge/label/matplotlib-rc matplotlib`\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Status page"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Have dependencies.\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Some code for the webservice"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Feedstocks philosophy:  Explicit vs implicit / reproducible vs redundant"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"OSX - getting back to a usable, coherent, stack"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   libc++ (clang) vs libstdc++ (gcc/g++)\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Minimum OSX required for clang (10.8, I think?)"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Actually clang is usable beginning in 10.7. So, this would be viable given your compatibility constraints."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Also, all the refs I have seen suggest that this will still have C++11 support."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Compatibility  with defaults (built on 10.7, uses gcc) - where will people break?  I  think only if mixing packages - how do we assure that we have all the  ones we need?"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Improving infrastructure"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Finish out GitHub API issues ( [conda forge/conda forge.github.io#172](https://github.com/conda-forge/conda-forge.github.io/issues/172) )\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Better workflows with staged-recipes"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"    *   Fast finish AppVeyor on merge ( [conda forge/staged recipes#1142](https://github.com/conda-forge/staged-recipes/pull/1142) )\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Drop Travis CI matrix ( ",(0,l.jsx)(n.a,{href:"https://github.com/conda-forge/staged-recipes/pull/1234",children:"conda forge/staged recipes#1234"})," )"]}),"\n",(0,l.jsxs)(n.li,{children:["Use CircleCI for feedstock generation ( ",(0,l.jsx)(n.a,{href:"https://github.com/conda-forge/staged-recipes/issues/916",children:"conda forge/staged recipes#916"})," )"]}),"\n",(0,l.jsxs)(n.li,{children:["Keeping recipes out of PRs ( ",(0,l.jsx)(n.a,{href:"https://github.com/conda-forge/staged-recipes/issues/942",children:"conda forge/staged recipes#942"})," )"]}),"\n",(0,l.jsxs)(n.li,{children:["Bank work in partial conversion ( ",(0,l.jsx)(n.a,{href:"https://github.com/conda-forge/staged-recipes/issues/915",children:"conda forge/staged recipes#915"})," )"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Low level packaging"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Basic community practices when PR-ing to staged-recipes."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"No need to re-discuss this. I am still writing the docs and, if ready, I will send the link tomorrow (or after SciPy ;-)"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["NetCDF (",(0,l.jsx)(n.s,{children:"also curl/ca-certificates and Perl packages"}),") - Done?"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   curl and ca-certificates are done and available. \n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Perl is no longer relevant as part of this process"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Notifications (how do we stay on top of them)"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Standardizing installs"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Mention [`toolchain`](https://github.com/conda-forge/toolchain-feedstock) .\n\n        *   Discuss rollout to feedstocks.\n\n*   Get feedback on [`python-toolchain`](https://github.com/conda-forge/staged-recipes/pull/642) \n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"MSYS2"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Available on defaults - was in conda 4.1.7, but that was pulled.  Coming in 4.1.8.\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Discussing Ray Donnelly's work on MSYS2 packages and how we want to use and integrate these into conda-forge."}),"\n",(0,l.jsx)(n.li,{children:"Some use cases to consider OpenBLAS, FFTW, build tools, others?"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Binary data"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Do we include it in recipes?\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"What kinds do we allow if any (e.g. icons)?"}),"\n",(0,l.jsx)(n.li,{children:"How do we verify the licensing?"}),"\n",(0,l.jsx)(n.li,{children:"How do we verify that they are safe?"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Dev releases: Where do they happen?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Do we do them at conda-forge?\n\n        *   Maybe add a label.\n\n*   Do we let others do them with a feedstock on their own repo?\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"How do we enforce whatever we decide?"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Conda-forge installer"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   We have Python 3.5 and 3.4 now. Would be nice to complete Python 2.7.\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Have all dependencies. Though ",(0,l.jsx)(n.code,{children:"conda-build"})," has some kinks to be worked out."]}),"\n",(0,l.jsx)(n.li,{children:"Many open questions about the installer including its name"}),"\n",(0,l.jsx)(n.li,{children:"Where do we host the installers? Git tags?"}),"\n",(0,l.jsx)(n.li,{children:"This can work right now if you pin to conda-build 1.21.7"}),"\n",(0,l.jsx)(n.li,{children:"But,  is realistically blocked due to a setuptools entrypoints issue on  windows that is fixed with conda 4.2, but 4.2 is not released yet.   conda 4.2 is slated to be released by the end of August"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Channel mirroring"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Can this point be a little bit explained? I thought about this as well and would like to contribute to this point.\n\n        *   Eric Dill has put together a script for copying a package from one channel to another here: [conda forge/conda forge.github.io#134](https://github.com/conda-forge/conda-forge.github.io/pull/134)\n*   I have a really, really crude script that copies all of the packages in one channel to another that I just put at: [](https://gist.github.com/mwcraig/8473cf840f6d29236d6d8af699404555)[https://gist.github.com/mwcraig/8473cf840f6d29236d6d8af699404555](https://gist.github.com/mwcraig/8473cf840f6d29236d6d8af699404555)\n*   conda-build-all can copy from one channel to another: `conda build-all --inspect-channels conda-forge --upload-channels astropy some_packge_recipe` will copy the `some_package`  from the channel conda-forge to  astropy if it can, or build it if it  doesn't exist on conda-forge. Discussion  about what the desired  behavior should be has started at: [SciTools/conda build all#46](https://github.com/SciTools/conda-build-all/issues/46)\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Feedstock history"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Is it sacred?\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Do we rebase/force push?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"    *   If so, under what conditions?\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"How do we avoid multiple people doing this simultaneously?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"        *   I don't think you can.\n\n*   IMHO,  if it's just one author in staged recipes, sure.  If feedstock, no  force push - only to PRs to feedstock.  If people don't mind merge PRs,  it sure is a lot simpler to not rebase.  I have messed up rebasing a few  times recently... =(\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Docker hosting solution"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Docker Hub builds were broken for a week and a half.\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Have switched to quay.io currently."}),"\n",(0,l.jsx)(n.li,{children:"Mirroring quay.io image on Docker Hub."}),"\n",(0,l.jsx)(n.li,{children:"Thoughts about quay.io? Thoughts about hosting in general?"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Continuum metadata request: can we add these to linter?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   example metadata: [](https://github.com/ContinuumIO/anaconda-recipes/blob/master/anaconda-build/meta.yaml#L36-L44)[https://github.com/ContinuumIO/anaconda-recipes/blob/master/anaconda-build/meta.yaml#L36-L44](https://github.com/ContinuumIO/anaconda-recipes/blob/master/anaconda-build/meta.yaml#L36-L44)\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Also, distinguish summary (limit of 77 or 80 chars) from description (unlimited)"}),"\n",(0,l.jsx)(n.li,{children:"Anaconda  verify: would be nice to meet in the middle, rather than diverge.   conda-build may integrate anaconda-verify, would be nice if conda-forge  added metadata here."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Google    hangouts has a max capacity of 10. Is it worth considering other    methods of communication so everyone who wants to participate can?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Maybe this ( ",(0,l.jsx)(n.a,{href:"http://www.freeconferencecalling.com/"}),(0,l.jsx)(n.a,{href:"http://www.freeconferencecalling.com/",children:"http://www.freeconferencecalling.com/"})," ) is an option."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Bluejeans"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Continuum has webex.  Past experience is that some Linux platforms had trouble connecting"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Drop numpy 1.10 and reduce our build matrix. (Numba now works with numpy 1.11.)"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["This comment from the PR for graphviz is the best summary I've seen: ",(0,l.jsx)(n.a,{href:"https://github.com/conda-forge/staged-recipes/pull/568",children:"conda forge/staged recipes#568"}),"#issuecomment-225315370"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Thanks for pointing this out. The described solution looks reasonable and is preferable to prefixing package names. Great!"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"What is the benefit?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Will   we distinguish between libs and standalone tools, similar to Debian? I   would strongly suggest to do this, because it is (1) established and  (2)  more accessible for the user (if he wants to use a library, he  knows  the language. If he wants to use a standalone, he doesn't care).",(0,l.jsx)(n.a,{href:"https://www.debian.org/doc/packaging-manuals/python-policy/ch-module_packages.html#s-package_names",children:" ( "}),(0,l.jsx)(n.a,{href:"https://www.debian.org/doc/packaging-manuals/python-policy/ch-module_packages.html#s-package_names"}),")",(0,l.jsx)(n.a,{href:"https://www.debian.org/doc/packaging-manuals/python-policy/ch-module_packages.html#s-package_names",children:"https://www.debian.org/doc/packaging-manuals/python-policy/ch-module_packages.html#s-package_names)"}),(0,l.jsx)(n.a,{href:"https://www.debian.org/doc/packaging-manuals/python-policy/ch-module_packages.html#s-package_names",children:" "})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Will   there be an orchestrated move? If not, how do we deal with   inconsistencies and potential conflicts (installing both python-h5py  and  h5py)."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   we will probably go with meta-packages for conflicting packages\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Signing packages"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Should be easy to do. ( ",(0,l.jsx)(n.a,{href:"http://conda.pydata.org/docs/signed-packages.html"}),(0,l.jsx)(n.a,{href:"http://conda.pydata.org/docs/signed-packages.html",children:"http://conda.pydata.org/docs/signed-packages.html"})," )"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"There has been some interest previously."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"HTTPError: 503 Server Error: Service Unavailable: Back-end server is at capacity for url..."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Seems we are regularly running into this issue under normal usage conditions."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Had discussed previously caching packages on AppVeyor and trying to reuse those to start."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Maybe we need to consider caching on all CIs."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Building our own Miniconda-like self-extracting scripts with packages via ",(0,l.jsx)(n.a,{href:"https://github.com/conda/constructor",children:(0,l.jsx)(n.code,{children:"constructor"})}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"There  have been improvements on Continuum's side that should help this.  In  short, repodata (the package index for a given channel) was being  generated for each anaconda.org query.  This was unnecessarily high  cost, and some caching schemes have been implemented."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Handling removal of unpinned/improperly pinned packages."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Has been done manually thus far."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"This doesn't scale well though."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Should we (semi) automate removal?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Should we hot-fix broken packages? ( ",(0,l.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge.github.io/pull/170",children:"conda forge/conda forge.github.io#170"})," )"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Not currently buildable packages"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"In particular open source code that is out of scope for CIs."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Examples include Qt4, Qt5, possibly PyQt4, possibly PyQt5, gcc, VTK, etc."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"How do we indicate they are built manually?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Are we ok with uploading non-built binaries?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"When do we determine something is ok to be built manually?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"What procedures should people follow for building manually?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Use a standard build docker image, VM, or vagrant file\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Sign package?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Implement reproducible builds where feasible (linux)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"    *   [](https://reproducible-builds.org/)[https://reproducible-builds.org/](https://reproducible-builds.org/)\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"What changes do we need to make in conda-smithy elsewhere?"}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"What other build infrastructure could we utilize?"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"*   Would  be nice to provide some volunteer builder abstraction, so that we could  have an elastic worker farm that would be somewhat resilient.\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Standardizing build images is probably (relatively) easy - how to orchestrate, though?"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Conda RPMs: ",(0,l.jsx)(n.a,{href:"https://github.com/pelson/conda-rpms"}),(0,l.jsx)(n.a,{href:"https://github.com/pelson/conda-rpms",children:"https://github.com/pelson/conda-rpms"})]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var i=s(96540);const l={},o=i.createContext(l);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);