"use strict";(self.webpackChunkcf_infra_docs=self.webpackChunkcf_infra_docs||[]).push([[22567],{35264:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/11/22/new-images","metadata":{"permalink":"/news/2024/11/22/new-images","source":"@site/news/2024-11-22-new-images.md","title":"Updating our default docker images","description":"TL;DR: We have made some updates to our Docker images and build time GLIBC selection.","date":"2024-11-22T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[],"frontMatter":{},"unlisted":false,"nextItem":{"title":"Migration to Unique Feedstock Tokens per Provider","permalink":"/news/2024/11/08/unique-feedstock-token-per-provider-migration"}},"content":"TL;DR: We have made some updates to our Docker images and build time GLIBC selection.\\n\\n1. We\'ve updated our default docker images to be based on alma9\\n2. It is now easier to override `c_stdlib_version` (especially for CUDA-enabled feedstocks), though our baseline of 2.17 hasn\'t changed.\\n3. Where necessary, you can more easily switch images by setting `os_version: ...` (see below).\\n4. We\'ve consolidated our image names to follow a consistent pattern:\\n\\n```\\nlinux-anvil-{x86_64,aarch64,ppc64le}:{cos7,alma8,alma9}\\n```\\n\\nIn general, it won\'t be necessary in the vast majority of cases to override the\\ndocker-image, but if you need to do so, you can add the following to `conda-forge.yml`\\n\\n```\\nos_version:             # just to demo different values;\\n  linux_64: cos7        # whenever possible, please use\\n  linux_aarch64: alma8  # homogeneous distro versions\\n  linux_ppc64le: alma9  # across platforms\\n```\\n\\n\x3c!-- truncate --\x3e\\n\\nLinux builds in conda-forge run on infrastructure derived from RHEL and its clones\\n-- previously CentOS, now AlmaLinux. Primarily we need this for four different\\ninterrelated but distinct pieces:\\n\\n- the docker images (containing the OS which will execute our builds)\\n- the sysroot (mainly the C standard library, `glibc`)\\n- the CDTs (pieces from the distribution we cannot package ourselves)\\n- feedstock usage of `yum_requirements.txt`\\n\\nA first key observation is that the glibc appears twice -- once explicitly in the\\nsysroot we package (and compile against!), and once implicitly in the image that\\nour CI runs on. This setup is essential to provide highly compatible packages by\\ndefault (by compiling against a cos7 baseline), while avoiding constant hassles\\nfor feedstocks where _any_ of the build/host/run dependencies requires a newer\\nglibc than the baseline.\\n\\nThis is because, for packages requiring a newer `c_stdlib_version` (and thus compiling\\nagainst a newer sysroot through the `{{ stdlib(\\"c\\") }}` infrastructure), will inherit\\na runtime-requirement of `__glibc >=c_stdlib_version`, which would be unsatisfiable on\\ndocker-images with a too-old glibc present at runtime.\\n\\nWe\'ve already had this setup since 2021 (when our glibc baseline was 2.12 from cos6,\\nyet we already used cos7 images), but after increasing the glibc baseline to 2.17, our\\nimages had lost their lead again. This is mostly related due to the third component from\\nabove, the CDTs (core dependency trees). These represent packages from the distribution\\nitself that are hard or impossible for us to provide, yet need a systematic way to\\ninteract with. You can read more about _why we want to avoid them as much as possible_\\n[here](https://conda-forge.org/docs/maintainer/knowledge_base/#why-are-cdts-bad).\\n\\nDue to the end of CentOS-as-we-knew it, we already had to rewrite a lot of the logic\\nthere in any case to switch to Alma, which we took as an opportunity to pare down the\\nset of CDTs we provide going forward. In a large majority of cases, we have regular\\nconda packages for some things that only used to be available as CDTs.\\n\\nCDTs and packages in `yum_requirements.txt` are closely related; in many ways it can\\nbe considered a similar compilation-vs.-runtime split as is the case with our sysroot\\n(that we compile against) vs. the glibc in the image at runtime. The split here being\\nthat CDTs are what we use to compile against a given distro package, and `yum_requirements.txt`\\nare how we tell the infrastructure to install them into the image, if they\'re also\\nnecessary at runtime (which is not always the case).\\n\\nIn other words, using our own packages generally allows feedstocks to avoid _both_ use\\nof CDTs and `yum_requirements.txt`. You can check out the CDTs we removed\\n[here](https://github.com/conda-forge/cdt-builds/issues/66#issuecomment-1833417828)\\nand how `yum_requirements.txt` translate from CentOS to Alma (resp. our own packages)\\n[here](https://github.com/conda-forge/conda-forge-pinning-feedstock/issues/6283#issuecomment-2440281086).\\n\\nThe change of the image might mean that CDTs we have not repackaged for Alma do not\\nmatch what\'s actually in the image anymore, or -- in rare cases -- that a package name\\nunder `yum_requirements.txt` needs to be updated. Please let us know if you run into\\nproblems there (after checking out the two links above how to transition a given package).\\n\\nFinally, there is one rare case where we explicitly ask feedstock authors to opt out\\nof the newest images: for any feedstocks doing binary repackaging on linux (i.e. not\\ncompiling the package from source), please ensure that your image version (as specified\\nin `conda-forge.yml`, see above) matches the `c_stdlib_version` that you are using.\\nBy default this is 2.17, which means you\'d have to do\\n\\n```\\nos_version:\\n  linux_64: cos7\\n  linux_aarch64: cos7\\n  linux_ppc64le: cos7\\n```\\n\\nIf you require a `c_stdlib_version` of 2.28 for a given platform, then set `alma8`."},{"id":"/2024/11/08/unique-feedstock-token-per-provider-migration","metadata":{"permalink":"/news/2024/11/08/unique-feedstock-token-per-provider-migration","source":"@site/news/2024-11-08-unique-feedstock-token-per-provider-migration.md","title":"Migration to Unique Feedstock Tokens per Provider","description":"We will be slowly migrating conda-forge to use unique feedstock tokens per provider. The feedstock token is used to allow maintainers to copy packages from our staging area to the main conda-forge channel. This change will improve our security posture and help us limit the impact of any leaked tokens. During this migration we will also be using newly implemented feedstock token expiration times to avoid race conditions between token changes and running builds.","date":"2024-11-08T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Updating our default docker images","permalink":"/news/2024/11/22/new-images"},"nextItem":{"title":"New time available for conda-forge core meetings","permalink":"/news/2024/11/07/new-time-core-meetings"}},"content":"We will be slowly migrating `conda-forge` to use unique feedstock tokens per provider. The feedstock token is used to allow maintainers to copy packages from our staging area to the main `conda-forge` channel. This change will improve our security posture and help us limit the impact of any leaked tokens. During this migration we will also be using newly implemented feedstock token expiration times to avoid race conditions between token changes and running builds."},{"id":"/2024/11/07/new-time-core-meetings","metadata":{"permalink":"/news/2024/11/07/new-time-core-meetings","source":"@site/news/2024-11-07-new-time-core-meetings.md","title":"New time available for conda-forge core meetings","description":"The core team has decided to change the time when core meetings happen to accommodate more attendees across different timezones. It will still happen every two Wednesdays, but starting next Wednesday, November 13th 2024, it will alternate between 1700 UTC and 1400 UTC.","date":"2024-11-07T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Migration to Unique Feedstock Tokens per Provider","permalink":"/news/2024/11/08/unique-feedstock-token-per-provider-migration"},"nextItem":{"title":"Moving to Zulip","permalink":"/news/2024/11/04/moving-to-zulip"}},"content":"The core team has decided to change the time when core meetings happen to accommodate more attendees across different timezones. It will still happen every two Wednesdays, but starting next Wednesday, November 13th 2024, it will alternate between 17:00-18:00 UTC and 14:00-15:00 UTC.\\n\\nFor clarity, these are the next dates:\\n\\n- November 13th, 2024 at 17:00 UTC\\n- November 27th, 2024 at 14:00 UTC\\n- December 11th, 2024 at 17:00 UTC\\n- ~~December 25th, 2024 at 14:00 UTC~~\\n- January 8th, 2025, at 17:00 UTC\\n- ... and so on.\\n\\nA new calendar is now available in the [Community > Meetings](/community/meetings/) section to help find the dates."},{"id":"/2024/11/04/moving-to-zulip","metadata":{"permalink":"/news/2024/11/04/moving-to-zulip","source":"@site/news/2024-11-04-moving-to-zulip.md","title":"Moving to Zulip","description":"Two weeks ago we called a vote on CFEP-23 to decide whether we move our Element/Matrix chat rooms to Zulip.","date":"2024-11-04T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"New time available for conda-forge core meetings","permalink":"/news/2024/11/07/new-time-core-meetings"},"nextItem":{"title":"Changes to the Feedstock Output Validation Procedure","permalink":"/news/2024/09/08/output-validation-changes"}},"content":"Two weeks ago we called a [vote](https://github.com/conda-forge/cfep/pull/54) on [CFEP-23](https://github.com/conda-forge/cfep/blob/main/cfep-23.md) to decide whether we move our [Element/Matrix chat rooms](https://matrix.to/#/#conda-forge:matrix.org) to Zulip.\\n\\nThis vote has passed and now we are opening the doors to our Zulip instance: https://conda-forge.zulipchat.com/. Please sign up to stay in touch!\\n\\nAs per [CFEP-23](https://github.com/conda-forge/cfep/blob/main/cfep-23.md) (read it for more details), this means that we will stop using our [Element chat rooms](https://matrix.to/#/#conda-forge:matrix.org). Instead all chat activity will continue in Zulip."},{"id":"/2024/09/08/output-validation-changes","metadata":{"permalink":"/news/2024/09/08/output-validation-changes","source":"@site/news/2024-09-08-output-validation-changes.md","title":"Changes to the Feedstock Output Validation Procedure","description":"We have changed our feedstock output validation procedure. Instead of automatically","date":"2024-09-08T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Moving to Zulip","permalink":"/news/2024/11/04/moving-to-zulip"},"nextItem":{"title":"Removing build in favor of python-build","permalink":"/news/2024/08/21/remove-build"}},"content":"We have changed our feedstock output validation procedure. Instead of automatically\\nadding new packages to existing feedstocks (e.g., when a new output is added), we will now\\nrequire that maintainers submit a PR to add the new output via our\\n[admin-requests repository](https://github.com/conda-forge/admin-requests?tab=readme-ov-file#add-a-package-output-to-a-feedstock).\\nNew feedstocks created via `staged-recipes` will have their outputs added automatically. If you maintain a feedstock\\nthat regularly adds new outputs (e.g., `llvmdev` has `libllvm18`, `libllvm19`, etc.), you can use the `admin-requsts` repo\\nto add a glob pattern that matches the pattern of your new outputs. We test these patterns aginst new outputs from the feedstock\\nusing the Python `fnmatch` module. Outputs from the feedstock that match a glob pattern will added automatically. Further\\ndetails on package output validation can be found in our [documentation](https://conda-forge.org/docs/maintainer/infrastructure/#output-validation-and-feedstock-tokens)."},{"id":"/2024/08/21/remove-build","metadata":{"permalink":"/news/2024/08/21/remove-build","source":"@site/news/2024-08-21-remove-build.md","title":"Removing build in favor of python-build","description":"For nearly two years now, we have favored the use python-build as the package name for the PyPA build","date":"2024-08-21T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Changes to the Feedstock Output Validation Procedure","permalink":"/news/2024/09/08/output-validation-changes"},"nextItem":{"title":"Removing wheel and setuptools as Dependencies for pip","permalink":"/news/2024/08/21/sunsetting-pip-deps"}},"content":"For nearly two years now, we have favored the use `python-build` as the package name for the PyPA [`build`](https://github.com/pypa/build)\\nproject over `build`. In fact, the `build` feedstock on `conda-forge` is archived and has not had its version\\nupdated. To complete this transition, we are going to mark all existing `build` packages as broken, provide\\na more detailed linter hint, and turn off the migration infrastructure we\'ve been using to help move feedstocks.\\nAny questions or comments can be directed to the [GitHub issue](https://github.com/conda-forge/conda-forge.github.io/issues/2269) on this work."},{"id":"/2024/08/21/sunsetting-pip-deps","metadata":{"permalink":"/news/2024/08/21/sunsetting-pip-deps","source":"@site/news/2024-08-21-sunsetting-pip-deps.md","title":"Removing wheel and setuptools as Dependencies for pip","description":"Starting with Python 3.13, pip will no longer have setuptools and wheel as dependencies","date":"2024-08-21T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Removing build in favor of python-build","permalink":"/news/2024/08/21/remove-build"},"nextItem":{"title":"Sunsetting PyPy support","permalink":"/news/2024/08/14/sunsetting-pypy"}},"content":"Starting with Python 3.13, `pip` will no longer have `setuptools` and `wheel` as dependencies\\nby default. While this default made sense at the time `conda-forge` was started (over 8 years ago!),\\nwith the advent of Python packaging build backends (e.g., `flit`, `poetry`, `hatchling`, etc.),\\nthis default is no longer correct. Instead, you will need to specify `wheel` and/or `setuptools` explicitly in the `host`\\nsection of your recipe if you need them. At first, `pip` for versions of Python before 3.13 will be unaffected.\\nHowever, after the completion of the Python 3.13 migration, we will remove these dependencies from `pip` for all\\nversions of Python. Follow GitHub issue [#2252](https://github.com/conda-forge/conda-forge.github.io/issues/2252)\\nfor more information and updates."},{"id":"/2024/08/14/sunsetting-pypy","metadata":{"permalink":"/news/2024/08/14/sunsetting-pypy","source":"@site/news/2024-08-14-sunsetting-pypy.md","title":"Sunsetting PyPy support","description":"TL;DR: We are planning to remove PyPy from conda-forge feedstock recipes in a","date":"2024-08-14T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Removing wheel and setuptools as Dependencies for pip","permalink":"/news/2024/08/21/sunsetting-pip-deps"},"nextItem":{"title":"Sunsetting Mambaforge","permalink":"/news/2024/07/29/sunsetting-mambaforge"}},"content":"TL;DR: We are planning to remove PyPy from conda-forge feedstock recipes in a\\nfew weeks (and thus to stop building new releases of packages for PyPy), unless\\nthere is substantial enough interest to justify the continued maintenance effort.\\n\\n\x3c!-- truncate --\x3e\\n\\nConda-forge introduced [support](https://conda-forge.org/blog/2020/03/10/pypy/)\\nfor [PyPy](https://pypy.org/index.html) as an alternative implementation of\\nPython about 4.5 years ago.\\n\\nIn that time we have worked hard together with developers from PyPy to provide\\neasily installable pre-compiled builds of the most common libraries also for PyPy.\\n\\nAs a very positive side-effect, the infrastructure of conda-forge is now fully\\nequipped to deal with alternative implementations of the Python interpreter,\\nwhich will continue to be useful (for example for supporting the experimental\\nfree-threading builds of CPython 3.13).\\n\\nHowever, due to a lack of resources \u2013 both in terms of expertise for PyPy, as\\nwell as available time of those who can help \u2013 the conda-forge builds for PyPy\\npackages have been in minimal maintenance for a while (for example, we never\\nmigrated for PyPy 3.10, nor did PyPy participate in the NumPy 2.0 migration).\\n\\nAs a consequence, we unfortunately need to announce that we are sunsetting\\nsupport for PyPy. This means we will stop the long-running migrator to add\\nPyPy to new feedstocks, and we will begin removing PyPy builds from feedstocks\\nat the latest on October 1st, or when we begin migrating for CPython 3.13\\n(whichever comes earlier).\\n\\nIf you are depending on PyPy builds in some way, please let us know about the\\nspecifics of your situation in the discussion issue for the\\n[RFC](https://github.com/conda-forge/conda-forge.github.io/issues/2255).\\n\\nThere is a possibility that we receive the necessary support from the PyPy\\ndevelopers, if it turns out that enough people depend on PyPy support in\\nconda-forge for it to be worth their time. As such, please speak up if you\\nfall into this category!\\n\\nFinally, no matter the outcome, we want to congratulate the PyPy developers\\nfor their important contributions and exploration of what is possible in the\\nPython ecosystem! \ud83d\udc4f\\n\\nIt has been a pleasure to collaborate!"},{"id":"/2024/07/29/sunsetting-mambaforge","metadata":{"permalink":"/news/2024/07/29/sunsetting-mambaforge","source":"@site/news/2024-07-29-sunsetting-mambaforge.md","title":"Sunsetting Mambaforge","description":"With the Miniforge 23.3.1 release,","date":"2024-07-29T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Sunsetting PyPy support","permalink":"/news/2024/08/14/sunsetting-pypy"},"nextItem":{"title":"NumPy 2 Migration","permalink":"/news/2024/05/15/numpy-2-migration"}},"content":"With the [Miniforge 23.3.1 release](https://github.com/conda-forge/miniforge/releases/tag/23.3.1-0),\\nthe Miniforge and Mambaforge installers became essentially **identical**. The only difference\\nbetween the two was their name and, subsequently, the default installation directory.\\n\\nMaintaining both installers adds unnecessary burden to our support infrastructure and creates\\nconfusion among end users. As a result, last year we decided to _discourage_ the usage of\\nMambaforge in favor of Miniforge.\\n\\nA year later, we would like to formally sunset Mambaforge. All users are encouraged to switch to\\nMiniforge. Remember they contain the same packages, so the only difference is the default\\ninstallation directory.\\n\\nThe deprecation process will roughly follow this calendar:\\n\\n- August 2024: The Mambaforge installers will warn about the deprecation and make the user wait 30\\n  seconds before continuing.\\n- October 2024: The Mambaforge installers will refuse to install during several pre-specified date ranges (i.e., [\\"brownouts\\"](<https://en.wikipedia.org/wiki/Brownout_(software_engineering)>)) in order to encourage users to switch to Miniforge. These dates are\\n  - Every two weeks in October 2024 (2024-10-01, 2024-10-15)\\n  - Every ten days in November 2024 (2024-11-01, 2024-11-10, 2024-11-20, 2024-11-30)\\n  - Every five days in December 2024 (2024-12-05, 2024-12-10, 2024-12-15, 2024-12-20, 2024-12-25, 2024-12-30, 2024-12-31)\\n- January 2025: The Mambaforge installers will stop being built and distributed."},{"id":"/2024/05/15/numpy-2-migration","metadata":{"permalink":"/news/2024/05/15/numpy-2-migration","source":"@site/news/2024-05-15-numpy-2-migration.md","title":"NumPy 2 Migration","description":"In preparation for the NumPy 2 release, we have begun a migration of all","date":"2024-05-15T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Sunsetting Mambaforge","permalink":"/news/2024/07/29/sunsetting-mambaforge"},"nextItem":{"title":"Azure macOS x64 runners will now default to macos-12","permalink":"/news/2024/05/02/bump-macos-12"}},"content":"In preparation for the NumPy 2 release, we have begun a migration of all\\nconda-forge packages that depend on `numpy` during the build (so in\\n`requirements/host`). The migration status is tracked\\n[on our status page](/status/migration/?name=numpy2).\\nParticular package\'s status can be found there. Specific recommendations for\\nmaintainers updating packages can be found in the migration PRs themselves.\\nPlease reach out through the usual channels if you have any questions."},{"id":"/2024/05/02/bump-macos-12","metadata":{"permalink":"/news/2024/05/02/bump-macos-12","source":"@site/news/2024-05-02-bump-macos-12.md","title":"Azure macOS x64 runners will now default to macos-12","description":"Azure Pipelines has deprecated the macos-11 images. As a result we have bumped the default Azure vmImage setting to macos-12.","date":"2024-05-02T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"NumPy 2 Migration","permalink":"/news/2024/05/15/numpy-2-migration"},"nextItem":{"title":"Clang now available as compiler for all platforms","permalink":"/news/2024/04/30/clang-everywhere"}},"content":"Azure Pipelines has deprecated the [`macos-11` images](https://github.com/actions/runner-images/blob/81eb448ee02647a9634bbba21d902b1424b31915/images/macos/macos-11-Readme.md). As a result we have [bumped](https://github.com/conda-forge/conda-smithy/releases/tag/v3.35.0) the default Azure `vmImage` setting to [`macos-12`](https://github.com/actions/runner-images/blob/c7efc0685d959677c603acf49604c13396d854a3/images/macos/macos-12-Readme.md).\\nYou can check [this issue](https://github.com/conda-forge/conda-forge.github.io/issues/2067) for more details."},{"id":"/2024/04/30/clang-everywhere","metadata":{"permalink":"/news/2024/04/30/clang-everywhere","source":"@site/news/2024-04-30-clang-everywhere.md","title":"Clang now available as compiler for all platforms","description":"Our compiler stack per platform generally uses the \\"default\\" compiler for that","date":"2024-04-30T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Azure macOS x64 runners will now default to macos-12","permalink":"/news/2024/05/02/bump-macos-12"},"nextItem":{"title":"The new conda-forge.org","permalink":"/news/2024/04/09/new-website"}},"content":"Our compiler stack per platform generally uses the \\"default\\" compiler for that\\nplatform, see e.g. [here](https://conda-forge.org/docs/maintainer/infrastructure/#compilers-and-runtimes).\\n\\nIn practice, this meant that\\n\\n```yaml\\nc_compiler:\\n  - gcc         # [linux]\\n  - clang       # [osx]\\n  - vs2019      # [win]\\ncxx_compiler:\\n  - gxx         # [linux]\\n  - clangxx     # [osx]\\n  - vs2019      # [win]\\n```\\n\\nwas the only possible choice for C/C++ compilers.\\n\\nRecently, we finished adding preliminary support `clang` / `clangxx` as\\nC/C++ compilers also on linux and windows, starting from clang 18.\\nThis is still very fresh, so bugs are possible, and we ask not to change\\nthe default compilers on feedstocks unless there are compelling reasons.\\n\\nIn any case, it is now possible to use the following configuration in\\n`recipe/conda_build_config.yaml` (note the lack of platform selectors):\\n\\n```yaml\\nc_compiler:\\n  - clang\\nc_compiler_version:\\n  - 18\\ncxx_compiler:\\n  - clangxx\\ncxx_compiler_version:\\n  - 18\\n```"},{"id":"/2024/04/09/new-website","metadata":{"permalink":"/news/2024/04/09/new-website","source":"@site/news/2024-04-09-new-website.md","title":"The new conda-forge.org","description":"As you might have noticed, for the last few months we have been changing different parts of the conda-forge.org website. Read more to learn more about what we changed, how it works and how to contribute.","date":"2024-04-09T00:00:00.000Z","tags":[],"hasTruncateMarker":true,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Clang now available as compiler for all platforms","permalink":"/news/2024/04/30/clang-everywhere"},"nextItem":{"title":"Upcoming migration for stdlib(\\"c\\")","permalink":"/news/2024/03/24/stdlib-migration"}},"content":"As you might have noticed, for the last few months we have been changing different parts of the conda-forge.org website. Read more to learn more about what we changed, how it works and how to contribute.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Old vs new\\n\\nThe [old conda-forge.org](https://github.com/conda-forge/conda-forge.github.io/tree/1d3214c295a46a249434de4fcf48c6b8d747a07f) documentation was written with [Sphinx](https://www.sphinx-doc.org). Some extra extensions were responsible for the other parts of the website; e.g. the [blog](https://github.com/conda-forge/blog), the [RSS feed](https://github.com/conda-forge/conda-forge.github.io/tree/1d3214c295a46a249434de4fcf48c6b8d747a07f/newsfeed), the [frontpage](https://github.com/conda-forge/conda-forge.github.io/blob/1d3214c295a46a249434de4fcf48c6b8d747a07f/index.html.tmpl), [feedstock outputs](https://github.com/conda-forge/conda-forge.github.io/blob/1d3214c295a46a249434de4fcf48c6b8d747a07f/feedstock_outputs.html.tmpl), or the [status page](https://github.com/conda-forge/status/tree/bde62db0bc9de460f533d60ca6218604c3e42fa5/site).\\n\\nThe new website has been rewritten using the [Docusaurus](https://docusaurus.io/) project. This allows us to have a single framework for all the sections of the site. There are some big differences if we compare the new site with the old one:\\n\\n- Sphinx was written in Python. Docusaurus uses the Node.js stack.\\n- Most of our docs were written in RST. Docusaurus handles Markdown and MDX (Markdown + JSX).\\n- Instead of generating static HTML from Jinja templates, we now prefer fetching the JSON payloads and render the relevant pages at build time (i.e. when we run `npm run build`) or at load time (when the user visits the website). This allows to have all the website rendering logic in the same repository with a unified theme, search engine and statistics.\\n\\n## What we have changed\\n\\n- The theme for the whole site is responsive, accessible, mobile friendly and supports dark/light modes. A style guide is available too.\\n- The Status dashboard fetches data dynamically and provides detailed views for each migration.\\n- The Packages section lists latest updates in addition to mapping packages to feedstocks.\\n- A new Download page displays links to the latest Miniforge installers.\\n- The documentation has been split in two top-level categories: Docs and Community.\\n- Algolia generously serves the backend for the search bar.\\n- Netlify will render previews on each opened PR for a smoother contribution process.\\n- The blog posts and the announcements feed are served natively by Docusaurus.\\n- We converted all the Sphinx-native ReStructuredText documents to Docusaurus-friendly Markdown.\\n- The conda-forge.yml docs are autogenerated from the conda-smithy schemas.\\n- ... and a bunch of smaller changes in the documentation. Refer to the [meta-issue](https://github.com/conda-forge/conda-forge.github.io/issues/1971) for more information!\\n\\n## New features you can use\\n\\n- Learn how to use and maintain packages from conda-forge in the [main documentation section](/docs).\\n- Read about how our community is set up in the [Community section](/community)\\n- The most recent changes to our infrastructure will be announced in [News](/news). You can also subscribe to the [RSS feed](pathname:///news/rss.xml) and browse the [archive](/news/archive/).\\n- Important information about the ecosystem is discussed in the [Blog](/blog). You can also subscribe to the [RSS feed](pathname:///blog/rss.xml) and browse the [archive](/blog/archive/). The posts are sometimes categorized with [tags](/blog/tags/) too.\\n- Use the search bar to locate any document in the website! It should be smart enough to remember the content you need more often. Use the <kbd>Cmd/Ctrl</kbd>+<kbd>K</kbd> shortcut for faster access.\\n- The [Status dashboard](/status) will inform you about the latest incidents and ongoing migrations. Each migration has now a permalink you can explore and share!\\n- The [Packages](/packages) section will help you find all the packages in conda-forge. If you don\'t type anything in the search bar, it will list the last 100 uploads to the Anaconda.org channel. The metadata link in each row will take you to the [`conda-metadata-app` dashboard](https://conda-metadata-app.streamlit.app/).\\n- Use the [Download page](/download) to get the latest Miniforge installers.\\n\\n## How to help and contribute\\n\\nWe have changed a lot of things, so there\'s a chance we missed something somewhere. If you have suggestions or errors to report, please let us know in the [website issue tracker](https://github.com/conda-forge/conda-forge.github.io/issues). Feel free to check the [documentation contribution guidelines](/docs/user/contributing/#improve-the-website) too.\\n\\n## Acknowledgements\\n\\nThis revamp was a months-long effort. The core team would like to take a moment to thank to all the contributors that made it possible (in alphabetical order): Afshin Darian, Asmit Malakannawar, Gabriela Vives, Isabela Presedo-Floyd, Klaus Zimmermann, Tania Allard."},{"id":"/2024/03/24/stdlib-migration","metadata":{"permalink":"/news/2024/03/24/stdlib-migration","source":"@site/news/2024-03-24-stdlib-migration.md","title":"Upcoming migration for stdlib(\\"c\\")","description":"Almost since the inception of conda-forge, the baseline version of our standard","date":"2024-03-24T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"The new conda-forge.org","permalink":"/news/2024/04/09/new-website"},"nextItem":{"title":"Dropping CUDA 11.2 on 2024 April 22","permalink":"/news/2024/03/06/dropping-cuda-112"}},"content":"Almost since the inception of conda-forge, the baseline version of our standard\\nlibrary (\\"stdlib\\") for C has not changed. This library comes with extra\\ncomplications because it is an essential part of the operating system, and one\\nof the few things that conda/mamba/etc. cannot ship safely.\\n\\nAs the ecosystem has moved on and many packages are starting to require newer\\nbaseline versions, we need to follow suit at some point. However, to avoid\\nbreaking users on older systems, we need to have infrastructure in place that\\nallows our packages to have sufficiently accurate metadata, such that conda can\\navoid the installation of a package requiring a newer stdlib on an old system.\\n\\nAfter many discussions across conda-forge stakeholders, the solution we arrived\\nat is the introduction of a new Jinja2-function `{{ stdlib(\\"c\\") }}`, which\\nreflects that a given recipe requires a C stdlib. Making this relationship\\nexplicit will make it easy to correctly reflect the requirement for newer\\nstdlib versions per feedstock, as well as in our global pinning.\\n\\nUp until now, the stdlib was handled implicitly as part of the compiler stack.\\nIn order to allow this transition to happen, we need to introduce this function\\nto essentially all compiled recipes. This will be done in stages, first for a\\nsingle migration, and then attached to _all_ ongoing migrations in conda-forge.\\n\\nThe logic of the piggyback migrator tries to correctly handle most scenarios,\\nbut it is impossible to cover all corner cases. As for some general rules that\\nall feedstock maintainers are free to apply independently:\\n\\n- if a feedstock uses a `- {{ compiler(...) }}` jinja in the build section,\\n  add a line with `- {{ stdlib(\\"c\\") }}` to the build environment.\\n- if a feedstock uses `- sysroot_linux-64 2.17  # [linux64]` (or a variation),\\n  remove this line and add the following to your `conda_build_config.yaml`:\\n  ```\\n  c_stdlib_version:              # [linux]\\n    - 2.17                       # [linux]\\n  ```\\n- if a feedstock sets `MACOSX_DEPLOYMENT_TARGET` in `conda_build_config.yaml`,\\n  for example to 10.13 for `x86_64`, replace that section with the following\\n  (note, this does _not_ apply to `MACOSX_SDK_VERSION`!):\\n  ```\\n  c_stdlib_version:              # [osx and x86_64]\\n    - 10.13                      # [osx and x86_64]\\n  ```\\n- In `meta.yaml`, you can then remove any variations of `- __glibc >=2.17` or\\n  `- __osx >={{ MACOSX_DEPLOYMENT_TARGET }}  # [osx and x86_64]`, as this will\\n  henceforth be handled through `- {{ stdlib(\\"c\\") }}`.\\n\\nFollowing the application of any of the above changes, the feedstock should be\\n[rerendered](https://conda-forge.org/docs/maintainer/updating_pkgs/#rerendering-feedstocks).\\n\\nAs these mechanisms begin rolling out, we will also update the maintainer\\ndocumentation in the conda-forge knowledge base. For more details, see this\\n[issue](https://github.com/conda-forge/conda-forge.github.io/issues/2102)."},{"id":"/2024/03/06/dropping-cuda-112","metadata":{"permalink":"/news/2024/03/06/dropping-cuda-112","source":"@site/news/2024-03-06-dropping-cuda-112.md","title":"Dropping CUDA 11.2 on 2024 April 22","description":"Conda-forge is dropping support for CUDA 11.2.","date":"2024-03-06T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Upcoming migration for stdlib(\\"c\\")","permalink":"/news/2024/03/24/stdlib-migration"},"nextItem":{"title":"Rust 1.75 requires setting newer MACOSX_DEPLOYMENT_TARGET","permalink":"/news/2024/01/29/rust-175-osx-sdk"}},"content":"Conda-forge is dropping support for CUDA 11.2.\\n\\nThe latest version of the CUDA 11 series is CUDA 11.8. At this point CUDA 11.8+\\nis well-supported in conda-forge. This is a result of running extensive\\nmigration efforts to upgrade conda-forge feedstocks to newer CUDA versions.\\n\\nCUDA 11.8 packages can be installed and run on the same hardware that CUDA 11.2\\nsupports. Also CUDA 11.8 packages have optimizations for newer hardware that\\nCUDA 11.2 packages do not. So there is a benefit to users to upgrade to CUDA\\n11.8.\\n\\nA very small number of feedstocks that appear unmaintained have not been\\nmigrated. Issues have been raised on those feedstock to make maintainers aware\\nof this deprecation plan. Until they are updated users can still install the\\nCUDA 11.2 packages they produced previously. These should continue to work.\\nHowever there will be no way to rebuild these packages without also updating to\\nCUDA 11.8.\\n\\nTo upgrade an older feedstock to CUDA 11.8, simply re-render. If the recipe has\\na `skip` or other logic that blocks this from happening, simply remove this\\nlogic and re-render to add CUDA 11.8.\\n\\nThe date has been sent to ensure 1 full work week for maintainers to do any\\nremaining updates to move to CUDA 11.8+. In 2024 May, [NVIDIA plans to delete\\nthe CUDA 11.2 Docker image](https://gitlab.com/nvidia/container-images/cuda/-/issues/209#note_1641845842)\\nthat conda-forge has been using to build for CUDA 11.2. So it will not be\\npossible for conda-forge to update the CUDA 11.2 Docker image, which will make\\nit much harder to maintain. Feedstock maintainers are encouraged to update\\nbefore then (if they have not already done so)."},{"id":"/2024/01/29/rust-175-osx-sdk","metadata":{"permalink":"/news/2024/01/29/rust-175-osx-sdk","source":"@site/news/2024-01-29-rust-175-osx-sdk.md","title":"Rust 1.75 requires setting newer MACOSX_DEPLOYMENT_TARGET","description":"With the release of rust 1.75, we now require setting the minimal","date":"2024-01-29T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Dropping CUDA 11.2 on 2024 April 22","permalink":"/news/2024/03/06/dropping-cuda-112"},"nextItem":{"title":"Python 3.12 migration and Python 3.11 by default","permalink":"/news/2023/09/25/python-312-migration-and-python-311-by-default"}},"content":"With the release of `rust 1.75`, we now require setting the minimal\\n`MACOSX_DEPLOYMENT_TARGET` to at least `10.12`. You can do this by appending\\n`recipe/conda_build_config.yaml` with the following content:\\n\\n```yaml\\nc_stdlib_version:       # [osx and x86]\\n  - \'10.12\'             # [osx and x86]\\n```\\n\\nand adding `{{ stdlib(\\"c\\") }}` as build dependency next to your compiler jinja:\\n\\n```yaml\\n  build:\\n    - {{ compiler(\\"rust\\") }}\\n    - {{ stdlib(\\"c\\") }}\\n```\\n\\nNote: This entry was update in April 2024 to reflect the new infrastructure for\\nsetting `MACOSX_DEPLOYMENT_TARGET`, see\\n[here](https://conda-forge.org/news/2024/03/24/stdlib-migration/)."},{"id":"/2023/09/25/python-312-migration-and-python-311-by-default","metadata":{"permalink":"/news/2023/09/25/python-312-migration-and-python-311-by-default","source":"@site/news/2023-09-25-python-312-migration-and-python-311-by-default.md","title":"Python 3.12 migration and Python 3.11 by default","description":"With the Python 3.12 release approaching, we have already started the","date":"2023-09-25T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Rust 1.75 requires setting newer MACOSX_DEPLOYMENT_TARGET","permalink":"/news/2024/01/29/rust-175-osx-sdk"},"nextItem":{"title":"Bumping Minimum MacOS version to 10.13","permalink":"/news/2023/08/24/bumping-minimum-macos-version-to-1013"}},"content":"With the Python 3.12 release approaching, we have already started the\\nrebuild of packages for it. Although, there is no offical Python 3.12\\nrelease yet, the release candidates of it will have the same ABI. Thus\\npackages built with the release candidate can be safely used with the\\nlater offical release. To support rebuilding packages on conda-forge\\nwhile ensuring Python release candidates don\'t end up in end-user\\nsolves, we have uploaded the Python 3.12.0rc2 and rc3 builds to the\\n`conda-forge/label/python_rc` channel. The `python312` migration adds\\nthis channel in the feedstock builds to the Python 3.12 matrix entry. On\\nthe offical release of Python 3.12, we will adjust the migration and\\nremove the channel again. Then (on a rerender), feedstock will only\\nconsume the main channel again.\\n\\nOverall, this approach allows us to provide Python 3.12 for a wide range\\nof packages already on the day of the offical Python 3.12 release.\\nAt the same time, we have stopped the Python 3.11 migration and added it\\nto the list of default Python versions on conda-forge."},{"id":"/2023/08/24/bumping-minimum-macos-version-to-1013","metadata":{"permalink":"/news/2023/08/24/bumping-minimum-macos-version-to-1013","source":"@site/news/2023-08-24-bumping-minimum-macos-version-to-1013.md","title":"Bumping Minimum MacOS version to 10.13","description":"We will bump the minimum MacOS version from 10.9 (released in Oct. 2013,","date":"2023-08-24T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Python 3.12 migration and Python 3.11 by default","permalink":"/news/2023/09/25/python-312-migration-and-python-311-by-default"},"nextItem":{"title":"End-of-life for CentOS 6","permalink":"/news/2023/07/12/end-of-life-for-centos-6"}},"content":"We will bump the minimum MacOS version from 10.9 (released in Oct. 2013,\\nend-of-life since Dec. 2016) to 10.13 (released Sept. 2017, end-of-life\\nsince Dec. 2020). The main reason we managed to support 10.9 this long\\nat all, is that conda-forge is able to ship an up-to-date C++ standard\\nlibrary for OSX, `libcxx`, superseding the old one present in the MacOS\\nSDK on the system (at least from the point-of-view of the respective\\nconda environments).\\n\\nHowever, several core packages in the ecosystem now require at least\\n10.13 (or will very soon), in a way that we cannot be circumvent. These\\npackages include `libcxx`,\\n[starting](https://discourse.llvm.org/t/libc-bumping-minimal-deployment-target-for-building-the-dylib-static-library-on-macos/68912)\\nwith version 17.0. This change will not affect already published\\nartifacts, but in the near future, all new builds for OSX will require\\nat least 10.13. This constraint will be implemented through the `__osx`\\nvirtual package, but the details of how we will achieve this are still\\nbeing worked out. Only `conda` versions 4.8.0 or newer have this virtual\\npackage. If you are using a system with MacOS older than 10.13 and are\\nusing `conda` older than 4.8.0, you will need to either upgrade `conda`\\nto at least 4.8.0 or upgrade your system to at least MacOS 10.13."},{"id":"/2023/07/12/end-of-life-for-centos-6","metadata":{"permalink":"/news/2023/07/12/end-of-life-for-centos-6","source":"@site/news/2023-07-12-end-of-life-for-centos-6.md","title":"End-of-life for CentOS 6","description":"As you may be aware, we have delayed the deprecation of our CentOS 6 build system the linux64","date":"2023-07-12T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Bumping Minimum MacOS version to 10.13","permalink":"/news/2023/08/24/bumping-minimum-macos-version-to-1013"},"nextItem":{"title":"conda-forge Google Group is Now Read-only - Move to Discourse","permalink":"/news/2023/01/09/conda-forge-google-group-is-now-read-only-move-to-discourse"}},"content":"As you may be aware, we have delayed the deprecation of our CentOS 6 build system the `linux64`\\nplatform several times. We have now set a formal deprecation date to be June 30, 2024. This date\\nmatches the [end of extended life-cycle support](https://access.redhat.com/articles/4038291) from\\nRedHat for RHEL 6. After this date, we build packages against CentOS 7 by default for `linux64`."},{"id":"/2023/01/09/conda-forge-google-group-is-now-read-only-move-to-discourse","metadata":{"permalink":"/news/2023/01/09/conda-forge-google-group-is-now-read-only-move-to-discourse","source":"@site/news/2023-01-09-conda-forge-google-group-is-now-read-only-move-to-discourse.md","title":"conda-forge Google Group is Now Read-only - Move to Discourse","description":"We have made the conda-forge Google Group read-only. Please use the new","date":"2023-01-09T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"End-of-life for CentOS 6","permalink":"/news/2023/07/12/end-of-life-for-centos-6"},"nextItem":{"title":"conda-forge/staged-recipes Feedstock Creation Job Moved","permalink":"/news/2023/01/08/conda-forge-staged-recipes-feedstock-creation-job-moved"}},"content":"We have made the conda-forge Google Group read-only. Please use the new\\nconda-forge [discourse\\nforum](https://conda.discourse.group/c/pkg-building/conda-forge/25), our\\n[Gitter room](https://gitter.im/conda-forge/conda-forge.github.io), or\\nit\'s [Matrix/Element\\ncounterpart](https://app.element.io/#/room/#conda-forge-space:matrix.org)\\ninstead."},{"id":"/2023/01/08/conda-forge-staged-recipes-feedstock-creation-job-moved","metadata":{"permalink":"/news/2023/01/08/conda-forge-staged-recipes-feedstock-creation-job-moved","source":"@site/news/2023-01-08-conda-forge-staged-recipes-feedstock-creation-job-moved.md","title":"conda-forge/staged-recipes Feedstock Creation Job Moved","description":"We have moved the CI job that makes new feedstocks to our","date":"2023-01-08T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"conda-forge Google Group is Now Read-only - Move to Discourse","permalink":"/news/2023/01/09/conda-forge-google-group-is-now-read-only-move-to-discourse"},"nextItem":{"title":"Moving to .conda Artifacts","permalink":"/news/2022/11/16/moving-to-conda-artifacts"}},"content":"We have moved the CI job that makes new feedstocks to our\\n[conda-forge/admin-requests](https://github.com/conda-forge/admin-requests)\\nrepo. The new location is reflected in the various links on repos and\\nour status page."},{"id":"/2022/11/16/moving-to-conda-artifacts","metadata":{"permalink":"/news/2022/11/16/moving-to-conda-artifacts","source":"@site/news/2022-11-16-moving-to-conda-artifacts.md","title":"Moving to .conda Artifacts","description":"conda-forge is moving to producing conda artifacts in the version 2","date":"2022-11-16T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"conda-forge/staged-recipes Feedstock Creation Job Moved","permalink":"/news/2023/01/08/conda-forge-staged-recipes-feedstock-creation-job-moved"},"nextItem":{"title":"Releasing Python 3.8.14, 3.9.14, and 3.10.7","permalink":"/news/2022/11/04/releasing-python-3814-3914-and-3107"}},"content":"conda-forge is moving to producing `conda` artifacts in the version 2\\npackage format (also known as `.conda`). These artifacts allow for more\\nefficient indexing and maintenance of the ecosystem. Our admin\\nmigrations bot will begin making PRs to feedstocks to change them over\\nto the new artifact format. You will need `conda` version 4.7 or later\\nto use the new `.conda` artifacts. Please leave a comment on [this\\nissue](https://github.com/conda-forge/conda-forge.github.io/issues/1586)\\nif you encounter problems or have feedback."},{"id":"/2022/11/04/releasing-python-3814-3914-and-3107","metadata":{"permalink":"/news/2022/11/04/releasing-python-3814-3914-and-3107","source":"@site/news/2022-11-04-releasing-python-3814-3914-and-3107.md","title":"Releasing Python 3.8.14, 3.9.14, and 3.10.7","description":"The CPython versions 3.8.14, 3.9.14, and 3.10.7 were released some weeks","date":"2022-11-04T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Moving to .conda Artifacts","permalink":"/news/2022/11/16/moving-to-conda-artifacts"},"nextItem":{"title":"Conda Moving to CalVer","permalink":"/news/2022/09/27/conda-moving-to-calver"}},"content":"The CPython versions 3.8.14, 3.9.14, and 3.10.7 were released some weeks\\nago to mitigate\\n[CVE-2020-10735](https://nvd.nist.gov/vuln/detail/CVE-2020-10735). The\\nchosen mitigation strategy might cause errors (e.g.\\n`ValueError: Exceeds the limit (4300) for integer string conversion`) in\\nsome libraries. If you are affected, please read the\\n[announcement](https://docs.python.org/release/3.10.7/whatsnew/3.10.html#notable-security-feature-in-3-10-7)\\nand learn about the available workarounds in the [CPython\\ndocumentation](https://docs.python.org/3/library/stdtypes.html#integer-string-conversion-length-limitation).\\n\\nThe conda-forge team [has\\ndecided](https://github.com/conda-forge/python-feedstock/pull/579) to\\nbuild and publish these releases with no additional changes. The new\\npackages will be made available on or after 2022-11-10, following\\n[Anaconda\'s decision](https://anaconda.cloud/anaconda-repo-news)."},{"id":"/2022/09/27/conda-moving-to-calver","metadata":{"permalink":"/news/2022/09/27/conda-moving-to-calver","source":"@site/news/2022-09-27-conda-moving-to-calver.md","title":"Conda Moving to CalVer","description":"Conda is moving to CalVer per [CEP","date":"2022-09-27T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Releasing Python 3.8.14, 3.9.14, and 3.10.7","permalink":"/news/2022/11/04/releasing-python-3814-3914-and-3107"},"nextItem":{"title":"Dropping Python 3.7","permalink":"/news/2022/08/24/dropping-python-37"}},"content":"Conda is moving to CalVer per [CEP\\n8](https://github.com/conda-incubator/ceps/blob/main/cep-0008.md). The\\nfirst CalVer and last SemVer should be `22.9.0` and `4.14.0`\\nrespectively. This change maintains version order so you should not\\nexpect any issues."},{"id":"/2022/08/24/dropping-python-37","metadata":{"permalink":"/news/2022/08/24/dropping-python-37","source":"@site/news/2022-08-24-dropping-python-37.md","title":"Dropping Python 3.7","description":"Conda-Forge has been providing support for Python 3.7 for 4 years now.","date":"2022-08-24T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Conda Moving to CalVer","permalink":"/news/2022/09/27/conda-moving-to-calver"},"nextItem":{"title":"Dropping PyPy 3.7","permalink":"/news/2022/08/17/dropping-pypy-37"}},"content":"Conda-Forge has been providing support for Python 3.7 for 4 years now.\\n\\nIncreasingly projects are moving off it (particularly in the PyData\\ncommunity). With Python 3.11\'s release coming around the corner (October\\n3rd), conda-forge plans to drop Python 3.7 support when Python 3.11\\ncomes out. This will lighten the load on conda-forge infrastructure and\\nmake room for the new versions the community would like to support.\\n\\nMore details can be found in issue\\n[conda-forge-pinning-feedstock#2623](https://github.com/conda-forge/conda-forge-pinning-feedstock/issues/2623). Feedback is welcome there."},{"id":"/2022/08/17/dropping-pypy-37","metadata":{"permalink":"/news/2022/08/17/dropping-pypy-37","source":"@site/news/2022-08-17-dropping-pypy-37.md","title":"Dropping PyPy 3.7","description":"Conda-forge has supported PyPy since almost 2.5 years now, and the","date":"2022-08-17T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Dropping Python 3.7","permalink":"/news/2022/08/24/dropping-python-37"},"nextItem":{"title":"Moving to Visual Studio toolchain vc142","permalink":"/news/2022/08/11/moving-to-visual-studio-toolchain-vc142"}},"content":"Conda-forge has supported PyPy since almost 2.5 years now, and the\\ninitial PyPy 3.7 builds have been superseded in almost all aspects by\\nthe newer builds for 3.8 & 3.9. We are therefore dropping PyPy 3.7 as a\\nsupported python version, and will keep focusing on the more\\ncontemporary PyPy builds."},{"id":"/2022/08/11/moving-to-visual-studio-toolchain-vc142","metadata":{"permalink":"/news/2022/08/11/moving-to-visual-studio-toolchain-vc142","source":"@site/news/2022-08-11-moving-to-visual-studio-toolchain-vc142.md","title":"Moving to Visual Studio toolchain vc142","description":"Microsoft has deprecated the Visual Studio (VS) 2017 compiler and","date":"2022-08-11T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Dropping PyPy 3.7","permalink":"/news/2022/08/17/dropping-pypy-37"},"nextItem":{"title":"Azure OSX VM Image Bumped to Version 11","permalink":"/news/2022/07/22/azure-osx-vm-image-bumped-to-version-11"}},"content":"Microsoft has deprecated the Visual Studio (VS) 2017 compiler and\\nremoved it from all the CI they control (notably Azure Pipelines &\\nGithub Actions). This means that the default toolchain (== C/C++\\ncompiler, linker, standard libraries, and related utilities) of that VS\\nversion - vc141 - is getting less and less use in upstream libraries\\n(because public hosted CI doesn\'t use it anymore by default), and\\ntherefore support for it is bitrotting at an accelerating pace. We are\\ntherefore\\n[planning](https://github.com/conda-forge/conda-forge-pinning-feedstock/pull/3167)\\nto move our toolchain on windows to vc142 (the default in VS2019) in two\\nweeks, on 2022-08-25.\\n\\nThis will not affect you as a general user of conda-forge packages on\\nwindows; the only impact is that if you are locally compiling against\\nartefacts produced by conda-forge and are still using VS2017 yourself,\\nyou will need to upgrade your compiler (VS2019 is a drop-in replacement\\n& ABI-compatible)."},{"id":"/2022/07/22/azure-osx-vm-image-bumped-to-version-11","metadata":{"permalink":"/news/2022/07/22/azure-osx-vm-image-bumped-to-version-11","source":"@site/news/2022-07-22-azure-osx-vm-image-bumped-to-version-11.md","title":"Azure OSX VM Image Bumped to Version 11","description":"Azure is removing their OSX 10.15 VM image and so we are bumping to 11.","date":"2022-07-22T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Moving to Visual Studio toolchain vc142","permalink":"/news/2022/08/11/moving-to-visual-studio-toolchain-vc142"},"nextItem":{"title":"Packages for Qt/PyQt 5.15.2 are now available","permalink":"/news/2022/04/23/packages-for-qtpyqt-5152-are-now-available"}},"content":"Azure is removing their OSX 10.15 VM image and so we are bumping to 11.\\nYou will need to rerender your feedstock to get this change. Feedstocks\\nwithout the new VM image specified will not build after Azure fully\\nremoves the old image. Please get in touch with us if you have issues or\\nquestions!"},{"id":"/2022/04/23/packages-for-qtpyqt-5152-are-now-available","metadata":{"permalink":"/news/2022/04/23/packages-for-qtpyqt-5152-are-now-available","source":"@site/news/2022-04-23-packages-for-qtpyqt-5152-are-now-available.md","title":"Packages for Qt/PyQt 5.15.2 are now available","description":"After more than six months, the conda-forge team and contributors have","date":"2022-04-23T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Azure OSX VM Image Bumped to Version 11","permalink":"/news/2022/07/22/azure-osx-vm-image-bumped-to-version-11"},"nextItem":{"title":"New Semi-automated PR Labeling in conda-forge/staged-recipes","permalink":"/news/2022/04/20/new-semi-automated-pr-labeling-in-conda-forgestaged-recipes"}},"content":"After more than six months, the conda-forge team and contributors have\\nmanaged to update the Qt5 packages to the latest LTS version, 5.15.2.\\nMajor changes include separating the package for QtWebEngine\\n(`qt-webengine`) from the rest of Qt (now in a new package called\\n`qt-main`). This allows recipes that do not use any of the WebEngine\\ncomponents to depend only on `qt-main`, reducing the total size of the\\ndownloaded binaries. As a result of this, `qt` will be a metapackage\\nthat installs both `qt-main` and `qt-webengine` as dependencies.\\nWith respect to PyQt, the new packages now are in sync with respect to\\ntheir corresponding PyPI releases, which means that the `pyqt` package\\nwill only provide the core components of Qt, leaving `pyqtwebengine` and\\n`pyqtcharts` as optional packages that extend PyQt by providing the\\nQtWebEngine and QtCharts components, respectively. A migrator will be\\nput in place to help with the transition."},{"id":"/2022/04/20/new-semi-automated-pr-labeling-in-conda-forgestaged-recipes","metadata":{"permalink":"/news/2022/04/20/new-semi-automated-pr-labeling-in-conda-forgestaged-recipes","source":"@site/news/2022-04-20-new-semi-automated-pr-labeling-in-conda-forgestaged-recipes.md","title":"New Semi-automated PR Labeling in conda-forge/staged-recipes","description":"A GitHub action now monitors comments on issues in staged-recipes and","date":"2022-04-20T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Packages for Qt/PyQt 5.15.2 are now available","permalink":"/news/2022/04/23/packages-for-qtpyqt-5152-are-now-available"},"nextItem":{"title":"CircleCI and Drone.io Deprecated for New Feedstocks","permalink":"/news/2022/04/03/circleci-and-droneio-deprecated-for-new-feedstocks"}},"content":"A GitHub action now monitors comments on issues in staged-recipes and\\nwill add language and review labels to issues/PRs when a staged-recipes\\nsub-team is mentioned in a comment. It adds the Awaiting author\\ncontribution label if a member of staged-recipes removes the\\nreview-requested label. Unlike notifications, which are only sent to the\\nusers which are members of a team at the time of the mention, labels are\\npersistent and visible to everyone, so they should be very helpful for\\nidentifying old PRs that need attention."},{"id":"/2022/04/03/circleci-and-droneio-deprecated-for-new-feedstocks","metadata":{"permalink":"/news/2022/04/03/circleci-and-droneio-deprecated-for-new-feedstocks","source":"@site/news/2022-04-03-circleci-and-droneio-deprecated-for-new-feedstocks.md","title":"CircleCI and Drone.io Deprecated for New Feedstocks","description":"Due to technical issues in generating new feedstocks, we have deprecated","date":"2022-04-03T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"New Semi-automated PR Labeling in conda-forge/staged-recipes","permalink":"/news/2022/04/20/new-semi-automated-pr-labeling-in-conda-forgestaged-recipes"},"nextItem":{"title":"PyPy 3.8+3.9 Migration","permalink":"/news/2022/03/28/pypy-38-39-migration"}},"content":"Due to technical issues in generating new feedstocks, we have deprecated\\nusing CircleCI and Drone.io for builds of new feedstocks. Existing\\nCircleCI builds, if any, should be moved to azure. Existing Drone.io\\nbuilds can be moved to Travis CI or cross-compiled/emulated builds on\\nazure."},{"id":"/2022/03/28/pypy-38-39-migration","metadata":{"permalink":"/news/2022/03/28/pypy-38-39-migration","source":"@site/news/2022-03-28-pypy-38-39-migration.md","title":"PyPy 3.8+3.9 Migration","description":"We have begun rolling out packages built for PyPy3.8 and PyPy3.9. This","date":"2022-03-28T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"CircleCI and Drone.io Deprecated for New Feedstocks","permalink":"/news/2022/04/03/circleci-and-droneio-deprecated-for-new-feedstocks"},"nextItem":{"title":"Travis CI Usage Deprecated for win_*, osx_*, and linux_64 Platforms","permalink":"/news/2022/03/06/travis-ci-usage-deprecated-for-win-osx-and-linux64-platforms"}},"content":"We have begun rolling out packages built for PyPy3.8 and PyPy3.9. This\\nwork may take a few weeks. See `pypy` in the user docs for information\\non how to set up a PyPy environment. Please report issues to the PyPy\\ndevelopers at https://foss.heptapod.net/pypy/pypy. We are also\\ndropping PyPy3.7 in each feedstock as the newer versions of PyPy are\\nadded. New versions of migrated feedstocks will not be built for PyPy3.7\\nand that version of the python interpreter will not be receiving\\nupdates. As usual, you can track the status of the migration on our\\nstatus page."},{"id":"/2022/03/06/travis-ci-usage-deprecated-for-win-osx-and-linux64-platforms","metadata":{"permalink":"/news/2022/03/06/travis-ci-usage-deprecated-for-win-osx-and-linux64-platforms","source":"@site/news/2022-03-06-travis-ci-usage-deprecated-for-win-osx-and-linux64-platforms.md","title":"Travis CI Usage Deprecated for win_*, osx_*, and linux_64 Platforms","description":"Due to changes in how Travis CI tracks open-source build time, we are","date":"2022-03-06T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"PyPy 3.8+3.9 Migration","permalink":"/news/2022/03/28/pypy-38-39-migration"},"nextItem":{"title":"Default branch migration from master to main","permalink":"/news/2022/02/13/default-branch-migration-from-master-to-main"}},"content":"Due to changes in how Travis CI tracks open-source build time, we are\\ndeprecating using it for the `win_*`, `osx_*`, and `linux_64` platforms.\\n\\nTravis CI will be available only for platforms in their [partner\\nqueues](https://docs.travis-ci.com/user/billing-overview/#partner-queue-solution).\\nThese platforms currently include `ppc64le`, `aarch64` and `s390x`.\\n\\nRerendering will raise an error if Travis CI is used for a non-partner\\nqueue platform in the conda-forge GitHub organization."},{"id":"/2022/02/13/default-branch-migration-from-master-to-main","metadata":{"permalink":"/news/2022/02/13/default-branch-migration-from-master-to-main","source":"@site/news/2022-02-13-default-branch-migration-from-master-to-main.md","title":"Default branch migration from master to main","description":"We will be migrating the default branches of all feedstocks and other","date":"2022-02-13T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Travis CI Usage Deprecated for win_*, osx_*, and linux_64 Platforms","permalink":"/news/2022/03/06/travis-ci-usage-deprecated-for-win-osx-and-linux64-platforms"},"nextItem":{"title":"CentOS 7 docker images are now the default","permalink":"/news/2021/12/02/centos-7-docker-images-are-now-the-default"}},"content":"We will be migrating the default branches of all feedstocks and other\\nconda-forge repos from `master` to `main`. We do expect some minor\\nhiccups while this migration is going on. You will need to change to the\\n`main` branch from `master` on any local clones via the following git\\ncommands:\\n\\n```\\ngit branch -m master main\\ngit fetch origin\\ngit branch -u origin/main main\\ngit remote set-head origin -a\\n```\\n\\nIf you encounter any problems, please comment on this Github\\n[issue](https://github.com/conda-forge/conda-forge.github.io/issues/1162)."},{"id":"/2021/12/02/centos-7-docker-images-are-now-the-default","metadata":{"permalink":"/news/2021/12/02/centos-7-docker-images-are-now-the-default","source":"@site/news/2021-12-02-centos-7-docker-images-are-now-the-default.md","title":"CentOS 7 docker images are now the default","description":"We are moving all conda-forge linux-64 jobs to use CentOS 7-based","date":"2021-12-02T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Default branch migration from master to main","permalink":"/news/2022/02/13/default-branch-migration-from-master-to-main"},"nextItem":{"title":"cloud.drone.io no longer working","permalink":"/news/2021/11/17/clouddroneio-no-longer-working"}},"content":"We are moving all conda-forge `linux-64` jobs to use CentOS 7-based\\ndocker images. This will help users avoid `conda/mamba` solver errors\\nwhere dependencies that need CentOS 7 cannot be installed. Importantly,\\nour compiler stack will still default to using a CentOS 6 sysroot unless\\nthe recipe explicitly lists the CentoOS 7 sysroot package. This build\\nconfiguration means that our core system ABI on linux will remain\\nlargely CentOS 6-compatible, keeping support for older systems largely\\nintact. We will reconsider moving the default ABI to CentOS 7 at a later\\ndate."},{"id":"/2021/11/17/clouddroneio-no-longer-working","metadata":{"permalink":"/news/2021/11/17/clouddroneio-no-longer-working","source":"@site/news/2021-11-17-clouddroneio-no-longer-working.md","title":"cloud.drone.io no longer working","description":"The cloud.drone.io service we use for aarch64 builds is no longer","date":"2021-11-17T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"CentOS 7 docker images are now the default","permalink":"/news/2021/12/02/centos-7-docker-images-are-now-the-default"},"nextItem":{"title":"conda-forge now uses mambabuild as default","permalink":"/news/2021/10/20/conda-forge-now-uses-mambabuild-as-default"}},"content":"The `cloud.drone.io` service we use for `aarch64` builds is no longer\\naccepting our API requests for triggering builds. We have been in\\ncontact with them, but have been unable to resolve the issue. Going\\nforward, we will still be adding feedstocks to `cloud.drone.io` but we\\nhave moved all `aarch64` builds to emulated builds on `Azure`.\\nCross-compilers are available as well for resource-intensive builds.\\nPlease rerender your feedstock as needed to get the updated\\nconfiguration."},{"id":"/2021/10/20/conda-forge-now-uses-mambabuild-as-default","metadata":{"permalink":"/news/2021/10/20/conda-forge-now-uses-mambabuild-as-default","source":"@site/news/2021-10-20-conda-forge-now-uses-mambabuild-as-default.md","title":"conda-forge now uses mambabuild as default","description":"conda-forge now uses mamba during","date":"2021-10-20T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"cloud.drone.io no longer working","permalink":"/news/2021/11/17/clouddroneio-no-longer-working"},"nextItem":{"title":"GCC 10 and clang 12 as default compilers for Linux and macOS","permalink":"/news/2021/10/13/gcc-10-and-clang-12-as-default-compilers-for-linux-and-macos"}},"content":"conda-forge now uses [mamba](https://github.com/mamba-org/mamba) during\\nthe build process (via `conda mambabuild` of the\\n[boa](https://github.com/mamba-org/boa) project). This was changed in\\n[conda-smithy\\n3.13.0](https://github.com/conda-forge/conda-smithy/blob/main/CHANGELOG.rst#v3130)\\nand should automatically apply when re-rendering."},{"id":"/2021/10/13/gcc-10-and-clang-12-as-default-compilers-for-linux-and-macos","metadata":{"permalink":"/news/2021/10/13/gcc-10-and-clang-12-as-default-compilers-for-linux-and-macos","source":"@site/news/2021-10-13-gcc-10-and-clang-12-as-default-compilers-for-linux-and-macos.md","title":"GCC 10 and clang 12 as default compilers for Linux and macOS","description":"These compilers will become the default for building packages in","date":"2021-10-13T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"conda-forge now uses mambabuild as default","permalink":"/news/2021/10/20/conda-forge-now-uses-mambabuild-as-default"},"nextItem":{"title":"Python 3.6 is now dropped when building conda-forge packages","permalink":"/news/2021/10/04/python-36-is-now-dropped-when-building-conda-forge-packages"}},"content":"These compilers will become the default for building packages in\\nconda-forge. One notable change in gcc 10 is that the `-fopenmp`` flag in\\n`FFLAGS`is dropped. In clang 12,`-std=c++14`explicit flag has been\\ndropped from`CXXFLAGS`, as it is the default compilation mode for clang\\n12. In gcc 11, the default is `-std=gnu++17`. In clang>=12 and gcc>=11,\\nwe will not provide an explicit C++ standard, and will defer to the\\ncompiler default."},{"id":"/2021/10/04/python-36-is-now-dropped-when-building-conda-forge-packages","metadata":{"permalink":"/news/2021/10/04/python-36-is-now-dropped-when-building-conda-forge-packages","source":"@site/news/2021-10-04-python-36-is-now-dropped-when-building-conda-forge-packages.md","title":"Python 3.6 is now dropped when building conda-forge packages","description":"Python 3.6 is end-of-life in December 2021 and we are dropping support","date":"2021-10-04T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"GCC 10 and clang 12 as default compilers for Linux and macOS","permalink":"/news/2021/10/13/gcc-10-and-clang-12-as-default-compilers-for-linux-and-macos"},"nextItem":{"title":"defaults channel is now dropped when building conda-forge packages","permalink":"/news/2021/09/30/defaults-channel-is-now-dropped-when-building-conda-forge-packages"}},"content":"Python 3.6 is end-of-life in December 2021 and we are dropping support\\nfor it early to avoid having to rebuild packages as part of python 3.10\\nmigration as that would save lots of CI resources."},{"id":"/2021/09/30/defaults-channel-is-now-dropped-when-building-conda-forge-packages","metadata":{"permalink":"/news/2021/09/30/defaults-channel-is-now-dropped-when-building-conda-forge-packages","source":"@site/news/2021-09-30-defaults-channel-is-now-dropped-when-building-conda-forge-packages.md","title":"defaults channel is now dropped when building conda-forge packages","description":"You can get the previous behaviour by using the channel_sources","date":"2021-09-30T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Python 3.6 is now dropped when building conda-forge packages","permalink":"/news/2021/10/04/python-36-is-now-dropped-when-building-conda-forge-packages"},"nextItem":{"title":"conda-forge is now citable!","permalink":"/news/2021/05/22/conda-forge-is-now-citable"}},"content":"You can get the previous behaviour by using the `channel_sources`\\nsetting in `conda-forge.yml`"},{"id":"/2021/05/22/conda-forge-is-now-citable","metadata":{"permalink":"/news/2021/05/22/conda-forge-is-now-citable","source":"@site/news/2021-05-22-conda-forge-is-now-citable.md","title":"conda-forge is now citable!","description":"You can now cite conda-forge using our [Zenodo","date":"2021-05-22T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"defaults channel is now dropped when building conda-forge packages","permalink":"/news/2021/09/30/defaults-channel-is-now-dropped-when-building-conda-forge-packages"},"nextItem":{"title":"Moving to CentOS 7 and CentOS 6 End-of-Life","permalink":"/news/2020/12/16/moving-to-centos-7-and-centos-6-end-of-life"}},"content":"You can now cite conda-forge using our [Zenodo\\nentry](https://doi.org/10.5281/zenodo.4774216)! This entry credits the\\nentire conda-forge community for its hard work in building our amazing\\necosystem."},{"id":"/2020/12/16/moving-to-centos-7-and-centos-6-end-of-life","metadata":{"permalink":"/news/2020/12/16/moving-to-centos-7-and-centos-6-end-of-life","source":"@site/news/2020-12-16-moving-to-centos-7-and-centos-6-end-of-life.md","title":"Moving to CentOS 7 and CentOS 6 End-of-Life","description":"conda-forge\'s compiler stack uses repackaged libraries from CentOS 6 to","date":"2020-12-16T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"conda-forge is now citable!","permalink":"/news/2021/05/22/conda-forge-is-now-citable"},"nextItem":{"title":"Artifact Validation","permalink":"/news/2020/12/02/artifact-validation"}},"content":"conda-forge\'s compiler stack uses repackaged libraries from CentOS 6 to\\nsupply certain libraries, notably `glibc` when building recipes. We\\ncurrently default to using CentOS 6 with the `glibc` 2.12 ABI. However,\\nCentOS 6 reached end-of-life in November 2020 and increasingly software\\npackages require at least CentOS 7 with the `glibc` 2.17 ABI. We also\\nrealize that due to recent events, some communities that may have been\\nplanning to skip CentOS 7 and move straight to CentOS 8 might be\\nreconsidering those plans. Further, they may not be ready for a\\nfull-scale switch to CentOS 7. Thus the conda-forge core team has\\ndecided to delay moving to CentOS 7 until sometime early next year,\\nlikely the end of January 2021 at the earliest. We are actively looking\\nfor feedback from our users on this issue. Please do\\nget in touch if you have comments or concerns!"},{"id":"/2020/12/02/artifact-validation","metadata":{"permalink":"/news/2020/12/02/artifact-validation","source":"@site/news/2020-12-02-artifact-validation.md","title":"Artifact Validation","description":"In an effort to better secure conda-forge, we are developing a process","date":"2020-12-02T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Moving to CentOS 7 and CentOS 6 End-of-Life","permalink":"/news/2020/12/16/moving-to-centos-7-and-centos-6-end-of-life"},"nextItem":{"title":"Compiler Upgrade to GCC 9.3.0","permalink":"/news/2020/10/08/compiler-upgrade-to-gcc-930"}},"content":"In an effort to better secure conda-forge, we are developing a process\\nto validate artifacts before they are uploaded to `anaconda.org`. This\\nvalidation will look for various security-related items, such as\\nartifacts that overwrite key pieces of certain packages. While this\\nprocess is in development, we will not be rejecting uploads. However, we\\nwill start scanning our current artifacts and working with the\\nmaintainers of those artifacts to mark broken any which we deem a\\nsecurity risk. We will also be running validation on new artifacts being\\nupload and will report any issues back to feedstocks. At a future date,\\nartifacts that do not pass validation will not be uploaded."},{"id":"/2020/10/08/compiler-upgrade-to-gcc-930","metadata":{"permalink":"/news/2020/10/08/compiler-upgrade-to-gcc-930","source":"@site/news/2020-10-08-compiler-upgrade-to-gcc-930.md","title":"Compiler Upgrade to GCC 9.3.0","description":"We will be upgrading all GCC-based compilers to version 9.3.0 on all","date":"2020-10-08T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Artifact Validation","permalink":"/news/2020/12/02/artifact-validation"},"nextItem":{"title":"Completed New Staging Process for anaconda.org Uploads","permalink":"/news/2020/08/07/completed-new-staging-process-for-anacondaorg-uploads"}},"content":"We will be upgrading all `GCC`-based compilers to version `9.3.0` on all\\nplatforms. This upgrade will not affect `C` or `C++` code, but will\\nrequire a rebuild of all feedstocks that use `FORTRAN` due to a change\\nin the `SONAME`. During this rebuild, we will keep the old compiler\\nversions in production, temporarily doubling the build matrix. Once the\\nmigration is deemed complete, these old compiler versions will be\\nremoved."},{"id":"/2020/08/07/completed-new-staging-process-for-anacondaorg-uploads","metadata":{"permalink":"/news/2020/08/07/completed-new-staging-process-for-anacondaorg-uploads","source":"@site/news/2020-08-07-completed-new-staging-process-for-anacondaorg-uploads.md","title":"Completed New Staging Process for anaconda.org Uploads","description":"We have now completed rolling out the new staging process for uploads to","date":"2020-08-07T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Compiler Upgrade to GCC 9.3.0","permalink":"/news/2020/10/08/compiler-upgrade-to-gcc-930"},"nextItem":{"title":"Fixed Maintenance Process for Feedstock Teams","permalink":"/news/2020/08/06/fixed-maintenance-process-for-feedstock-teams"}},"content":"We have now completed rolling out the new staging process for uploads to\\nanaconda.org. Direct uploads to the `conda-forge` channel will no longer\\nwork. If you are having trouble with package uploads, please rerender\\nyour feedstock with the latest version of `conda-smithy`. As always, if\\nyou need help, bump us on Gitter or GitHub!"},{"id":"/2020/08/06/fixed-maintenance-process-for-feedstock-teams","metadata":{"permalink":"/news/2020/08/06/fixed-maintenance-process-for-feedstock-teams","source":"@site/news/2020-08-06-fixed-maintenance-process-for-feedstock-teams.md","title":"Fixed Maintenance Process for Feedstock Teams","description":"We have fixed a bug where the maintainers of feedstocks listed in the","date":"2020-08-06T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Completed New Staging Process for anaconda.org Uploads","permalink":"/news/2020/08/07/completed-new-staging-process-for-anacondaorg-uploads"},"nextItem":{"title":"CentOS 7 sysroot Now Available for linux-64 Builds","permalink":"/news/2020/07/23/centos-7-sysroot-now-available-for-linux-64-builds"}},"content":"We have fixed a bug where the maintainers of feedstocks listed in the\\n`meta.yaml` did not match those listed in the GitHub team. Due to this\\nchange, you may notice emails from GitHub informing you that you have\\nbeen removed from a GitHub team if you have recently removed yourself\\nfrom a feedstock via changing the `meta.yaml`. A similar fix has been\\napplied for maintenance teams as well, though you will not see emails\\nfrom this fix."},{"id":"/2020/07/23/centos-7-sysroot-now-available-for-linux-64-builds","metadata":{"permalink":"/news/2020/07/23/centos-7-sysroot-now-available-for-linux-64-builds","source":"@site/news/2020-07-23-centos-7-sysroot-now-available-for-linux-64-builds.md","title":"CentOS 7 sysroot Now Available for linux-64 Builds","description":"We are very excited to announce that new compilers based on repackaged","date":"2020-07-23T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Fixed Maintenance Process for Feedstock Teams","permalink":"/news/2020/08/06/fixed-maintenance-process-for-feedstock-teams"},"nextItem":{"title":"NumPy 1.16 is the minimal NumPy version on all platforms","permalink":"/news/2020/07/23/numpy-116-is-the-minimal-numpy-version-on-all-platforms"}},"content":"We are very excited to announce that new compilers based on repackaged\\n`sysroot`\'s from CentOS 7 are now available for all `linux-*` platforms.\\nThese compilers will be the default going forward for any `gcc`, `gxx`,\\nand `gfortran` versions past `8.4.0` on `ppc64le` and `7.5.0` on\\n`x86_64`/`aarch64`.\\n\\nOn the `linux-64` platform, we have also built the CentOS 6 `sysroot`\\nand set it as the default, consistent with our current compilers. To use\\nthe CentOS 7 `sysroot` on `linux-64`, add a requirement of\\n`sysroot_linux-64 2.17` to the build section of your recipe. You also\\nneed to set the proper Docker image in your `conda_build_config.yaml`.\\nSee `Using CentOS 7 <centos7>` for details."},{"id":"/2020/07/23/numpy-116-is-the-minimal-numpy-version-on-all-platforms","metadata":{"permalink":"/news/2020/07/23/numpy-116-is-the-minimal-numpy-version-on-all-platforms","source":"@site/news/2020-07-23-numpy-116-is-the-minimal-numpy-version-on-all-platforms.md","title":"NumPy 1.16 is the minimal NumPy version on all platforms","description":"In accordance with","date":"2020-07-23T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"CentOS 7 sysroot Now Available for linux-64 Builds","permalink":"/news/2020/07/23/centos-7-sysroot-now-available-for-linux-64-builds"},"nextItem":{"title":"Strict channel priority in builds for OSX and Linux","permalink":"/news/2020/07/23/strict-channel-priority-in-builds-for-osx-and-linux"}},"content":"In accordance with\\n[NEP-29](https://numpy.org/neps/nep-0029-deprecation_policy.html), we\\nhave switched to have `numpy 1.16` as the minimum supported version on\\nall platforms."},{"id":"/2020/07/23/strict-channel-priority-in-builds-for-osx-and-linux","metadata":{"permalink":"/news/2020/07/23/strict-channel-priority-in-builds-for-osx-and-linux","source":"@site/news/2020-07-23-strict-channel-priority-in-builds-for-osx-and-linux.md","title":"Strict channel priority in builds for OSX and Linux","description":"We have changed the OSX and Linux platforms to enforce strict channel","date":"2020-07-23T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"NumPy 1.16 is the minimal NumPy version on all platforms","permalink":"/news/2020/07/23/numpy-116-is-the-minimal-numpy-version-on-all-platforms"},"nextItem":{"title":"Conda-forge is building openblas with both pthreads and openmp on Linux","permalink":"/news/2020/07/17/conda-forge-is-building-openblas-with-both-pthreads-and-openmp-on-linux"}},"content":"We have changed the OSX and Linux platforms to enforce strict channel\\npriority in package builds. This change means that if a package is\\navailable in the conda-forge channels, the `conda` solver will not\\nconsider any versions of the package from other channels. Users can\\ndisable this by setting `channel_priority: flexible` in their\\n`conda-forge.yml`."},{"id":"/2020/07/17/conda-forge-is-building-openblas-with-both-pthreads-and-openmp-on-linux","metadata":{"permalink":"/news/2020/07/17/conda-forge-is-building-openblas-with-both-pthreads-and-openmp-on-linux","source":"@site/news/2020-07-17-conda-forge-is-building-openblas-with-both-pthreads-and-openmp-on-linux.md","title":"Conda-forge is building openblas with both pthreads and openmp on Linux","description":"The main change is that openblas will use pthreads for threading by","date":"2020-07-17T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Strict channel priority in builds for OSX and Linux","permalink":"/news/2020/07/23/strict-channel-priority-in-builds-for-osx-and-linux"},"nextItem":{"title":"Core Dependency Tree Package Changes","permalink":"/news/2020/07/16/core-dependency-tree-package-changes"}},"content":"The main change is that `openblas` will use pthreads for threading by\\ndefault on Linux instead of the previous `openmp` default. The `openmp`\\nbuilds can be recovered by installing `libopenblas=*=*openmp*`."},{"id":"/2020/07/16/core-dependency-tree-package-changes","metadata":{"permalink":"/news/2020/07/16/core-dependency-tree-package-changes","source":"@site/news/2020-07-16-core-dependency-tree-package-changes.md","title":"Core Dependency Tree Package Changes","description":"conda-forge is moving to a new system for generating Core Dependency","date":"2020-07-16T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Conda-forge is building openblas with both pthreads and openmp on Linux","permalink":"/news/2020/07/17/conda-forge-is-building-openblas-with-both-pthreads-and-openmp-on-linux"},"nextItem":{"title":"Moving from clang 9 to clang 10","permalink":"/news/2020/07/16/moving-from-clang-9-to-clang-10"}},"content":"conda-forge is moving to a new system for generating Core Dependency\\nTree (CDT) packages. These changes include:\\n\\n- CDT packages will no longer be built using feedstocks and this\\n  practice is officially deprecated.\\n- Any current CDT packages in\\n  feedstocks will be moved to the new\\n  [conda-forge/cdt-builds](https://github.com/conda-forge/cdt-builds) repo\\n  and the feedstock will be archived. Members of core will be doing this\\n  slowly on an as-needed basis, so it may not happen right away.\\n- Requests for new CDTs should be submitted as PRs to the\\n  [conda-forge/cdt-builds](https://github.com/conda-forge/cdt-builds)\\n  repo.\\n\\nThese changes are being made so that conda-forge can provide access to\\nCentOS 7 / glibc 2.17 for `linux-64` builds. They will also move more of\\nthe packages needed for conda-forge builds into the conda-forge channels\\nmaking builds more reliable."},{"id":"/2020/07/16/moving-from-clang-9-to-clang-10","metadata":{"permalink":"/news/2020/07/16/moving-from-clang-9-to-clang-10","source":"@site/news/2020-07-16-moving-from-clang-9-to-clang-10.md","title":"Moving from clang 9 to clang 10","description":"conda-forge is moving to clang 10 on macOS! Check the release","date":"2020-07-16T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Core Dependency Tree Package Changes","permalink":"/news/2020/07/16/core-dependency-tree-package-changes"},"nextItem":{"title":"CFEP-18: Removing static libraries from the main build","permalink":"/news/2020/07/15/cfep-18-removing-static-libraries-from-the-main-build"}},"content":"conda-forge is moving to clang 10 on macOS! Check the release\\n[notes](https://releases.llvm.org/10.0.0/tools/clang/docs/ReleaseNotes.html#what-s-new-in-clang-10-0-0)\\nfor what is new, breaking, or deprecated."},{"id":"/2020/07/15/cfep-18-removing-static-libraries-from-the-main-build","metadata":{"permalink":"/news/2020/07/15/cfep-18-removing-static-libraries-from-the-main-build","source":"@site/news/2020-07-15-cfep-18-removing-static-libraries-from-the-main-build.md","title":"CFEP-18: Removing static libraries from the main build","description":"With CFEP-18","date":"2020-07-15T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Moving from clang 9 to clang 10","permalink":"/news/2020/07/16/moving-from-clang-9-to-clang-10"},"nextItem":{"title":"cf-mark-broken renamed to admin-requests","permalink":"/news/2020/07/03/cf-mark-broken-renamed-to-admin-requests"}},"content":"With [CFEP-18](https://github.com/conda-forge/cfep/blob/main/cfep-18.md)\\nwe now have a policy on how to deal with static packages. The most\\nimportant change here is that we will be removing static libraries from\\nthe main packages and moving them to `-static` suffixed packages.\\n`-static` packages will not be built by default but only on request."},{"id":"/2020/07/03/cf-mark-broken-renamed-to-admin-requests","metadata":{"permalink":"/news/2020/07/03/cf-mark-broken-renamed-to-admin-requests","source":"@site/news/2020-07-03-cf-mark-broken-renamed-to-admin-requests.md","title":"cf-mark-broken renamed to admin-requests","description":"The cf-mark-broken repo has been renamed to admin-requests. It still","date":"2020-07-03T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"CFEP-18: Removing static libraries from the main build","permalink":"/news/2020/07/15/cfep-18-removing-static-libraries-from-the-main-build"},"nextItem":{"title":"New Process for Marking Packages as Broken","permalink":"/news/2020/05/28/new-process-for-marking-packages-as-broken"}},"content":"The `cf-mark-broken` repo has been renamed to `admin-requests`. It still\\nserves the same purpose. However, we have expanded the capabilities of\\nthe repo to be able to mark packages as not broken."},{"id":"/2020/05/28/new-process-for-marking-packages-as-broken","metadata":{"permalink":"/news/2020/05/28/new-process-for-marking-packages-as-broken","source":"@site/news/2020-05-28-new-process-for-marking-packages-as-broken.md","title":"New Process for Marking Packages as Broken","description":"We are changing the way we mark packages as broken to better match the defaults channel and to","date":"2020-05-28T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"cf-mark-broken renamed to admin-requests","permalink":"/news/2020/07/03/cf-mark-broken-renamed-to-admin-requests"},"nextItem":{"title":"New Staging Process for anaconda.org Uploads","permalink":"/news/2020/05/09/new-staging-process-for-anacondaorg-uploads"}},"content":"We are changing the way we mark packages as `broken` to better match the `defaults` channel and to\\nbetter enable reproducible environments that depended on broken packages. We will now be adding the\\n`broken` label to packages but leaving them on the `main` channel. In order to make sure they do\\nnot appear in the `repodata.json` for the `main` channel, we will be patching the repo data to\\nremove them using the `removals` feature. Users will notice the following changes\\n\\n- The packages on `anaconda.org` will now have both the `main` and the `broken` labels.\\n- All requests to mark packages as broken must be sent to the `cf-mark-broken` repo.\\n- Members of `core` can no longer mark things as broken by hand since the repo data patching must\\n  be done as well.\\n- The package metadata for broken packages may differ slightly from when they were on the `main`\\n  channel.\\n- The only correct source of package metadata is now the `repodata.json` etc on `anaconda.org`. Any\\n  other sources may be missing critical changes."},{"id":"/2020/05/09/new-staging-process-for-anacondaorg-uploads","metadata":{"permalink":"/news/2020/05/09/new-staging-process-for-anacondaorg-uploads","source":"@site/news/2020-05-09-new-staging-process-for-anacondaorg-uploads.md","title":"New Staging Process for anaconda.org Uploads","description":"Starting this week, we are changing the way we upload packages to anaconda.org. We will move from","date":"2020-05-09T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"New Process for Marking Packages as Broken","permalink":"/news/2020/05/28/new-process-for-marking-packages-as-broken"},"nextItem":{"title":"vs2015 to vs2017 Transition","permalink":"/news/2020/03/24/vs2015-to-vs2017-transition"}},"content":"Starting this week, we are changing the way we upload packages to `anaconda.org`. We will move from\\ndirect uploads to the conda-forge `main` channel to using a staging organization/channel combined\\nwith a copy request from the staging channel to the production channel. This new process will allow\\nus to perform some validation on the outputs of feedstocks before they are released.\\n\\nWhat will you see as a feedstock maintainer?\\n\\n- Starting this week, the `admin-migrations` service will be making commits to all feedstocks to\\n  provision them with the necessary configuration, API keys, and tokens.\\n- Each feedstock will now be provisioned with a secret token. This token should not be shared or\\n  taken out of the CI services. It is used to identify the feedstock during the upload process.\\n- The `admin-migrations` service will be setting a new top-level key in the `conda-forge.yml`,\\n  `conda_forge_output_validation: true`. This key indicates to `conda-smithy` that it should\\n  include the output validation calls in the feedstock CI scripts.\\n- Currently open PRs will need to have this key added by hand and then rerendered.\\n- When PRs are running the CI scripts, they will do some initial validation of the feedstock\\n  outputs. If this validation fails, the CI job will fail. Please see the CI logs for the error\\n  message which is printed after `conda-build` runs.\\n- Once a PR is merged to master, the copy from the staging channel to the production channel will\\n  happen automatically.\\n- Should a copy request fail, you will get a notification via a comment on the commit to master.\\n- As part of this process, uploads from `appveyor` will no longer be allowed unless there is a\\n  significant barrier to using `azure`. We have recently upgraded the compiler infrastructure on\\n  `azure` to support this change in policy.\\n\\nDespite our extensive testing, we do not expect this change to be completely smooth, so please bear\\nwith us. As always, if you have any questions, concerns, or trouble, you can find us on Gitter or\\nbump us directly on Github!"},{"id":"/2020/03/24/vs2015-to-vs2017-transition","metadata":{"permalink":"/news/2020/03/24/vs2015-to-vs2017-transition","source":"@site/news/2020-03-24-vs2015-to-vs2017-transition.md","title":"vs2015 to vs2017 Transition","description":"We are formally deprecating vs2015 in two weeks on 2020-04-07 and will","date":"2020-03-24T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"New Staging Process for anaconda.org Uploads","permalink":"/news/2020/05/09/new-staging-process-for-anacondaorg-uploads"},"nextItem":{"title":"Appveyor Deprecation","permalink":"/news/2020/03/23/appveyor-deprecation"}},"content":"We are formally deprecating `vs2015` in two weeks on 2020-04-07 and will\\nmove to `vs2017`. This change will enable us to support the usage of\\n`msbuild` on Azure for the `win` platform and will provide additional\\nsupport for `C++`. Most packages built with `vs2015` can be linked with\\n`vs2017` toolchain (but not vice-versa). An exception is static\\nlibraries compiled with whole program optimization (/GL flag) which may\\nbe incompatible with the `vs2017` toolchain. These static libraries will\\nneed to be rebuilt using `vs2017`."},{"id":"/2020/03/23/appveyor-deprecation","metadata":{"permalink":"/news/2020/03/23/appveyor-deprecation","source":"@site/news/2020-03-23-appveyor-deprecation.md","title":"Appveyor Deprecation","description":"We are now starting to formally deprecate Appveyor in favor of Azure for","date":"2020-03-23T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"vs2015 to vs2017 Transition","permalink":"/news/2020/03/24/vs2015-to-vs2017-transition"},"nextItem":{"title":"Python 2.7 Admin Command Available","permalink":"/news/2020/03/21/python-27-admin-command-available"}},"content":"We are now starting to formally deprecate Appveyor in favor of Azure for\\nbuilds on the `win` platform. Note that we have not been adding appveyor\\nto new feedstocks for a while, so this is not a completely new change in\\npolicy. We will now, however, begin to actively disable Appveyor builds\\non feedstocks not using it by turning off builds for GitHub `push`\\nevents. Additionally, we have been issuing PRs to any remaining\\nfeedstocks to move them to Azure. We are aware that some packages built\\nwith `msbuild` cannot yet be moved to Azure and so are leaving Appveyor\\non for those feedstocks for now."},{"id":"/2020/03/21/python-27-admin-command-available","metadata":{"permalink":"/news/2020/03/21/python-27-admin-command-available","source":"@site/news/2020-03-21-python-27-admin-command-available.md","title":"Python 2.7 Admin Command Available","description":"A webservices admin command is now available to add Python 2.7 back to","date":"2020-03-21T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Appveyor Deprecation","permalink":"/news/2020/03/23/appveyor-deprecation"},"nextItem":{"title":"Python 2.7 and vs2008 Deprecation","permalink":"/news/2020/03/18/python-27-and-vs2008-deprecation"}},"content":"A webservices admin command is now available to add Python 2.7 back to\\nfeedstocks. Put `@conda-forge-admin add python 2.7` in the title on an\\nissue in your feedstock. The admin webservices bot will then issue a PR\\nadding back Python 2.7. Note that this PR will remove other Python\\nbuilds and any `win`, `aarch64`, or `ppc64le` builds. If you want to\\nkeep those, merge the PR into a separate branch on your feedstock."},{"id":"/2020/03/18/python-27-and-vs2008-deprecation","metadata":{"permalink":"/news/2020/03/18/python-27-and-vs2008-deprecation","source":"@site/news/2020-03-18-python-27-and-vs2008-deprecation.md","title":"Python 2.7 and vs2008 Deprecation","description":"- Python 2.7 is no longer supported by the upstream developers as of","date":"2020-03-18T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Python 2.7 Admin Command Available","permalink":"/news/2020/03/21/python-27-admin-command-available"},"nextItem":{"title":"Clang 9.0.0 and gfortran 7.3.0 as default compilers in OSX","permalink":"/news/2019/09/30/clang-900-and-gfortran-730-as-default-compilers-in-osx"}},"content":"- Python 2.7 is no longer supported by the upstream developers as of\\n  2020-01-01. Conda-forge is thus deprecating its Python 2.7 support.\\n  Conda-forge will provide no ongoing support for Python 2.7 builds and\\n  any existing builds are provided on an \\"as-is\\" basis.\\n- A `cf202003` label has been applied to the `conda-forge` channel for those who need a\\n  reference to the package index with Python 2.7.\\n- We are removing support for `vs2008` on Windows in conjunction with the deprecation of Python 2.7, as it was only supported to build this version of Python.\\n- We will provide an admin command that will add back Python 2.7 to any\\n  feedstock. Note that as stated above, we cannot provide support for any\\n  Python 2.7 builds generated with this admin command. Further, this admin\\n  command will only work on `osx-64` and `linux-64` platforms."},{"id":"/2019/09/30/clang-900-and-gfortran-730-as-default-compilers-in-osx","metadata":{"permalink":"/news/2019/09/30/clang-900-and-gfortran-730-as-default-compilers-in-osx","source":"@site/news/2019-09-30-clang-900-and-gfortran-730-as-default-compilers-in-osx.md","title":"Clang 9.0.0 and gfortran 7.3.0 as default compilers in OSX","description":"- If you maintain a feedstock that requires a C/C++ compiler, no","date":"2019-09-30T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Python 2.7 and vs2008 Deprecation","permalink":"/news/2020/03/18/python-27-and-vs2008-deprecation"},"nextItem":{"title":"We overhauled the blas support in conda-forge.","permalink":"/news/2019/03/28/we-overhauled-the-blas-support-in-conda-forge"}},"content":"- If you maintain a feedstock that requires a C/C++ compiler, no\\n  changes necessary. A rerender should be done next time the feedstock is\\n  updated to use the new compiler.\\n- If you maintain a feedstock with a\\n  Fortran compiler, a PR to upgrade to gfortran 7.3.0 was already issued.\\n  If that PR was merged, there\'s nothing to do. If not, contact core if\\n  you need help migrating."},{"id":"/2019/03/28/we-overhauled-the-blas-support-in-conda-forge","metadata":{"permalink":"/news/2019/03/28/we-overhauled-the-blas-support-in-conda-forge","source":"@site/news/2019-03-28-we-overhauled-the-blas-support-in-conda-forge.md","title":"We overhauled the blas support in conda-forge.","description":"- Our packages now build against NETLIB\u2019s reference implementation.","date":"2019-03-28T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Clang 9.0.0 and gfortran 7.3.0 as default compilers in OSX","permalink":"/news/2019/09/30/clang-900-and-gfortran-730-as-default-compilers-in-osx"},"nextItem":{"title":"It has happened! Conda-forge has migrated to the latest compilers \ud83c\udf89.","permalink":"/news/2019/01/22/it-has-happened-conda-forge-has-migrated-to-the-latest-compilers"}},"content":"- Our packages now build against NETLIB\u2019s reference implementation.\\n- You as a user can now choose the implementation available at runtime.\\n  For more information please refer to the [documentation](/docs/maintainer/knowledge_base/#knowledge-blas)."},{"id":"/2019/01/22/it-has-happened-conda-forge-has-migrated-to-the-latest-compilers","metadata":{"permalink":"/news/2019/01/22/it-has-happened-conda-forge-has-migrated-to-the-latest-compilers","source":"@site/news/2019-01-22-it-has-happened-conda-forge-has-migrated-to-the-latest-compilers.md","title":"It has happened! Conda-forge has migrated to the latest compilers \ud83c\udf89.","description":"If you:","date":"2019-01-22T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"We overhauled the blas support in conda-forge.","permalink":"/news/2019/03/28/we-overhauled-the-blas-support-in-conda-forge"},"nextItem":{"title":"The rebuild is moving along nicely with almost a third of the packages completed.","permalink":"/news/2018/10/12/the-rebuild-is-moving-along-nicely-with-almost-a-third-of-the-packages-completed"}},"content":"If you:\\n\\n- maintain a compiled feedstock, it will likely need to be\\n  rerender\\n- need to roll back to the old compilers, you can use the\\n  \\"cf201901\\" label."},{"id":"/2018/10/12/the-rebuild-is-moving-along-nicely-with-almost-a-third-of-the-packages-completed","metadata":{"permalink":"/news/2018/10/12/the-rebuild-is-moving-along-nicely-with-almost-a-third-of-the-packages-completed","source":"@site/news/2018-10-12-the-rebuild-is-moving-along-nicely-with-almost-a-third-of-the-packages-completed.md","title":"The rebuild is moving along nicely with almost a third of the packages completed.","description":"Recently completed are NumPy and Openblas which should open up much of","date":"2018-10-12T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"It has happened! Conda-forge has migrated to the latest compilers \ud83c\udf89.","permalink":"/news/2019/01/22/it-has-happened-conda-forge-has-migrated-to-the-latest-compilers"},"nextItem":{"title":"A minimal python 3.7 build is now available across all platforms and both compilers!","permalink":"/news/2018/09/24/a-minimal-python-37-build-is-now-available-across-all-platforms-and-both-compilers"}},"content":"Recently completed are NumPy and Openblas which should open up much of\\nthe python numeric stack. We\'re only about 5 feedstocks away from\\nopening up all of R as well."},{"id":"/2018/09/24/a-minimal-python-37-build-is-now-available-across-all-platforms-and-both-compilers","metadata":{"permalink":"/news/2018/09/24/a-minimal-python-37-build-is-now-available-across-all-platforms-and-both-compilers","source":"@site/news/2018-09-24-a-minimal-python-37-build-is-now-available-across-all-platforms-and-both-compilers.md","title":"A minimal python 3.7 build is now available across all platforms and both compilers!","description":"Yay!","date":"2018-09-24T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"The rebuild is moving along nicely with almost a third of the packages completed.","permalink":"/news/2018/10/12/the-rebuild-is-moving-along-nicely-with-almost-a-third-of-the-packages-completed"},"nextItem":{"title":"Deprecation notice for Python 3.5","permalink":"/news/2018/09/24/deprecation-notice-for-python-35"}},"content":"Yay!"},{"id":"/2018/09/24/deprecation-notice-for-python-35","metadata":{"permalink":"/news/2018/09/24/deprecation-notice-for-python-35","source":"@site/news/2018-09-24-deprecation-notice-for-python-35.md","title":"Deprecation notice for Python 3.5","description":"As we start building out more of the Python 3.7 stack, we will no longer","date":"2018-09-24T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"A minimal python 3.7 build is now available across all platforms and both compilers!","permalink":"/news/2018/09/24/a-minimal-python-37-build-is-now-available-across-all-platforms-and-both-compilers"},"nextItem":{"title":"The compiler migration is in full swing.","permalink":"/news/2018/09/20/the-compiler-migration-is-in-full-swing"}},"content":"As we start building out more of the Python 3.7 stack, we will no longer\\nbe building Python 3.5 packages.\\nNo new python 3.5 packages will be built after 2018-10-01."},{"id":"/2018/09/20/the-compiler-migration-is-in-full-swing","metadata":{"permalink":"/news/2018/09/20/the-compiler-migration-is-in-full-swing","source":"@site/news/2018-09-20-the-compiler-migration-is-in-full-swing.md","title":"The compiler migration is in full swing.","description":"The bot will be making the rounds and modernizing more than 4000","date":"2018-09-20T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Deprecation notice for Python 3.5","permalink":"/news/2018/09/24/deprecation-notice-for-python-35"},"nextItem":{"title":"Conda forge now has a magical status bar for tracking the progress of migrations.","permalink":"/news/2018/09/10/conda-forge-now-has-a-magical-status-bar-for-tracking-the-progress-of-migrations"}},"content":"The bot will be making the rounds and modernizing more than 4000\\npackages. This is going to take a few months to get done so bear with\\nus."},{"id":"/2018/09/10/conda-forge-now-has-a-magical-status-bar-for-tracking-the-progress-of-migrations","metadata":{"permalink":"/news/2018/09/10/conda-forge-now-has-a-magical-status-bar-for-tracking-the-progress-of-migrations","source":"@site/news/2018-09-10-conda-forge-now-has-a-magical-status-bar-for-tracking-the-progress-of-migrations.md","title":"Conda forge now has a magical status bar for tracking the progress of migrations.","description":"You can find this at","date":"2018-09-10T00:00:00.000Z","tags":[],"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"The compiler migration is in full swing.","permalink":"/news/2018/09/20/the-compiler-migration-is-in-full-swing"}},"content":"You can find this at\\n[conda-forge.org/status](https://conda-forge.org/status)."}]}}')}}]);