"use strict";(self.webpackChunkcf_infra_docs=self.webpackChunkcf_infra_docs||[]).push([[33457],{147:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var o=t(15401),a=t(74848),s=t(28453);const r={authors:["cj-wright"],tags:["conda-forge"]},i="Conda-Forge Operational Risk",c={authorsImageUrls:[void 0]},d=[{value:"A brief conda-forge primer",id:"a-brief-conda-forge-primer",level:2},{value:"Self-Service Structure",id:"self-service-structure",level:2},{value:"Top-Down Control",id:"top-down-control",level:2},{value:"Automation",id:"automation",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={a:"a",h2:"h2",p:"p",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Recently I've been thinking about operational risk (op. risk).\nOperational risks arise from failures of processes, for instance a\nmissing email, or an automated software system not running properly.\nMany commercial institutions are interested in minimizing op. risk,\nsince it is risk that produces no value, as opposed to risks associated\nwith investing. This is also something I think about in my job at\n",(0,a.jsx)(n.a,{href:"https://www.lab49.com/",children:"Lab49"}),", where I'm a software engineering\nconsultant focusing on financial institutions. I think there is also a\ngood analogy for Conda-Forge, even though we are not a commercial\noutfit. In this case the risk we incur isn't the potential for lost\nearnings but frustration for our users and maintainers in the form of\nbugs and lackluster user experience. In this post I explore three main\nsources of operational risk for Conda-Forge: Automation, Top-Down\nControl, and Self-Service Structure."]}),"\n",(0,a.jsx)(n.h2,{id:"a-brief-conda-forge-primer",children:"A brief conda-forge primer"}),"\n",(0,a.jsx)(n.p,{children:"Conda-Forge is an ecosystem and community that grew around building\npackages for the conda package manager. Conda-Forge uses continuous\nintegration services to build packages from GitHub repos called\nfeedstocks. This structure enables teams of contributors to maintain\npackages via a pull request based workflow. At time of writing\nConda-Forge has over 10000 feedstocks and ships more than 120 million\npackages a month."}),"\n",(0,a.jsx)(n.h2,{id:"self-service-structure",children:"Self-Service Structure"}),"\n",(0,a.jsx)(n.p,{children:"Conda-Forge is built around a self-service structure for each stage in a\nfeedstock's lifecyle. The creation of new feedstocks relies on would be\nmaintainers to submit PRs to staged-recipes. Although language specific\nhelp teams and staged-recipes reviewers provide some assistance and\noversight, the PR submitter plays the most important role in proposing\nthe package and shepherding it to acceptance. Once the feedstock is\naccepted the maintenance is federated with most upkeep being performed\nby the maintainers, who have extensive permissions and control over the\nfeedstock. If fixes or updates are needed for a package, maintainers and\nusers are encouraged to open their own pull requests."}),"\n",(0,a.jsx)(n.p,{children:"This structure can present a few challenges for minimizing op. risk. The\nmost important challenge is the disconnect between feedstock maintainers\nand users. While most maintainers are package users, most of our users\nare not maintainers, and are unlikely to become maintainers. The\ndisparity between maintainers and users can come from a few sources,\nsome under our control and others not. For instance we can write better\ndocumentation, lowering the barrier to entry, but we don't have control\nover how our user's incentive structures value Conda-Forge\ncontributions. This produces a gap in representation in the Conda-Forge\norganizational structure, where non-maintainer users' issues and\ndesires are not communicated to maintainers and Core."}),"\n",(0,a.jsx)(n.p,{children:"For instance, are we servicing the needs of developers using our\nbinaries as dependencies to code they are compiling locally. As another\nexample, are there support gaps for developers and scientists using\nConda-Forge in academic and government laboratories, who might not have\nthe skills or capacity to fix feedstocks. Our reliance on the public\nGitHub platform may prevent some users without access from raising their\nconcerns. Since these users may be under-represented we don't even know\nif we are meeting their needs and how best to help."}),"\n",(0,a.jsx)(n.h2,{id:"top-down-control",children:"Top-Down Control"}),"\n",(0,a.jsx)(n.p,{children:"While the majority of Conda-Forge's permissions structure is federated,\ncertain important parts are centralized, with the Core developers making\nkey decisions. Often these decisions are focused on stability of the\necosystem, for instance what versions of languages to support.\nAdditionally, maintenance and enhancements to the Conda-Forge\ninfrastructure are mostly performed by Core developers."}),"\n",(0,a.jsx)(n.p,{children:"However, the Core developers are usually experienced feedstock\nmaintainers, expert conda users, and have bought into the Conda-Forge\necosystem and mission. This means that decisions can be made without the\nperspective of new users or maintainers, or from potential users that\nare skeptical of the Conda-Forge approach."}),"\n",(0,a.jsx)(n.p,{children:"For instance, decisions about application binary interface pins are\nusually made by core, although these changes have impacts on downstream\nmaintainers. It is possible that most maintainers don't know about what\nthese pins are, how they are changed and how that affects their\nfeedstocks."}),"\n",(0,a.jsx)(n.h2,{id:"automation",children:"Automation"}),"\n",(0,a.jsx)(n.p,{children:"Automation has been used to great effect to make Conda-Forge possible.\nThe various bots and web services enable Conda-Forge's current scale,\nproviding help and support from running builds, bumping versions, and\nchecking feedstock quality. However, this automation presents its own\noperational risks and magnifies existing operational risks."}),"\n",(0,a.jsx)(n.p,{children:"Automation has a tendency to fail when we least expect it and often we\nlack the ability to fix it. The January 2018 Travis-CI outage is a great\nexample of this, where the CI service we were using for macOS builds\nexperienced reduced capacity and then a complete outage, causing builds\nto queue for days. Recently there was a sudden decrease in the number of\nparallel builds on Azure causing a similar queue of builds. Automation\ncan cause issues by enabling users to make decisions without all the\nneeded information. While many feedstocks have effective smoke tests for\ntheir packages the autotick bot doesn't currently check for new\ndependencies, potentially leading to missing or incorrect package\nmetadata."}),"\n",(0,a.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"Overall Conda-Forge has managed its operational risk well. Most\nimportantly Conda-Forge's transparent open source nature allows us to\naddress these issues head on by engaging with the community."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var o=t(96540);const a={},s=o.createContext(a);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:n},e.children)}},15401:e=>{e.exports=JSON.parse('{"permalink":"/blog/2020/07/02/op-risk","editUrl":"https://github.com/conda-forge/conda-forge.github.io/tree/refs/heads/main/blog/2020-07-02-op-risk.md","source":"@site/blog/2020-07-02-op-risk.md","title":"Conda-Forge Operational Risk","description":"Recently I\'ve been thinking about operational risk (op. risk).","date":"2020-07-02T00:00:00.000Z","tags":[{"inline":true,"label":"conda-forge","permalink":"/blog/tags/conda-forge"}],"readingTime":4.29,"hasTruncateMarker":true,"authors":[{"name":"Christopher J. \'CJ\' Wright","title":"Member of conda-forge/core","url":"https://github.com/cj-wright","imageURL":"https://github.com/cj-wright.png","key":"cj-wright","page":null}],"frontMatter":{"authors":["cj-wright"],"tags":["conda-forge"]},"unlisted":false,"prevItem":{"title":"Scipy 2020 Packaging BOF","permalink":"/blog/2020/07/06/scipy-bof"},"nextItem":{"title":"PyPy builds on conda-forge","permalink":"/blog/2020/03/10/pypy"}}')}}]);