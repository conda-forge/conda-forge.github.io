"use strict";(self.webpackChunkcf_infra_docs=self.webpackChunkcf_infra_docs||[]).push([[37626],{49244:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"maintainer/knowledge_base","title":"Knowledge Base","description":"Finding examples with Github Code Search","source":"@site/docs/maintainer/knowledge_base.md","sourceDirName":"maintainer","slug":"/maintainer/knowledge_base","permalink":"/docs/maintainer/knowledge_base","draft":false,"unlisted":false,"editUrl":"https://github.com/conda-forge/conda-forge.github.io/tree/refs/heads/main/docs/maintainer/knowledge_base.md","tags":[],"version":"current","lastUpdatedAt":1754412509000,"frontMatter":{"title":"Knowledge Base"},"sidebar":"docs","previous":{"title":"Configuring conda-forge.yml","permalink":"/docs/maintainer/conda_forge_yml"},"next":{"title":"FAQ","permalink":"/docs/maintainer/maintainer_faq"}}');var a=i(74848),o=i(28453);const t={title:"Knowledge Base"},r="Knowledge Base",l={},d=[{value:"Finding examples with Github Code Search",id:"search-github",level:2},{value:"Using CMake",id:"using-cmake",level:2},{value:"Moving from an autotools build to a CMake build",id:"moving-from-an-autotools-build-to-a-cmake-build",level:3},{value:"Particularities on Windows",id:"particularities-on-windows",level:2},{value:"Local testing",id:"local-testing",level:3},{value:"Executing a build",id:"executing-a-build",level:4},{value:"Testing a local build",id:"testing-a-local-build",level:4},{value:"Notes on native code",id:"notes-on-native-code",level:3},{value:"Simple CMake-Based <code>bld.bat</code>",id:"simple-cmake-based-bldbat",level:4},{value:"Versions of Microsoft Visual C++ (MSVC)",id:"versions-of-microsoft-visual-c-msvc",level:4},{value:"Using newer MSVC versions",id:"using-newer-msvc-versions",level:4},{value:"Tips &amp; tricks for CMD/Batch syntax",id:"tips--tricks-for-cmdbatch-syntax",level:3},{value:"Special Dependencies and Packages",id:"special-dependencies-and-packages",level:2},{value:"Compilers",id:"compilers",level:3},{value:"Cross-compilation",id:"cross-compilation",level:3},{value:"How to enable cross-compilation",id:"how-to-enable-cross-compilation",level:4},{value:"Placing requirements in build or host",id:"placing-requirements-in-build-or-host",level:4},{value:"Cross-compilation examples",id:"cross-compilation-examples",level:4},{value:"Finding NumPy in cross-compiled Python packages using CMake",id:"finding-numpy-in-cross-compiled-python-packages-using-cmake",level:4},{value:"Details about cross-compiled Python packages",id:"details-about-cross-compiled-python-packages",level:4},{value:"Emulated builds",id:"emulated-builds",level:3},{value:"Emulation examples",id:"emulation-examples",level:4},{value:"Rust Nightly",id:"rust-nightly",level:3},{value:"Core Dependency Tree Packages (CDTs)",id:"core-dependency-tree-packages-cdts",level:3},{value:"Why are CDTs bad?",id:"why-are-cdts-bad",level:4},{value:"When should CDTs be used?",id:"when-should-cdts-be-used",level:4},{value:"What&#39;s are some good examples?",id:"whats-are-some-good-examples",level:4},{value:"libGL",id:"libgl",level:3},{value:"Building Against NumPy",id:"building-against-numpy",level:3},{value:"JupyterLab Extensions",id:"jupyterlab-extensions",level:3},{value:"Message passing interface (MPI)",id:"message-passing-interface-mpi",level:3},{value:"MPI Variants in conda-forge",id:"mpi-variants-in-conda-forge",level:4},{value:"Building MPI variants",id:"building-mpi-variants",level:4},{value:"Including a no-mpi build",id:"including-a-no-mpi-build",level:4},{value:"Preferring a provider (usually nompi)",id:"preferring-a-provider-usually-nompi",level:4},{value:"Complete example",id:"complete-example",level:4},{value:"Just mpi example",id:"just-mpi-example",level:4},{value:"MPI Compiler Packages",id:"mpi-compiler-packages",level:4},{value:"OpenMP",id:"openmp",level:3},{value:"Switching OpenMP implementation",id:"switching-openmp-implementation",level:4},{value:"yum_requirements.txt",id:"yum_requirementstxt",level:3},{value:"BLAS",id:"blas",level:3},{value:"Switching BLAS implementation",id:"switching-blas-implementation",level:4},{value:"How it works",id:"how-it-works",level:4},{value:"Microarchitecture-optimized builds",id:"microarch",level:3},{value:"Matplotlib",id:"matplotlib",level:3},{value:"<code>pybind11</code> ABI Constraints",id:"pybind11-abi-constraints",level:3},{value:"Empty Python packages",id:"empty-python-packages",level:3},{value:"Non-version-specific Python packages",id:"non-version-specific-python-packages",level:3},{value:"Packages with abi3 extensions",id:"packages-with-abi3-extensions",level:3},{value:"Noarch builds",id:"noarch-builds",level:2},{value:"Noarch python",id:"noarch-python",level:3},{value:"Noarch packages with OS-specific dependencies",id:"noarch-packages-with-os-specific-dependencies",level:4},{value:"Noarch generic",id:"noarch-generic",level:3},{value:"Multi-output recipes",id:"multi-output-recipes",level:2},{value:"Common pitfalls with <code>outputs</code>",id:"common-pitfalls-with-outputs",level:3},{value:"Build matrices",id:"build-matrices",level:2},{value:"Requiring newer macOS SDKs",id:"requiring-newer-macos-sdks",level:2},{value:"Newer C++ features with old SDK",id:"newer-c-features-with-old-sdk",level:3},{value:"PyPy builds",id:"pypy-builds",level:2},{value:"Using setuptools_scm",id:"using-setuptools_scm",level:2},{value:"Requiring newer <code>glibc</code> versions",id:"requiring-newer-glibc-versions",level:2},{value:"CUDA builds",id:"cuda-builds",level:2},{value:"Common problems and known issues",id:"common-problems-and-known-issues",level:3},{value:"<code>nvcuda.dll</code> cannot be found on Windows",id:"nvcudadll-cannot-be-found-on-windows",level:4},{value:"My feedstock is not building old CUDA versions anymore",id:"my-feedstock-is-not-building-old-cuda-versions-anymore",level:4},{value:"Packages that require a GPU or long-running builds",id:"packages-that-require-a-gpu-or-long-running-builds",level:2},{value:"Apple Silicon builds",id:"apple-silicon-builds",level:2},{value:"Pre-release builds",id:"pre-release-builds",level:2},{value:"Creating a pre-release build",id:"creating-a-pre-release-build",level:3},{value:"Installing a pre-release build",id:"installing-a-pre-release-build",level:3},{value:"Using the conda CLI",id:"using-the-conda-cli",level:4},{value:"Using environment.yml",id:"using-environmentyml",level:4},{value:"Pre-release version sorting",id:"pre-release-version-sorting",level:3},{value:"How to update your feedstock token?",id:"how-to-update-your-feedstock-token",level:2},{value:"Using <code>arch_rebuild.txt</code>",id:"using-arch_rebuildtxt",level:2},{value:"Migrators and Migrations",id:"migrators-and-migrations",level:2},{value:"Security considerations for conda-forge builds",id:"security-considerations-for-conda-forge-builds",level:2},{value:"Significant Changes To Upstream Projects",id:"significant-changes-to-upstream-projects",level:2},{value:"Python",id:"python",level:3}];function c(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",channel:"channel",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",label:"label",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"knowledge-base"})}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"knowledge-base",children:"Knowledge Base"})}),"\n",(0,a.jsx)(n.h2,{id:"search-github",children:"Finding examples with Github Code Search"}),"\n",(0,a.jsxs)(n.p,{children:["Github's ",(0,a.jsx)(n.a,{href:"https://github.com/features/code-search",children:"Code Search"})," is an incredibly useful tool to find examples of recipes in conda-forge.\nThere are a couple tricks you can use to make the most out of your searches."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Limit the search to ",(0,a.jsx)(n.code,{children:"org:conda-forge"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Limit the path to the type of file you want. This usually means:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"path:meta.yaml"})," for the main metadata file."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"path:recipe/*.sh"})," for Unix build scripts."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"path:recipe/*.bat"})," for Windows build scripts."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"That's it, with those two modifiers, you can get a lot done! Some examples include:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.a,{href:"https://github.com/search?type=code&q=org%3Aconda-forge+path%3Ameta.yaml+%22noarch%3A+python%22",children:["All ",(0,a.jsx)(n.code,{children:"noarch: python"})," recipes"]}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Recipes that depend on... ",(0,a.jsx)(n.a,{href:"https://github.com/search?type=code&q=org%3Aconda-forge+path%3Ameta.yaml+%22-+cuda%22",children:(0,a.jsx)(n.code,{children:"cuda"})}),", ",(0,a.jsx)(n.a,{href:"https://github.com/search?type=code&q=org%3Aconda-forge+path%3Ameta.yaml+%22-+pytorch%22",children:(0,a.jsx)(n.code,{children:"pytorch"})}),", ",(0,a.jsxs)(n.a,{href:"https://github.com/search?type=code&q=org%3Aconda-forge+path%3Ameta.yaml+%2F-+__%5CS%2B%2F",children:[(0,a.jsx)(n.code,{children:"__virtual"})," packages"]}),", etc."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/search?type=code&q=org%3Aconda-forge+cmake+path%3Arecipe%2F*.sh",children:"Scripts that use CMake on Unix"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/search?type=code&q=org%3Aconda-forge+cmake+path%3Arecipe%2F*.bat",children:"Scripts that use CMake on Windows"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/search?type=code&q=org%3Aconda-forge+path%3Ameta.yaml+%22target_platform+%21%3D+build_platform%22+OR+%22build_platform+%21%3D+target_platform%22",children:"Recipes that use cross-compilation"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{title:"Configure your browser to have a search shortcut",type:"tip",children:[(0,a.jsxs)(n.p,{children:["For example, in Chrome you can go to ",(0,a.jsx)(n.a,{href:"chrome://settings/searchEngines",children:(0,a.jsx)(n.code,{children:"chrome://settings/searchEngines"})})," and add a new entry with:"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Name: conda-forge recipes"}),"\n",(0,a.jsxs)(n.li,{children:["Shortcut: ",(0,a.jsx)(n.code,{children:"cf"})]}),"\n",(0,a.jsxs)(n.li,{children:["URL: ",(0,a.jsx)(n.code,{children:"https://github.com/search?type=code&q=org%3Aconda-forge+%s"})]}),"\n"]}),(0,a.jsxs)(n.p,{children:["And with that you can simply type ",(0,a.jsx)(n.code,{children:"cf your-search-here"})," for super fast queries!"]})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"using-cmake"})}),"\n",(0,a.jsx)(n.h2,{id:"using-cmake",children:"Using CMake"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://cmake.org/",children:"CMake"})," can be used to build more complex projects in ",(0,a.jsx)(n.code,{children:"build.sh"}),"\nor ",(0,a.jsx)(n.code,{children:"bld.bat"})," scripts."]}),"\n",(0,a.jsxs)(n.p,{children:["If you are using cmake, be sure to make it a build requirement in the ",(0,a.jsx)(n.code,{children:"build"})," section. You\nmay also need to include ",(0,a.jsx)(n.code,{children:"make"})," or ",(0,a.jsx)(n.code,{children:"ninja"})," depending on your platform and build tools.\nOn Windows, you can also use ",(0,a.jsx)(n.code,{children:"nmake"})," to build, but that does not need to be explicitly included."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"requirements:\n  build:\n    - cmake\n    - make  # [not win]\n    - ninja  # [win]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For CMake projects using the ",(0,a.jsx)(n.a,{href:"https://cmake.org/cmake/help/git-stage/module/FindPython.html",children:"FindPython"}),"\nmodule, you can tell CMake which Python to use by passing ",(0,a.jsx)(n.code,{children:'-DPython_EXECUTABLE="$PYTHON"'}),"\n(macOS or Linux) or ",(0,a.jsx)(n.code,{children:'-DPython_EXECUTABLE="%PYTHON%"'})," (Windows) as a command line option.\nOlder CMake projects may require similar, but slightly different options."]}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsx)(n.p,{children:"Don't forget that depending on which CMake module you use you have to use a different command:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://cmake.org/cmake/help/git-stage/module/FindPython.html",children:"FindPython"}),":\n",(0,a.jsx)(n.code,{children:"-DPython_EXECUTABLE=..."}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://cmake.org/cmake/help/git-stage/module/FindPython3.html",children:"FindPython3"}),":\n",(0,a.jsx)(n.code,{children:"-DPython3_EXECUTABLE=..."}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://cmake.org/cmake/help/git-stage/module/FindPython2.html",children:"FindPython2"}),":\n",(0,a.jsx)(n.code,{children:"-DPython2_EXECUTABLE=..."}),"."]}),"\n"]}),(0,a.jsxs)(n.p,{children:["or if you are still on the deprecated ",(0,a.jsx)(n.a,{href:"https://cmake.org/cmake/help/latest/module/FindPythonLibs.html",children:"FindPythonLibs"}),": ",(0,a.jsx)(n.code,{children:"-DPYTHON_EXECUTABLE=..."}),"."]})]}),"\n",(0,a.jsx)(n.p,{children:"Some optional, but useful CMake options:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-DCMAKE_BUILD_TYPE=Release"})," Configure as release build. This is better done on the initial\n",(0,a.jsx)(n.code,{children:"cmake"})," call as some packages construct different build configurations depending on this flag."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-DCMAKE_INSTALL_PREFIX=$PREFIX"})," Specify the install location."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-DCMAKE_INSTALL_LIBDIR=lib"})," Libraries will land in $PREFIX/lib, sometimes projects install\ninto lib64 or similar but on conda-forge we keep shared libraries in simply lib."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-DBUILD_SHARED_LIBS=ON"})," Instruct CMake to build shared libraries instead of static ones."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"-DCMAKE_FIND_FRAMEWORK=NEVER"})," and ",(0,a.jsx)(n.code,{children:"-DCMAKE_FIND_APPBUNDLE=NEVER"})," Prevent CMake from using system-wide macOS packages."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"${CMAKE_ARGS}"})," Add variables defined by conda-forge internally. This is required to enable various conda-forge enhancements, like ",(0,a.jsx)(n.a,{href:"#cuda",children:"CUDA builds"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:["As ",(0,a.jsx)(n.code,{children:"${CMAKE_ARGS}"})," is a space separated list of options, quoting ",(0,a.jsx)(n.code,{children:"${CMAKE_ARGS}"}),"\n(",(0,a.jsx)(n.code,{children:'"${CMAKE_ARGS}"'}),") in recipes can lead to build errors as quoting makes the shell\ntreat the contents of the variable as a single argument."]})}),"\n",(0,a.jsx)(n.p,{children:'Here are some basic commands for you to get started. These are dependent on your source\ncode layout and aren\'t intended to be used "as is".'}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"CMake lines for build.sh (macOS/Linux):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-default",children:'cmake CMakeLists.txt -DPython3_EXECUTABLE="$PYTHON"\ncmake --build . --config Release\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"CMake lines for bld.bat (Windows):"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-default",children:'cmake -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release -DPython3_EXECUTABLE="%PYTHON%"\nif errorlevel 1 exit /b 1\ncmake --build . --config Release\nif errorlevel 1 exit /b 1\n'})}),"\n",(0,a.jsxs)(n.p,{children:["See also the ",(0,a.jsx)(n.code,{children:"bld.bat"})," in the Windows section below for an additional example."]}),"\n",(0,a.jsxs)(n.p,{children:["Other useful ",(0,a.jsx)(n.code,{children:"cmake"})," options are ",(0,a.jsx)(n.code,{children:"-B<directory>"})," and ",(0,a.jsx)(n.code,{children:"-S<directory>"})," to specify build and source\ndirectories."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"moving-from-an-autotools-build-to-a-cmake-build"})}),"\n",(0,a.jsx)(n.h3,{id:"moving-from-an-autotools-build-to-a-cmake-build",children:"Moving from an autotools build to a CMake build"}),"\n",(0,a.jsx)(n.p,{children:"Some packages maintain an autotools build and a cmake build. Some maintainers\nwould like to switch to a cmake build because that provides windows builds\neasily. These builds are mostly not ABI compatible with each other.\nHere are some things you should check,"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Check that both libraries have the same SONAME on linux"}),"\n",(0,a.jsxs)(n.p,{children:["Run ",(0,a.jsx)(n.code,{children:"readelf -d /path/to/lib.so"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Check that both libraries have the same install name and have the same\ncompatibility and current versions."}),"\n",(0,a.jsxs)(n.p,{children:["Run ",(0,a.jsx)(n.code,{children:"otool -L /path/to/lib.dylib"}),". The second line should give you\nthe three pieces of information"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Check that the file list is the same in both."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Check that you use the same options as the same autoconf build."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Check that the symbols exported are the same."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Check that additional packaging information stays the same, e.g. is the same pkg-config information provided."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"particularities-on-windows"})}),"\n",(0,a.jsx)(n.h2,{id:"particularities-on-windows",children:"Particularities on Windows"}),"\n",(0,a.jsx)(n.p,{children:"This document presents conda-forge and conda-build information and examples\nwhile building on Windows."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"local-testing"})}),"\n",(0,a.jsx)(n.h3,{id:"local-testing",children:"Local testing"}),"\n",(0,a.jsxs)(n.p,{children:["The first thing that you should know is that you can locally test Windows\nbuilds of your packages even if you don't own a Windows machine. Microsoft\nmakes available free, official Windows virtual machines (VMs) ",(0,a.jsx)(n.a,{href:"https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/",children:"at this website"}),". If you\nare unfamiliar with VM systems or have trouble installing Microsoft's VMs, please\nuse a general web search to explore \u2014 while these topics are beyond the\nscope of this documentation, there are ample discussions on them on the broader\nInternet."]}),"\n",(0,a.jsxs)(n.p,{children:["To bootstrap a conda environment and install ",(0,a.jsx)(n.code,{children:"conda-build"}),", consider\n",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/miniforge",children:"miniforge"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"executing-a-build"})}),"\n",(0,a.jsx)(n.h4,{id:"executing-a-build",children:"Executing a build"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"build-locally.py"})," script does not support Windows (yet, PRs welcome!).\nYou can use ",(0,a.jsx)(n.code,{children:"conda build recipe/ -m .ci_support/choose_your_config.yaml"})," as\na workaround for now."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"testing-a-local-build"})}),"\n",(0,a.jsx)(n.h4,{id:"testing-a-local-build",children:"Testing a local build"}),"\n",(0,a.jsxs)(n.p,{children:["Because we're using ",(0,a.jsx)(n.code,{children:"conda-build"})," directly instead of ",(0,a.jsx)(n.code,{children:"build-locally.py"}),",\nwe can use the ",(0,a.jsx)(n.code,{children:"local"})," channel:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-default",children:"conda create -n my-new-env -c local my-package\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"notes-on-native-code"})}),"\n",(0,a.jsx)(n.h3,{id:"notes-on-native-code",children:"Notes on native code"}),"\n",(0,a.jsxs)(n.p,{children:["In order to compile native code (C, C++, etc.) on Windows, you will need to\ninstall Microsoft's Visual C++ build tools on your VM. You must install\nparticular versions of these tools \u2014 this is to maintain compatibility between\ncompiled libraries used in Python, ",(0,a.jsx)(n.a,{href:"https://wiki.python.org/moin/WindowsCompilers",children:"as described on this Python wiki page"}),". The current relevant\nversions are:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"For Python 3.5\u20133.12+: Visual C++ 14.x"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["While you can obtain these tools by installing the right version of the full\n",(0,a.jsx)(n.a,{href:"https://visualstudio.microsoft.com/",children:"Visual Studio"}),' development\nenvironment, you can save a lot of time and bandwidth by installing standalone\n"build tools" packages. You can get them from ',(0,a.jsx)(n.a,{href:"https://visualstudio.microsoft.com/vs/older-downloads/#visual-studio-2022-and-other-products",children:"Visual Studio\nSubscriptions"}),'.\nTo download build tools, you\'ll need a Microsoft account. Once on the\nVisual Studio Subscriptions page, you may also need to join the Dev Essentials\nprogram. Once that\'s done, you can click the "Download" tab and search for\n"Build Tools for Visual Studio 2022". You can directly install VC-2022 using the\n',(0,a.jsx)(n.a,{href:"https://aka.ms/vs/17/release/vs_BuildTools.exe",children:"Visual Studio Build Tools 2022 installer"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["If you need more information. Please refer ",(0,a.jsx)(n.a,{href:"https://wiki.python.org/moin/WindowsCompilers",children:"the Python wiki page on Windows compilers"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"simple-cmake-based-bld-bat"})}),"\n",(0,a.jsxs)(n.h4,{id:"simple-cmake-based-bldbat",children:["Simple CMake-Based ",(0,a.jsx)(n.code,{children:"bld.bat"})]}),"\n",(0,a.jsxs)(n.p,{children:["Some projects provide hooks for CMake to build the project. The following\nexample ",(0,a.jsx)(n.code,{children:"bld.bat"})," file demonstrates how to build a traditional, out-of-core\nbuild for such projects."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"CMake-based bld.bat:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-batch",children:'setlocal EnableDelayedExpansion\n\n:: Make a build folder and change to it.\nmkdir build\ncd build\n\n:: Configure using the CMakeFiles\ncmake -G "NMake Makefiles" ^\n      -DCMAKE_INSTALL_PREFIX:PATH="%LIBRARY_PREFIX%" ^\n      -DCMAKE_PREFIX_PATH:PATH="%LIBRARY_PREFIX%" ^\n      -DCMAKE_BUILD_TYPE:STRING=Release ^\n      ..\nif errorlevel 1 exit 1\n\n:: Build!\nnmake\nif errorlevel 1 exit 1\n\n:: Install!\nnmake install\nif errorlevel 1 exit 1\n'})}),"\n",(0,a.jsx)(n.p,{children:"The following feedstocks are examples of this build structure deployed:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/libpng-feedstock/blob/master/recipe/bld.bat",children:"libpng"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/pugixml-feedstock/blob/master/recipe/bld.bat",children:"Pugixml"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"building-for-different-vc-versions"})}),"\n",(0,a.jsx)(n.h4,{id:"versions-of-microsoft-visual-c-msvc",children:"Versions of Microsoft Visual C++ (MSVC)"}),"\n",(0,a.jsxs)(n.p,{children:["Up until Visual Studio (VS) 2013, the MSVC compiler changed ABI on every major release,\nmeaning packages that communicated through a C/C++ API had to be built with a consistent\nversion. This meant for example that python 2.7 required ",(0,a.jsx)(n.code,{children:"vs2008"})," for the duration of its lifetime."]}),"\n",(0,a.jsx)(n.p,{children:"Since VS2015, the ABI has been kept stable though, meaning that packages do not have to be\nbuilt with the same MSVC version. This allows us to avoid complicated migrations for ~all\ncompiled packages, or getting stuck on old compiler versions."}),"\n",(0,a.jsxs)(n.p,{children:["Speaking of versions, the situation with MSVC can be very confusing. The Visual Studio year is\noften used as a shorthand for the compiler generation, but what's really relevant is the\ntoolchain version, which, since VS2015 has been 14.x, and which is referred to as ",(0,a.jsx)(n.code,{children:"vc"}),"."]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"VS Year"}),(0,a.jsx)(n.th,{children:"VS Version"}),(0,a.jsx)(n.th,{children:"Compiler Version"}),(0,a.jsx)(n.th,{children:"Toolchain Version"}),(0,a.jsx)(n.th,{children:"Runtime Version"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"2015"}),(0,a.jsx)(n.td,{children:"14.0"}),(0,a.jsx)(n.td,{children:"19.0"}),(0,a.jsx)(n.td,{children:"14.0"}),(0,a.jsx)(n.td,{children:"14.0.zzzzz"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"2017"}),(0,a.jsx)(n.td,{children:"15.x"}),(0,a.jsx)(n.td,{children:"19.1y"}),(0,a.jsx)(n.td,{children:"14.1"}),(0,a.jsx)(n.td,{children:"14.1y.zzzzz"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"2019"}),(0,a.jsx)(n.td,{children:"16.x"}),(0,a.jsx)(n.td,{children:"19.2x"}),(0,a.jsx)(n.td,{children:"14.2"}),(0,a.jsx)(n.td,{children:"14.2x.zzzzz"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"2022"}),(0,a.jsx)(n.td,{children:"17.x"}),(0,a.jsx)(n.td,{children:"19.3x"}),(0,a.jsx)(n.td,{children:"14.3"}),(0,a.jsx)(n.td,{children:"14.3x.zzzzz"})]})]})]}),"\n",(0,a.jsxs)(n.p,{children:["In the table above, ",(0,a.jsx)(n.code,{children:"x"})," and ",(0,a.jsx)(n.code,{children:"y"})," on the same line are referring to the same digit, though there\nare various deviations from this schema. For example, the minor versions for the 2022 line went\nbeyond 9, so 17.14 corresponds to compiler 19.44 (30+14) and runtime 14.44."]}),"\n",(0,a.jsx)(n.p,{children:'We are always able to use the newest runtime in an environment, so we always satisfy the respective\nlower bound imposed by the compiler version. However, there are other situations where the toolchain\nversion becomes "viral", in the sense that certain artefacts like static libraries have to be\nconsumed by a toolchain that\'s at least as new as the one that produced it. We therefore try to\nnot raise our default compiler version too quickly.'}),"\n",(0,a.jsxs)(n.p,{children:["As of June 2025, we are now on the most recent VS2022 (because VS2019 had reached end-of-life already\nin mid 2024), though the next major version of Visual Studio is already on the horizon. It will\nstill be ABI-compatible, such that we will not have to rebuild everything. In other words, the\ntoolchain version will remain ",(0,a.jsx)(n.code,{children:"14.x"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:['If the day ever comes where MSVC breaks the ABI again (codename "vNext"), then we will have to rebuild\nall compiled packages in conda-forge on windows. After such a migration has taken place, you can then\nchoose to skip building for one or the other by using ',(0,a.jsx)(n.code,{children:"vc"})," in a selector, e.g."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"build:\n    # to demonstrate mechanism: only build vNext\n    skip: true  # [win and vc<15]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"using-vs2022"})}),"\n",(0,a.jsx)(n.h4,{id:"using-newer-msvc-versions",children:"Using newer MSVC versions"}),"\n",(0,a.jsx)(n.p,{children:"Given that conda-forge is currently (June 2025) on the latest VS line, it's currently not possible\nto use even newer versions. However, we expect a new Visual Studio major version within the next year\nor so, and once it becomes available in the runner-images for Azure Pipelines and then in conda-forge,\nit will be possible to opt into newer compilers (e.g. for C++23 support) as follows."}),"\n",(0,a.jsxs)(n.p,{children:["In ",(0,a.jsx)(n.code,{children:"recipe/conda_build_config.yaml"})," file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# note: future VS version is speculative!\nc_compiler:    # [win]\n- vs2026       # [win]\ncxx_compiler:  # [win]\n- vs2026       # [win]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["After making these changes don't forget to rerender with ",(0,a.jsx)(n.code,{children:"conda-smithy"})," (to rerender manually use ",(0,a.jsx)(n.code,{children:"conda smithy rerender"})," from the command line)."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"cmd-batch-syntax"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"tips-tricks-for-cmd-batch-syntax"})}),"\n",(0,a.jsx)(n.h3,{id:"tips--tricks-for-cmdbatch-syntax",children:"Tips & tricks for CMD/Batch syntax"}),"\n",(0,a.jsxs)(n.p,{children:["Windows recipes rely on CMD/Batch scripts (",(0,a.jsx)(n.code,{children:".bat"}),") by default.\nBatch syntax is a bit different from Bash and friends on Unix, so we have collected some tips here to help you get started if you are not familiar with this scripting language."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Check if you need to write a Batch script first!\nSimple recipes might not need shell-specific code and can be written in an agnostic way.\nUse the ",(0,a.jsx)(n.code,{children:"build.script"})," item in ",(0,a.jsx)(n.code,{children:"meta.yaml"})," (see ",(0,a.jsx)(n.a,{href:"https://docs.conda.io/projects/conda-build/en/stable/resources/define-metadata.html#script",children:"conda-build docs"}),").\nThis item can take a string or a list of strings (one per line)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://ss64.com/nt/syntax.html",children:"SS64's CMD howto pages"})," are the best resource for any kind of question regarding CMD/Batch syntax."]}),"\n",(0,a.jsxs)(n.li,{children:["Search conda-forge for existing ",(0,a.jsx)(n.code,{children:".bat"})," scripts and learn with examples.\nSee this ",(0,a.jsx)(n.a,{href:"https://github.com/search?q=org%3Aconda-forge+language%3ABatchfile&type=code&l=Batchfile",children:"example query for all Batchfiles"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["You can ",(0,a.jsx)(n.a,{href:"https://developer.microsoft.com/en-us/windows/downloads/virtual-machines/",children:"free trial Windows VMs from Microsoft"}),".\nSet one up with your favorite virtualization solution to debug your CMD syntax.\nThere are also some minimal emulators online that might get you started with the basics, even if not all CMD features are present.\nFor example, this ",(0,a.jsx)(n.a,{href:"https://www.pcjs.org/software/pcx86/sys/windows/win95/4.00.950/",children:"Windows 95 emulator"})," features a more or less okay MS-DOS prompt."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"special-dependencies-and-packages"})}),"\n",(0,a.jsx)(n.h2,{id:"special-dependencies-and-packages",children:"Special Dependencies and Packages"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"dep-compilers"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"compilers"})}),"\n",(0,a.jsx)(n.h3,{id:"compilers",children:"Compilers"}),"\n",(0,a.jsxs)(n.p,{children:["Compilers are dependencies with a special syntax and are always added to ",(0,a.jsx)(n.code,{children:"requirements/build"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"There are currently five supported compilers:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"C"}),"\n",(0,a.jsx)(n.li,{children:"cxx"}),"\n",(0,a.jsx)(n.li,{children:"Fortran"}),"\n",(0,a.jsx)(n.li,{children:"Go"}),"\n",(0,a.jsx)(n.li,{children:"Rust"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"A package that needs all five compilers would define"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"requirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('fortran') }}\n    - {{ compiler('go') }}\n    - {{ compiler('rust') }}\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Appropriate compiler runtime packages will be automatically added to the package's runtime requirements and therefore\nthere's no need to specify ",(0,a.jsx)(n.code,{children:"libgcc"})," or ",(0,a.jsx)(n.code,{children:"libgfortran"}),". There are additional informations about how conda-build 3 treats\ncompilers in the ",(0,a.jsx)(n.a,{href:"https://docs.conda.io/projects/conda-build/en/stable/resources/compiler-tools.html",children:"conda docs"}),"."]})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"cross-compilation"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"id1"})}),"\n",(0,a.jsx)(n.h3,{id:"cross-compilation",children:"Cross-compilation"}),"\n",(0,a.jsx)(n.p,{children:"conda-forge defaults to native builds of packages for x86_64 on Linux, macOS and Windows, because\nthat's the architecture powering the default CI runners. Other architectures are supported too,\nbut they are not guaranteed to have native builds. In those platforms where we can't provide native\nCI runners, we can still resort to either cross-compilation or emulation."}),"\n",(0,a.jsx)(n.p,{children:"Cross-compiling means building a package for a different architecture than the one the build process\nis running on. Given how abundant x86_64 runners are, most common cross-compilation setups will target\nnon-x86_64 architectures from x86_64 runners."}),"\n",(0,a.jsx)(n.p,{children:"Cross-compilation terminology usually distinguishes between two types of machine:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Build: The machine running the building process."}),"\n",(0,a.jsx)(n.li,{children:"Host: The machine we are building packages for."}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Some cross-compilation documentation might also distinguish between a third type of machine, the\ntarget machine. You can read more about it in ",(0,a.jsx)(n.a,{href:"https://stackoverflow.com/questions/47010422/cross-compilation-terminologies-build-host-and-target",children:"this Stack Overflow question"}),".\nFor the purposes of conda-forge, we'll consider the target machine to be the same as the host."]})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"cross-compilation-howto"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"how-to-enable-cross-compilation"})}),"\n",(0,a.jsx)(n.h4,{id:"how-to-enable-cross-compilation",children:"How to enable cross-compilation"}),"\n",(0,a.jsxs)(n.p,{children:["Cross-compilation settings depend on the ",(0,a.jsx)(n.code,{children:"build_platform"})," and ",(0,a.jsx)(n.code,{children:"target_platform"})," conda-build\nvariables:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"build_platform"}),": The platform on which ",(0,a.jsx)(n.code,{children:"conda-build"})," is running, which defines the ",(0,a.jsx)(n.code,{children:"build"}),"\nenvironment in ",(0,a.jsx)(n.code,{children:"$BUILD_PREFIX"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"target_platform"}),": The platform on which the package will be installed. Defines the platform of\nthe ",(0,a.jsx)(n.code,{children:"host"})," environment in ",(0,a.jsx)(n.code,{children:"$PREFIX"}),". Defaults to the value of ",(0,a.jsx)(n.code,{children:"build_platform"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["To change the value of ",(0,a.jsx)(n.code,{children:"target_platform"})," and enable cross-compilation, you must use\nthe ",(0,a.jsx)(n.a,{href:"/docs/maintainer/conda_forge_yml#build-platform",children:"build_platform"})," mapping in ",(0,a.jsx)(n.code,{children:"conda-forge.yml"})," and then ",(0,a.jsx)(n.a,{href:"/docs/maintainer/updating_pkgs#dev-update-rerender",children:"rerender"})," the feedstock. This will generate the appropriate CI workflows and\nconda-build input metadata. See also ",(0,a.jsx)(n.a,{href:"/docs/maintainer/conda_forge_yml#test",children:"test"})," for how to skip the test phase when\ncross-compiling. Provided the requirements metadata and build scripts are written correctly, the\npackage should just work. However, in some cases, it'll need some adjustments; see examples below\nfor some common cases."]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"build_platform"})," and ",(0,a.jsx)(n.code,{children:"target_platform"})," variables are exposed as environment variables in\nthe build scripts (e.g. ",(0,a.jsx)(n.code,{children:"$build_platform"}),"), and also as Jinja variables in the ",(0,a.jsx)(n.code,{children:"meta.yaml"}),"\nselectors (e.g. ",(0,a.jsx)(n.code,{children:"# [build_platform != target_platform]"}),")."]})}),"\n",(0,a.jsxs)(n.p,{children:["In addition to these two variables, there are some more environment variables that are set by\nconda-forge's automation (e.g. ",(0,a.jsx)(n.code,{children:"conda-forge-ci-setup"}),", compiler activation packages, etc) that\ncan aid in cross-compilation setups:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CONDA_BUILD_CROSS_COMPILATION"}),": set to ",(0,a.jsx)(n.code,{children:"1"})," when ",(0,a.jsx)(n.code,{children:"build_platform"})," and ",(0,a.jsx)(n.code,{children:"target_platform"}),"\ndiffer."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CONDA_TOOLCHAIN_BUILD"}),": the autoconf triplet expected for build platform."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CONDA_TOOLCHAIN_HOST"}),": the autoconf triplet expected for host platform."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CMAKE_ARGS"}),": arguments needed to cross-compile with CMake. Pass it to ",(0,a.jsx)(n.code,{children:"cmake"})," in your build\nscript."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"MESON_ARGS"}),": arguments needed to cross-compile with Meson. Pass it to ",(0,a.jsx)(n.code,{children:"meson"})," in your build\nscript. Note a ",(0,a.jsx)(n.a,{href:"https://mesonbuild.com/Cross-compilation.html",children:"cross build definition file"})," is\nautomatically created for you too."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CC_FOR_BUILD"}),": C compilers targeting the build platform."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CXX_FOR_BUILD"}),": C++ compilers targeting the build platform."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"CROSSCOMPILING_EMULATOR"}),": Path to the ",(0,a.jsx)(n.code,{children:"qemu"})," binary for the host platform. Useful for running\ntests when cross-compiling."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This is all supported by two main conda-build features introduced in version 3:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["How ",(0,a.jsx)(n.a,{href:"https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#requirements-section",children:"requirements metadata"}),"\nis expressed in ",(0,a.jsx)(n.code,{children:"meta.yaml"}),", which distinguishes between ",(0,a.jsx)(n.code,{children:"build"})," and ",(0,a.jsx)(n.code,{children:"host"})," platforms."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"compiler()"})," Jinja function and underlying ",(0,a.jsx)(n.a,{href:"https://docs.conda.io/projects/conda-build/en/latest/resources/compiler-tools.html",children:"conventions for the compiler packages"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"placing-requirements-in-build-or-host"})}),"\n",(0,a.jsx)(n.h4,{id:"placing-requirements-in-build-or-host",children:"Placing requirements in build or host"}),"\n",(0,a.jsx)(n.p,{children:"The rule of the thumb is:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["If it needs to run during the build, it goes in ",(0,a.jsx)(n.code,{children:"build"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["If it needs to be available on the target host, it goes in ",(0,a.jsx)(n.code,{children:"host"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"If both conditions are true, it belongs in both."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["However, there are some exceptions to this rule; most notably Python cross-compilation\n(",(0,a.jsx)(n.a,{href:"#python-cross-compilation",children:"see below"}),")."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"cross-compilation-examples"})}),"\n",(0,a.jsx)(n.h4,{id:"cross-compilation-examples",children:"Cross-compilation examples"}),"\n",(0,a.jsx)(n.p,{children:"A package needs to make a few changes in their recipe to be compatible with cross-compilation. Here\nare a few examples."}),"\n",(0,a.jsx)(n.p,{children:"A simple C library using autotools for cross-compilation might look like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'requirements:\n  build:\n    - {{ compiler("c") }}\n    - make\n    - pkg-config\n    - gnuconfig\n'})}),"\n",(0,a.jsx)(n.p,{children:"In the build script, it would need to update the config files and guard any tests when\ncross-compiling:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Get an updated config.sub and config.guess\ncp $BUILD_PREFIX/share/gnuconfig/config.* .\n\n# Skip ``make check`` when cross-compiling\nif [[ "${CONDA_BUILD_CROSS_COMPILATION:-}" != "1" || "${CROSSCOMPILING_EMULATOR:-}" != "" ]]; then\n  make check\nfi\n'})}),"\n",(0,a.jsx)(n.p,{children:"A simple C++ library using CMake for cross-compilation might look like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'requirements:\n  build:\n    - {{ compiler("cxx") }}\n    - cmake\n    - make\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In the build script, it would need to update ",(0,a.jsx)(n.code,{children:"cmake"})," call and guard any tests when cross-compiling:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Pass ``CMAKE_ARGS`` to ``cmake``\ncmake ${CMAKE_ARGS} ..\n\n# Skip ``ctest`` when cross-compiling\nif [[ "${CONDA_BUILD_CROSS_COMPILATION:-}" != "1" || "${CROSSCOMPILING_EMULATOR:-}" != "" ]]; then\n  ctest\nfi\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Similarly, with Meson, the ",(0,a.jsx)(n.code,{children:"meta.yaml"})," needs:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'requirements:\n  build:\n    - {{ compiler("c") }}\n    - {{ compiler("cxx") }}\n    - meson\n    - make\n'})}),"\n",(0,a.jsxs)(n.p,{children:["And this in ",(0,a.jsx)(n.code,{children:"build.sh"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Pass ``MESON_ARGS`` to ``meson``\nmeson ${MESON_ARGS} builddir/\n"})}),"\n",(0,a.jsx)(n.p,{children:"A simple Python extension using Cython and NumPy's C API would look like so:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'requirements:\n  build:\n    - {{ compiler("c") }}\n    - cross-python_{{ target_platform }}    # [build_platform != target_platform]\n    - python                                # [build_platform != target_platform]\n    - cython                                # [build_platform != target_platform]\n    - numpy                                 # [build_platform != target_platform]\n  host:\n    - python\n    - pip\n    - cython\n    - numpy\n  run:\n    - python\n'})}),"\n",(0,a.jsxs)(n.p,{children:["For more details about numpy see the dedicated ",(0,a.jsx)(n.a,{href:"#building-against-numpy",children:"section"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["With MPI, openmpi is required for the build platform as the compiler wrappers are binaries, but mpich is not required as the compiler wrappers are scripts (see ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/mpi4py-feedstock/blob/743d379c4a04/recipe/meta.yaml#L37",children:"example"}),"):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'requirements:\n  build:\n    - {{ mpi }}                             # [build_platform != target_platform and mpi == "openmpi"]\n  host:\n    - {{ mpi }}\n  run:\n    - {{ mpi }}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In the build script, openmpi compiler wrappers can use host libraries by setting the environmental variable ",(0,a.jsx)(n.code,{children:"OPAL_PREFIX"})," to ",(0,a.jsx)(n.code,{children:"$PREFIX"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:'if [[ "$CONDA_BUILD_CROSS_COMPILATION" == "1" && "${mpi}" == "openmpi" ]]; then\n  export OPAL_PREFIX="$PREFIX"\nfi\n'})}),"\n",(0,a.jsxs)(n.p,{children:["There are more variations of this approach in the wild. So this is not meant to be exhaustive,\nbut merely to provide a starting point with some guidelines. Please look at ",(0,a.jsx)(n.a,{href:"https://github.com/search?q=org%3Aconda-forge+path%3Arecipe%2Fmeta.yaml+%22%5Bbuild_platform+%21%3D+target_platform%5D%22&type=code",children:"other recipes for more examples"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"finding-numpy-in-cross-compiled-python-packages-using-cmake",children:"Finding NumPy in cross-compiled Python packages using CMake"}),"\n",(0,a.jsx)(n.p,{children:"If you are building a Python extension via CMake with NumPy and you want it work in cross-compilation, you need to prepend to the CMake invocation in your build script the following lines:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:'Python_INCLUDE_DIR="$(python -c \'import sysconfig; print(sysconfig.get_path("include"))\')"\nPython_NumPy_INCLUDE_DIR="$(python -c \'import numpy;print(numpy.get_include())\')"\nCMAKE_ARGS="${CMAKE_ARGS} -DPython_EXECUTABLE:PATH=${PYTHON}"\nCMAKE_ARGS="${CMAKE_ARGS} -DPython_INCLUDE_DIR:PATH=${Python_INCLUDE_DIR}"\nCMAKE_ARGS="${CMAKE_ARGS} -DPython_NumPy_INCLUDE_DIR=${Python_NumPy_INCLUDE_DIR}"\nCMAKE_ARGS="${CMAKE_ARGS} -DPython3_EXECUTABLE:PATH=${PYTHON}"\nCMAKE_ARGS="${CMAKE_ARGS} -DPython3_INCLUDE_DIR:PATH=${Python_INCLUDE_DIR}"\nCMAKE_ARGS="${CMAKE_ARGS} -DPython3_NumPy_INCLUDE_DIR=${Python_NumPy_INCLUDE_DIR}"\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"python-cross-compilation"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"details-about-cross-compiled-python-packages"})}),"\n",(0,a.jsx)(n.h4,{id:"details-about-cross-compiled-python-packages",children:"Details about cross-compiled Python packages"}),"\n",(0,a.jsxs)(n.p,{children:["Cross-compiling Python packages is a bit more involved than other packages. The main pain point is\nthat we need an executable Python interpreter (i.e. ",(0,a.jsx)(n.code,{children:"python"})," in ",(0,a.jsx)(n.code,{children:"build"}),") that knows how to\nprovide accurate information about the target platform. Since this is not officially supported, a\nseries of workarounds are required to make it work. Refer to ",(0,a.jsx)(n.a,{href:"https://peps.python.org/pep-0720/",children:"PEP720"})," or ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge.github.io/issues/1841",children:"the discussion in this issue"})," for more information."]}),"\n",(0,a.jsxs)(n.p,{children:["In practical terms, for conda-forge, this results into two extra metadata bits that are needed in\n",(0,a.jsx)(n.code,{children:"meta.yaml"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Adding ",(0,a.jsx)(n.code,{children:"cross-python_{{ target_platform }}"})," in ",(0,a.jsx)(n.code,{children:"build"})," requirements, provided by the\n",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/cross-python-feedstock",children:"cross-python-feedstock"}),". This is a\nwrapper for the ",(0,a.jsx)(n.code,{children:"crossenv"})," Python interpreters with ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/cross-python-feedstock/blob/main/recipe/activate-cross-python.sh",children:"some activation logic that adjust some of\nthe crossenv workarounds"}),"\nso they work better with the conda-build setup."]}),"\n",(0,a.jsxs)(n.li,{children:["Copying some Python-related packages from ",(0,a.jsx)(n.code,{children:"host"})," to ",(0,a.jsx)(n.code,{children:"build"})," with a ",(0,a.jsx)(n.code,{children:"[build_platform != target_platform]"})," selector:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"python"})," itself, to support ",(0,a.jsx)(n.code,{children:"crossenv"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Non-pure Python packages (i.e. they ship compiled libraries) that need to be present while the\npackage is being built, like ",(0,a.jsx)(n.code,{children:"cython"})," and ",(0,a.jsx)(n.code,{children:"numpy"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["In the terms of the ",(0,a.jsx)(n.a,{href:"https://peps.python.org/pep-0720/",children:"PEP720"}),', the conda-forge setup\nimplements the "faking the target environment" approach. More specifically, this will result in the\nfollowing changes before the builds scripts run:']}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A modified ",(0,a.jsx)(n.code,{children:"crossenv"})," installation in ",(0,a.jsx)(n.code,{children:"$BUILD_PREFIX/venv"}),", mimicking the architecture of\n",(0,a.jsx)(n.code,{children:"$PREFIX"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Forwarder binaries in ",(0,a.jsx)(n.code,{children:"$BUILD_PREFIX/bin"})," that point to the ",(0,a.jsx)(n.code,{children:"crossenv"})," installation."]}),"\n",(0,a.jsxs)(n.li,{children:["Symlinks that expose the ",(0,a.jsx)(n.code,{children:"$BUILD_PREFIX"})," site-packages in the ",(0,a.jsx)(n.code,{children:"crossenv"})," installation, which\nis also included in ",(0,a.jsx)(n.code,{children:"$PYTHONPATH"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["A copy of all ",(0,a.jsx)(n.code,{children:"$PREFIX"})," site-packages to ",(0,a.jsx)(n.code,{children:"$BUILD_PREFIX"})," (except the compiled libraries)."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["All in all, this results in a setup where ",(0,a.jsx)(n.code,{children:"conda-build"})," can run a ",(0,a.jsx)(n.code,{children:"$BUILD_PREFIX"}),"-architecture\n",(0,a.jsx)(n.code,{children:"python"})," interpreter that can see the packages in ",(0,a.jsx)(n.code,{children:"$PREFIX"})," (with the compiled bits provided by\ntheir corresponding counterparts in ",(0,a.jsx)(n.code,{children:"$BUILD_PREFIX"}),") and sufficiently mimic that target\narchitecture."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"emulation"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"emulated-builds"})}),"\n",(0,a.jsx)(n.h3,{id:"emulated-builds",children:"Emulated builds"}),"\n",(0,a.jsxs)(n.p,{children:["When cross-compilation is not possible, one can resort to emulation. This is a technique that uses\na virtual machine (",(0,a.jsx)(n.a,{href:"https://www.qemu.org/",children:"QEMU"}),") to emulate the target platform, which has a\nsignificant overhead. However, ",(0,a.jsx)(n.code,{children:"conda-build"})," will see the target platform as native, so very\nlittle changes are usually needed in the recipe."]}),"\n",(0,a.jsxs)(n.p,{children:["To enable emulated builds, you must use the ",(0,a.jsx)(n.a,{href:"/docs/maintainer/conda_forge_yml#provider",children:"provider"})," mapping in ",(0,a.jsx)(n.code,{children:"conda-forge.yml"}),".\nThis key maps a ",(0,a.jsx)(n.code,{children:"build_platform"})," to a ",(0,a.jsx)(n.code,{children:"provider"})," that will be used to emulate the platform.\n",(0,a.jsx)(n.code,{children:"conda-smithy"})," will know how to detect whether the provider supports that platform natively or\nrequires emulation, and will adjust the appropriate CI steps to ensure that QEMU runs the process.\nEnsure changes are applied by ",(0,a.jsx)(n.a,{href:"/docs/maintainer/updating_pkgs#dev-update-rerender",children:"rerendering"})," the feedstock."]}),"\n",(0,a.jsx)(n.p,{children:"Note that only Linux architectures are currently supported via emulation."}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsx)(n.p,{children:"Emulated builds are very slow and incur an additional strain on conda-forge CI resources.\nWhenever possible, please consider cross-compilation instead. Only use emulated builds as a last\nresort."})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"emulation-examples"})}),"\n",(0,a.jsx)(n.h4,{id:"emulation-examples",children:"Emulation examples"}),"\n",(0,a.jsxs)(n.p,{children:["Configure ",(0,a.jsx)(n.code,{children:"conda-forge.yml"})," to emulate ",(0,a.jsx)(n.code,{children:"linux-ppc64le"}),", but use native runners for ",(0,a.jsx)(n.code,{children:"linux-64"}),"\nand ",(0,a.jsx)(n.code,{children:"linux-aarch64"}),". This works because ",(0,a.jsx)(n.code,{children:"linux-ppc64le"})," is not natively supported by Azure, so\n",(0,a.jsx)(n.code,{children:"conda-smithy"})," will add QEMU steps to emulate it. However, ",(0,a.jsx)(n.code,{children:"linux-64"})," and ",(0,a.jsx)(n.code,{children:"linux-aarch64"})," are\nnatively supported by Azure and Travis CI, respectively, so no emulation is needed."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"provider:\n  linux_aarch64: travis\n  linux_ppc64le: azure\n  linux_64: azure\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"rust-nightly"})}),"\n",(0,a.jsx)(n.h3,{id:"rust-nightly",children:"Rust Nightly"}),"\n",(0,a.jsxs)(n.p,{children:["Many rust packages rely on nightly versions of the rust compiler. Given this fast release cadence, conda-forge does not yet pull each release.\nInstead, rust nightly versions are pulled into the ",(0,a.jsx)(n.code,{children:"dev"})," branch of the ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/rust-feedstock/tree/dev",children:"conda-forge/rust-feedstock"})," on an as-needed basis.\nFor a new version, please file an issue on that feedstock."]}),"\n",(0,a.jsxs)(n.p,{children:["To enable the rust nightly compiler in your feedstock, follow the section above and then add the ",(0,a.jsx)(n.code,{children:"rust_dev"})," channel in the ",(0,a.jsx)(n.code,{children:"conda_build_config.yaml"})," file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"channel_sources:\n  - conda-forge/label/rust_dev,conda-forge\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"cdt-packages"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"core-dependency-tree-packages-cdts"})}),"\n",(0,a.jsx)(n.h3,{id:"core-dependency-tree-packages-cdts",children:"Core Dependency Tree Packages (CDTs)"}),"\n",(0,a.jsxs)(n.p,{children:["Dependencies outside of the ",(0,a.jsx)(n.code,{children:"conda-forge"})," channel should be avoided (see ",(0,a.jsx)(n.a,{href:"/docs/maintainer/adding_pkgs#no-external-deps",children:"Avoid external dependencies"}),").\nHowever, there are a few exceptions:"]}),"\n",(0,a.jsxs)(n.p,{children:["Some dependencies are so close to the system that they are not packaged with conda-forge.\nThese dependencies have to be satisfied with ",(0,a.jsx)(n.em,{children:"Core Dependency Tree"})," (CDT) packages."]}),"\n",(0,a.jsxs)(n.p,{children:["A CDT package consists of repackaged CentOS/AlmaLinux binaries from the appropriate version,\neither 7, 8 or 9 depending on user choice and platform. We manage the build of CDT\npackages using a centralized repo, ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/cdt-builds",children:"conda-forge/cdt-builds"}),",\nas opposed to generating feedstocks for them. (Note that historically we did use feedstocks but this\npractice has been deprecated). To add a new CDT, make a PR on the\n",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/cdt-builds",children:"conda-forge/cdt-builds"})," repo."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"why-are-cdts-bad"})}),"\n",(0,a.jsx)(n.h4,{id:"why-are-cdts-bad",children:"Why are CDTs bad?"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"CDTs repackage old versions of the library."}),"\n",(0,a.jsx)(n.li,{children:"As a result, newer functionality in the packages won't be used by downstream conda packages\nwhich check for the version of the library being built against.\nFor example: OpenGL functionality from the CentOS 7 packaged library is available, but\nany newer functionality cannot be used."}),"\n",(0,a.jsxs)(n.li,{children:["We have no guarantees that the version provided by the user's system is compatible.\nWe only have the ",(0,a.jsx)(n.code,{children:"__glibc>=2.17"})," constraint and we assume that CentOS 7's\nlower bound of GLIBC and its corresponding lower bound of the CDT are equivalent."]}),"\n",(0,a.jsx)(n.li,{children:"We have no guarantee that the library is provided by the user's system at all."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"when-should-cdts-be-used"})}),"\n",(0,a.jsx)(n.h4,{id:"when-should-cdts-be-used",children:"When should CDTs be used?"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["When there are system specific configurations are used by the library.\nSome examples include:\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["linux-pam: This is a library that allows pluggable authentication modules and the\nconfiguration files for these modules usually live in ",(0,a.jsx)(n.code,{children:"/etc/pam.d"}),". The issue is that\nthe pluggable modules live in a distro specific location. For example:\n",(0,a.jsx)(n.code,{children:"/usr/lib/x86_64-linux-gnu/security/"}),". The default modules are built into the\nconda package in ",(0,a.jsx)(n.code,{children:"$CONDA_PREFIX/lib/security"}),", but custom ones for\nsystem-wide configuration are installed into ",(0,a.jsx)(n.code,{children:"/usr/lib/x86_64-linux-gnu/security/"}),".\nSo, we would need to patch the module to look into both, but the directory\n",(0,a.jsx)(n.code,{children:"/usr/lib/x86_64-linux-gnu/security/"})," is distro specific and will be hard to\ndetect."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["When a conda packaged library will not work properly.\nFor example: a new ",(0,a.jsx)(n.code,{children:"glibc"})," package means we would have to edit the elf interpreter of\nall the conda package binaries."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"what-s-are-some-good-examples"})}),"\n",(0,a.jsx)(n.h4,{id:"whats-are-some-good-examples",children:"What's are some good examples?"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["The OpenCL loader (",(0,a.jsx)(n.code,{children:"ocl-icd"})," together with ",(0,a.jsx)(n.code,{children:"ocl-icd-system"}),") provides an OpenCL\nloading library. The loader will look at OpenCL implementations given in\n",(0,a.jsx)(n.code,{children:"$CONDA_PREFIX/etc/OpenCL/vendors"}),".\nFor example: Pocl is a conda packaged implementation that runs OpenCL on the CPU. Vendor\nspecific implementations like the NVIDIA OpenCL or ROCm OpenCL are not conda packaged, so we\nhave to rely on the system. By installing ",(0,a.jsx)(n.code,{children:"ocl-icd-system"})," we enable the loader to look at\nthe configuration in ",(0,a.jsx)(n.code,{children:"/etc/OpenCL/vendors"}),", which is the configuration directory for all linux\ndistributions. This gives us the best of both worlds. You don't need a system level package to\nrun OpenCL because we have a conda packaged installation, but if there is a system wide\nimplementation that is accelerated by specific hardware, we can use those."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"libgl"})}),"\n",(0,a.jsx)(n.h3,{id:"libgl",children:"libGL"}),"\n",(0,a.jsxs)(n.p,{children:["Note that packages dependent on OpenGL and/or libGL should no longer use CDTs. Instead, use the host dependency ",(0,a.jsx)(n.code,{children:"libgl-devel"})," from the ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/libglvnd-feedstock",children:"libglvnd-feedstock"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"requirements:\n  host:\n    - libgl-devel  # [linux]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Other OpenGL API variants such as ",(0,a.jsx)(n.code,{children:"libegl-devel"}),", ",(0,a.jsx)(n.code,{children:"libgles-devel"}),", ",(0,a.jsx)(n.code,{children:"libglx-devel"}),", and ",(0,a.jsx)(n.code,{children:"libopengl-devel"})," are also available, and will automatically add non-development ",(0,a.jsx)(n.code,{children:"run_exports"})," dependencies."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"linking-numpy"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"building-against-numpy"})}),"\n",(0,a.jsx)(n.h3,{id:"building-against-numpy",children:"Building Against NumPy"}),"\n",(0,a.jsxs)(n.p,{children:["Finding ",(0,a.jsx)(n.code,{children:"numpy.get_include()"})," in ",(0,a.jsx)(n.code,{children:"setup.py"})," or ",(0,a.jsx)(n.code,{children:"cimport"})," statements in ",(0,a.jsx)(n.code,{children:".pyx"})," or ",(0,a.jsx)(n.code,{children:".pyd"})," files are a telltale sign that the package links against NumPy."]}),"\n",(0,a.jsxs)(n.p,{children:["Adding ",(0,a.jsx)(n.code,{children:"numpy"})," in the ",(0,a.jsx)(n.code,{children:"host:"})," section is sufficient to have a compatible NumPy version at run time:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"host:\n  - numpy\n"})}),"\n",(0,a.jsx)(n.p,{children:"At the time of writing (June 2025), the above is equivalent to the following:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="recipe/conda_build_config.yaml"',children:"host:\n  - numpy 2.*\n"})}),"\n",(0,a.jsxs)(n.p,{children:["See the pinning repository for\n",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge-pinning-feedstock/blob/main/recipe/conda_build_config.yaml",children:"what the pinning corresponds to"})," at any given time."]}),"\n",(0,a.jsx)(n.p,{children:"In either case, the actual runtime requirements are determined through numpy's\nrun-export, which is:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:">=1.2x,<2"})," if you're building against numpy 1.2x"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:">=1.19,<3"})," if you're building against numpy 2.0"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:">=1.21,<3"})," if you're building against numpy 2.1 or 2.2"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:">=1.23,<3"})," if you're building against numpy 2.3"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["If the package you are building has a higher minimum requirement for numpy, please add this under ",(0,a.jsx)(n.code,{children:"run"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"host:\n  # leave this unpinned!\n  - numpy\nrun:\n  - numpy >={{ the_lower_bound_your_package_needs }}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"jupyterlab-extension"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"jupyterlab-extensions"})}),"\n",(0,a.jsx)(n.h3,{id:"jupyterlab-extensions",children:"JupyterLab Extensions"}),"\n",(0,a.jsxs)(n.p,{children:["A typical JupyterLab extension has both Python and JavaScript components.\nThese should be packaged together, to prevent node from being needing to\ngrab the JavaScript side of the package on the user's machine. To package\nan extension, the build should have the following ",(0,a.jsx)(n.code,{children:"meta.yaml"})," snippet:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"build:\n  noarch: python\n\n\nrequirements:\n  host:\n    - python {{ python_min }}.*\n    - nodejs\n    - pip\n  run:\n    - python >={{ python_min }}\n    - nodejs\n    - jupyterlab >=2\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Please use the following ",(0,a.jsx)(n.code,{children:"build.sh"})," script in your recipe:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"#!/usr/bin/env bash\nset -ex\n\n$PYTHON -m pip install . -vv\nnpm pack ${PKG_NAME}@${PKG_VERSION}\nmkdir -p ${PREFIX}/share/jupyter/lab/extensions/js\ncp ${PKG_NAME}-${PKG_VERSION}.tgz ${PREFIX}/share/jupyter/lab/extensions/js\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Since this is a noarch recipe, the build script only needs to run on ",(0,a.jsx)(n.code,{children:"linux-64"}),".\nAlso note that we do not need to run ",(0,a.jsx)(n.code,{children:"jupyter labextension install"})," or\n",(0,a.jsx)(n.code,{children:"jupyter lab build"})," as part of the package build or in any post-link scripts.\nThis is because JupyterLab will run the build step itself when it is next run.\nThe ",(0,a.jsx)(n.code,{children:"${PREFIX}/share/jupyter/lab/extensions/js"})," directory which JupyterLab\nknows to build from when performing this build step."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"message-passing-interface-mpi"})}),"\n",(0,a.jsx)(n.h3,{id:"message-passing-interface-mpi",children:"Message passing interface (MPI)"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["This section originates from Min's notes: ",(0,a.jsx)(n.a,{href:"https://hackmd.io/ry4uI0thTs2q_b4mAQd_qg",children:"https://hackmd.io/ry4uI0thTs2q_b4mAQd_qg"})]})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"mpi-variants-in-conda-forge"})}),"\n",(0,a.jsx)(n.h4,{id:"mpi-variants-in-conda-forge",children:"MPI Variants in conda-forge"}),"\n",(0,a.jsx)(n.p,{children:"How are MPI variants best handled in conda-forge?"}),"\n",(0,a.jsx)(n.p,{children:"There are a few broad cases:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"package requires a specific MPI provider (easy!)"}),"\n",(0,a.jsx)(n.li,{children:"the package works with any MPI provider (e.g. mpich, openmpi)"}),"\n",(0,a.jsx)(n.li,{children:"the package works with/without MPI"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Note that sometimes users want to use packages in conda-forge built against\nour MPI libraries but linked to external MPI libraries at runtime. If you are interested\nin this procedure, see ",(0,a.jsx)(n.a,{href:"/docs/user/tipsandtricks#using-external-message-passing-interface-mpi-libraries",children:"Using External Message Passing Interface (MPI) Libraries"}),"\nfor details."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"building-mpi-variants"})}),"\n",(0,a.jsx)(n.h4,{id:"building-mpi-variants",children:"Building MPI variants"}),"\n",(0,a.jsx)(n.p,{children:"In conda_build_config.yaml:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"mpi:\n  - mpich\n  - openmpi\n"})}),"\n",(0,a.jsx)(n.p,{children:"In meta.yaml:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"requirements:\n  host:\n    - {{ mpi }}\n"})}),"\n",(0,a.jsx)(n.p,{children:"And rerender with:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"conda-smithy rerender -c auto\n"})}),"\n",(0,a.jsx)(n.p,{children:"to produce the build matrices."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"including-a-no-mpi-build"})}),"\n",(0,a.jsx)(n.h4,{id:"including-a-no-mpi-build",children:"Including a no-mpi build"}),"\n",(0,a.jsx)(n.p,{children:"Some packages (e.g. hdf5) may want a no-mpi build, in addition to the mpi builds.\nTo do this, add nompi to the mpi matrix:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"mpi:\n  - nompi\n  - mpich\n  - openmpi\n"})}),"\n",(0,a.jsx)(n.p,{children:"and apply the appropriate conditionals in your build:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"requirements:\n  host:\n    - {{ mpi }}  # [mpi != 'nompi']\n  run:\n    - {{ mpi }}  # [mpi != 'nompi']\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"preferring-a-provider-usually-nompi"})}),"\n",(0,a.jsx)(n.h4,{id:"preferring-a-provider-usually-nompi",children:"Preferring a provider (usually nompi)"}),"\n",(0,a.jsxs)(n.p,{children:["Up to here, mpi providers have no explicit preference. When choosing an MPI provider, the mutual exclusivity of\nthe ",(0,a.jsx)(n.code,{children:"mpi"})," metapackage allows picking between mpi providers by installing an mpi provider, e.g."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"conda install mpich ptscotch\n"})}),"\n",(0,a.jsx)(n.p,{children:"or"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"conda install openmpi ptscotch\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This doesn't extend to ",(0,a.jsx)(n.code,{children:"nompi"}),", because there is no ",(0,a.jsx)(n.code,{children:"nompi"})," variant of the mpi metapackage. And there probably\nshouldn't be, because some packages built with mpi don't preclude other packages in the env that ",(0,a.jsx)(n.em,{children:"may"})," have an mpi variant\nfrom using the no-mpi variant of the library (e.g. for a long time, fenics used mpi with no-mpi hdf5 since there was no\nparallel hdf5 yet. This works fine, though some features may not be available)."]}),"\n",(0,a.jsxs)(n.p,{children:["Typically, if there is a preference it will be for the serial build, such that installers/requirers of the package\nonly get the mpi build if explicitly requested. We use a higher build number for the ",(0,a.jsx)(n.code,{children:"nompi"})," variant in this case."]}),"\n",(0,a.jsx)(n.p,{children:"Here is an example build section:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'{% if mpi == \'nompi\' %}\n# prioritize nompi variant via build number\n{% set build = build + 100 %}\n{% endif %}\nbuild:\n  number: {{ build }}\n\n  # add build string so packages can depend on\n  # mpi or nompi variants explicitly:\n  # `pkg * mpi_mpich_*` for mpich\n  # `pkg * mpi_*` for any mpi\n  # `pkg * nompi_*` for no mpi\n\n  {% if mpi != \'nompi\' %}\n  {% set mpi_prefix = "mpi_" + mpi %}\n  {% else %}\n  {% set mpi_prefix = "nompi" %}\n  {% endif %}\n  string: "{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ build }}"\n'})}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"{{ PKG_HASH }}"})," avoids build string collisions on ",(0,a.jsx)(n.em,{children:"most"})," variants,\nbut not on packages that are excluded from the default build string,\ne.g. Python itself. If the package is built for multiple Python versions, use:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'string: "{{ mpi_prefix }}_py{{ py }}h{{ PKG_HASH }}_{{ build }}"\n'})}),(0,a.jsxs)(n.p,{children:["as seen in ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/h5py-feedstock/pull/49/commits/b08ee9307d16864e775f1a7f9dd10f25c83b5974",children:"mpi4py"})]})]}),"\n",(0,a.jsx)(n.p,{children:"This build section creates the following packages:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"pkg-x.y.z-mpi_mpich_h12345_0"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"pkg-x.y.z-mpi_openmpi_h23456_0"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"pkg-x.y.z-nompi_h34567_100"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Which has the following consequences:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"nompi"})," variant is preferred, and will be installed by default unless an mpi variant is explicitly requested."]}),"\n",(0,a.jsxs)(n.li,{children:["mpi variants can be explicitly requested with ",(0,a.jsx)(n.code,{children:"pkg=*=mpi_{{ mpi }}_*"})]}),"\n",(0,a.jsxs)(n.li,{children:["any mpi variant, ignoring provider, can be requested with ",(0,a.jsx)(n.code,{children:"pkg=*=mpi_*"})]}),"\n",(0,a.jsxs)(n.li,{children:["nompi variant can be explicitly requested with ",(0,a.jsx)(n.code,{children:"pkg=*=nompi_*"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["If building with this library creates a runtime dependency on the variant, the build string pinning can be added to ",(0,a.jsx)(n.code,{children:"run_exports"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"For example, if building against the nompi variant will work with any installed version, but building with a\ngiven mpi provider requires running with that mpi:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"build:\n  ...\n  {% if mpi != 'nompi' %}\n  run_exports:\n    - {{ name }} * {{ mpi_prefix }}_*\n  {% endif %}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Remove the ",(0,a.jsx)(n.code,{children:"if mpi..."})," condition if all variants should create a strict runtime dependency based on the variant\nchosen at build time (i.e. if the nompi build cannot be run against the mpich build)."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"complete-example"})}),"\n",(0,a.jsx)(n.h4,{id:"complete-example",children:"Complete example"}),"\n",(0,a.jsx)(n.p,{children:"Combining all of the above, here is a complete recipe, with:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"nompi, mpich, openmpi variants"}),"\n",(0,a.jsx)(n.li,{children:"run-exports to apply mpi choice made at build time to runtime where nompi builds can be run with mpi, but not vice versa."}),"\n",(0,a.jsx)(n.li,{children:"nompi variant is preferred by default"}),"\n",(0,a.jsx)(n.li,{children:"only build nompi on Windows"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["This matches what is done in ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/hdf5-feedstock/pull/90",children:"hdf5"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# conda_build_config.yaml\nmpi:\n  - nompi\n  - mpich  # [not win]\n  - openmpi  # [not win]\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# meta.yaml\n{% set name = 'pkg' %}\n{% set build = 0 %}\n\n# ensure mpi is defined (needed for conda-smithy recipe-lint)\n{% set mpi = mpi or 'nompi' %}\n\n{% if mpi == 'nompi' %}\n# prioritize nompi variant via build number\n{% set build = build + 100 %}\n{% endif %}\n\nbuild:\n  number: {{ build }}\n\n  # add build string so packages can depend on\n  # mpi or nompi variants explicitly:\n  # `pkg * mpi_mpich_*` for mpich\n  # `pkg * mpi_*` for any mpi\n  # `pkg * nompi_*` for no mpi\n\n  {% if mpi != 'nompi' %}\n  {% set mpi_prefix = \"mpi_\" + mpi %}\n  {% else %}\n  {% set mpi_prefix = \"nompi\" %}\n  {% endif %}\n  string: \"{{ mpi_prefix }}_h{{ PKG_HASH }}_{{ build }}\"\n\n  {% if mpi != 'nompi' %}\n  run_exports:\n    - {{ name }} * {{ mpi_prefix }}_*\n  {% endif %}\n\nrequirements:\n  host:\n    - {{ mpi }}  # [mpi != 'nompi']\n  run:\n    - {{ mpi }}  # [mpi != 'nompi']\n"})}),"\n",(0,a.jsx)(n.p,{children:"And then a package that depends on this one can explicitly pick the appropriate mpi builds:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# meta.yaml\n\nrequirements:\n  host:\n    - {{ mpi }}  # [mpi != 'nompi']\n    - pkg\n    - pkg * mpi_{{ mpi }}_*  # [mpi != 'nompi']\n  run:\n    - {{ mpi }}  # [mpi != 'nompi']\n    - pkg * mpi_{{ mpi }}_*  # [mpi != 'nompi']\n"})}),"\n",(0,a.jsxs)(n.p,{children:["mpi-metapackage exclusivity allows ",(0,a.jsx)(n.code,{children:"mpi_*"})," to resolve the same as ",(0,a.jsx)(n.code,{children:"mpi_{{ mpi }}_*"}),"\nif ",(0,a.jsx)(n.code,{children:"{{ mpi }}"})," is also a direct dependency, though it's probably nicer to be explicit."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"just-mpi-example"})}),"\n",(0,a.jsx)(n.h4,{id:"just-mpi-example",children:"Just mpi example"}),"\n",(0,a.jsxs)(n.p,{children:["Without a preferred ",(0,a.jsx)(n.code,{children:"nompi"})," variant, recipes that require mpi are much simpler. This is all that is needed:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# conda_build_config.yaml\nmpi:\n  - mpich\n  - openmpi\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# meta.yaml\nrequirements:\n  host:\n    - {{ mpi }}\n  run:\n    - {{ mpi }}\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"mpi-compiler-packages"})}),"\n",(0,a.jsx)(n.h4,{id:"mpi-compiler-packages",children:"MPI Compiler Packages"}),"\n",(0,a.jsxs)(n.p,{children:["Do not use the ",(0,a.jsx)(n.code,{children:"[openmpi,mpich]-[mpicc,mpicxx,mpifort]"})," metapackages in the ",(0,a.jsx)(n.code,{children:"requirements/build"})," section\nof a recipe; the MPI compiler wrappers are included in the main ",(0,a.jsx)(n.code,{children:"openmpi"}),"/",(0,a.jsx)(n.code,{children:"mpich"})," packages.\nAs shown above, just add ",(0,a.jsx)(n.code,{children:"openmpi"}),"/",(0,a.jsx)(n.code,{children:"mpich"})," to the ",(0,a.jsx)(n.code,{children:"requirements/host"})," section and use compiler directives for the\ncorresponding compilers in ",(0,a.jsx)(n.code,{children:"requirements/build"})," as normal."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"openmp"})}),"\n",(0,a.jsx)(n.h3,{id:"openmp",children:"OpenMP"}),"\n",(0,a.jsxs)(n.p,{children:["You can enable OpenMP on macOS by adding the ",(0,a.jsx)(n.code,{children:"llvm-openmp"})," package to the ",(0,a.jsx)(n.code,{children:"build"})," section of the ",(0,a.jsx)(n.code,{children:"meta.yaml"}),".\nFor Linux OpenMP support is on by default, however it's better to explicitly depend on the libgomp package which is the OpenMP\nimplementation from the GNU project."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# meta.yaml\nrequirements:\n  build:\n    - llvm-openmp  # [osx]\n    - libgomp      # [linux]\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"switching-openmp-implementation"})}),"\n",(0,a.jsx)(n.h4,{id:"switching-openmp-implementation",children:"Switching OpenMP implementation"}),"\n",(0,a.jsxs)(n.p,{children:["On macOS, only LLVM's OpenMP implementation ",(0,a.jsx)(n.code,{children:"llvm-openmp"})," is supported. This implementation is used even in Fortran code compiled\nusing GNU's gfortran."]}),"\n",(0,a.jsxs)(n.p,{children:["On Linux (except aarch64), packages are linked against GNU's ",(0,a.jsx)(n.code,{children:"libgomp.so.1"}),", but the OpenMP library at install time can be\nswitched from GNU to LLVM by doing the following."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell-session",children:"conda install _openmp_mutex=*=*_llvm\n"})}),"\n",(0,a.jsx)(n.p,{children:"OpenMP library can be switched back to GNU's libgomp by doing the following."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell-session",children:"conda install _openmp_mutex=*=*_gnu\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsxs)(n.p,{children:["OpenMP library switching is possible because LLVM's implementation has the symbol's from GNU in addition to the LLVM\nones (originally from Intel). An object file generated by ",(0,a.jsx)(n.code,{children:"gcc"}),", ",(0,a.jsx)(n.code,{children:"g++"})," or ",(0,a.jsx)(n.code,{children:"gfortran"})," will have GNU's symbols and\ntherefore the underlying library can be switched.\nHowever, an object file generated by ",(0,a.jsx)(n.code,{children:"clang"})," or ",(0,a.jsx)(n.code,{children:"clang++"})," will have LLVM's symbols and therefore the underlying\nOpenMP library cannot be switched to GNU's library."]}),(0,a.jsxs)(n.p,{children:["One reason you may wish to switch to LLVM is because the implementation is fork safe. One reason to keep using the\nGNU implementation is that the OpenMP target offloading symbols in ",(0,a.jsx)(n.code,{children:"libgomp"})," like ",(0,a.jsx)(n.code,{children:"GOMP_target"})," are empty stubs\nin LLVM and therefore does not work."]})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"yum-deps"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"yum-requirements-txt"})}),"\n",(0,a.jsx)(n.h3,{id:"yum_requirementstxt",children:"yum_requirements.txt"}),"\n",(0,a.jsxs)(n.p,{children:["Dependencies can be installed into the build container with ",(0,a.jsx)(n.code,{children:"yum"}),", by listing package names line by line in a file\nnamed ",(0,a.jsx)(n.code,{children:"yum_requirements.txt"})," in the ",(0,a.jsx)(n.code,{children:"recipe"})," directory of a feedstock."]}),"\n",(0,a.jsx)(n.p,{children:"There are only very few situations where dependencies installed by yum are acceptable. These cases include"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["satisfying the requirements of ",(0,a.jsx)(n.a,{href:"/docs/glossary#cdt",children:"CDT"})," packages during test phase"]}),"\n",(0,a.jsx)(n.li,{children:"installing packages that are only required for testing"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["After changing ",(0,a.jsx)(n.code,{children:"yum_requirements.txt"}),", ",(0,a.jsx)(n.a,{href:"/docs/maintainer/updating_pkgs#dev-update-rerender",children:"rerender"})," to update the configuration."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"knowledge-blas"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"blas"})}),"\n",(0,a.jsx)(n.h3,{id:"blas",children:"BLAS"}),"\n",(0,a.jsx)(n.p,{children:"If a package needs one of BLAS, CBLAS, LAPACK, LAPACKE, use the following in the\nhost of the recipe,"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"requirements:\n  host:\n    - libblas\n    - libcblas\n    - liblapack\n    - liblapacke\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.p,{children:"You should specify only the libraries that the package needs. (i.e. if the package\ndoesn't need LAPACK, remove liblapack and liblapacke)"}),(0,a.jsx)(n.p,{children:"At recipe build time, above requirements would download the NETLIB's reference\nimplementations and build your recipe against those.\nAt runtime, by default the following packages will be used."})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"- openblas   # [not win]\n- mkl        # [win]\n"})}),"\n",(0,a.jsx)(n.p,{children:"If a package needs a specific implementation's internal API for more control you can have,"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'requirements:\n  host:\n    # Keep mkl-devel here for pinning\n    - mkl-devel         {{ blas_impl == "mkl" }}\n    - {{ blas_impl }}   {{ blas_impl != "mkl" }}\n  run:\n    - libblas * *{{ blas_impl }}\n    - {{ blas_impl }}\n'})}),"\n",(0,a.jsx)(n.p,{children:"This would give you a matrix builds for different blas implementations. If you only want to support\na specific blas implementation,"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"requirements:\n  host:\n    - openblas\n  run:\n    - libblas * *openblas\n    - openblas\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"blas_*"})," features should not be used anymore."]})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"switching-blas-implementation"})}),"\n",(0,a.jsx)(n.h4,{id:"switching-blas-implementation",children:"Switching BLAS implementation"}),"\n",(0,a.jsx)(n.p,{children:"You can switch your BLAS implementation by doing,"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'conda install "libblas=*=*mkl"\nconda install "libblas=*=*openblas"\nconda install "libblas=*=*blis"\nconda install "libblas=*=*accelerate"\nconda install "libblas=*=*netlib"\n'})}),"\n",(0,a.jsx)(n.p,{children:"This would change the BLAS implementation without changing the conda packages depending\non BLAS."}),"\n",(0,a.jsx)(n.p,{children:"The following legacy commands are also supported as well."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'conda install "blas=*=mkl"\nconda install "blas=*=openblas"\nconda install "blas=*=blis"\nconda install "blas=*=accelerate"\nconda install "blas=*=netlib"\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["If you want to commit to a specific blas implementation, you can prevent conda from switching back by pinning\nthe blas implementation in your environment. To commit to mkl, add ",(0,a.jsx)(n.code,{children:"blas=*=mkl"})," to\n",(0,a.jsx)(n.code,{children:"<conda-root>/envs/<env-name>/conda-meta/pinned"}),", as described in the\n",(0,a.jsx)(n.a,{href:"https://docs.conda.io/projects/conda/en/stable/user-guide/tasks/manage-pkgs.html#preventing-packages-from-updating-pinning",children:"conda-docs"}),"."]})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"how-it-works"})}),"\n",(0,a.jsx)(n.h4,{id:"how-it-works",children:"How it works"}),"\n",(0,a.jsxs)(n.p,{children:["At recipe build time, the netlib packages are used. This means that the downstream package will\nlink to ",(0,a.jsx)(n.code,{children:"libblas.so.3"})," in the ",(0,a.jsx)(n.code,{children:"libblas=*=*netlib"})," and will use only the reference\nimplementation's symbols."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"libblas"})," and ",(0,a.jsx)(n.code,{children:"libcblas"})," versioning is based on the Reference LAPACK versioning which at the\ntime of writing is ",(0,a.jsx)(n.code,{children:"3.8.0"}),". Since the BLAS API is stable, a downstream package will only pin to\n",(0,a.jsx)(n.code,{children:"3.*"})," of ",(0,a.jsx)(n.code,{children:"libblas"})," and ",(0,a.jsx)(n.code,{children:"libcblas"}),". On the other hand, ",(0,a.jsx)(n.code,{children:"liblapack"})," and ",(0,a.jsx)(n.code,{children:"liblapacke"})," pins to\n",(0,a.jsx)(n.code,{children:"3.8.*"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["In addition to the above netlib package, there are other variants like ",(0,a.jsx)(n.code,{children:"libblas=*=*openblas"}),",\nwhich has ",(0,a.jsx)(n.code,{children:"openblas"})," as a dependency and has a symlink from ",(0,a.jsx)(n.code,{children:"libblas.so.3"})," to ",(0,a.jsx)(n.code,{children:"libopenblas.so"}),".\n",(0,a.jsx)(n.code,{children:"libblas=3.8.0=*openblas"})," pins the ",(0,a.jsx)(n.code,{children:"openblas"})," dependency to a version that is known to support the\nBLAS ",(0,a.jsx)(n.code,{children:"3.8.0"})," API. This means that, at install time, the user can select what BLAS implementation\nthey like without any knowledge of the version of the BLAS implementation needed."]}),"\n",(0,a.jsx)(n.h3,{id:"microarch",children:"Microarchitecture-optimized builds"}),"\n",(0,a.jsxs)(n.p,{children:["conda ",(0,a.jsx)(n.a,{href:"/docs/glossary#virtual-package",children:"virtual packages"})," include ",(0,a.jsx)(n.code,{children:"__archspec"}),", which expose the processor architecture to the solver. However, ",(0,a.jsx)(n.code,{children:"__archspec"})," should not be used directly in recipes; instead, users should rely on the ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/microarch-level-feedstock",children:(0,a.jsx)(n.code,{children:"microarch-level"})})," helper packages (contributed in ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/staged-recipes/pull/24306",children:"staged-recipes#24306"}),")."]}),"\n",(0,a.jsx)(n.p,{children:"Before learning how to use it, please read these considerations:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Adding microarchitecture variants can result in too many entries in the build matrix. Do not overuse it."}),"\n",(0,a.jsx)(n.li,{children:"These optimized builds should only be used when the performance improvements are significant."}),"\n",(0,a.jsx)(n.li,{children:"Preferably, the project should rely on runtime dispatch for arch-specific optimizations."}),"\n",(0,a.jsx)(n.li,{children:"If the package is already too large, consider using smaller outputs for the arch-optimized variants."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"To implement microarchitecture-optimized builds in your feedstock, you'll end up with something like:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="recipe/conda_build_config.yaml"',children:"microarch_level:\n  - 1\n  - 3  # [unix and x86_64]\n  - 4  # [unix and x86_64]\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="recipe/meta.yaml"',children:"# ...\n{% set build = 0 %}\n\nbuild:\n  number: {{ build }}          # [not (unix and x86_64)]\n  number: {{ build + 100 }}    # [unix and x86_64 and microarch_level == 1]\n  number: {{ build + 300 }}    # [unix and x86_64 and microarch_level == 3]\n  number: {{ build + 400 }}    # [unix and x86_64 and microarch_level == 4]\n\nrequirements:\n  build:\n    - x86_64-microarch-level {{ microarch_level }}  # [unix and x86_64]\n    - {{ compiler('c') }}\n    # ...\n# ...\n"})}),"\n",(0,a.jsx)(n.admonition,{title:"Prioritize your preferred microarchitecture",type:"note",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"run_exports"})," metadata is only set up with lower bounds to allow in-CI testing.\nThis means that ",(0,a.jsx)(n.code,{children:"level=2"})," package can be installed in a ",(0,a.jsx)(n.code,{children:"level=3"})," machine. Make sure\nto assign a higher build number to the preferred microarchitecture (usually the highest level)."]})}),"\n",(0,a.jsxs)(n.p,{children:["That's it! The activation scripts behind the ",(0,a.jsx)(n.code,{children:"microarch-level"})," packages are already injecting the necessary compiler flags for you. Since they also have ",(0,a.jsx)(n.code,{children:"run_exports"})," entries, your\npackage will have the necessary runtime requirements to ensure the most adequate variant gets installed. Refer to ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/staged-recipes/pull/24306#issuecomment-1800095471",children:"this comment"})," and the ",(0,a.jsxs)(n.a,{href:"https://github.com/conda-forge/microarch-level-feedstock",children:[(0,a.jsx)(n.code,{children:"microarch-level-feedstock"})," README"]})," for more information."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"knowledge-mpl"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"matplotlib"})}),"\n",(0,a.jsx)(n.h3,{id:"matplotlib",children:"Matplotlib"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"matplotlib"})," on conda-forge comes in two parts. The core library is in ",(0,a.jsx)(n.code,{children:"matplotlib-base"}),". The\nactual ",(0,a.jsx)(n.code,{children:"matplotlib"})," package is this core library plus ",(0,a.jsx)(n.code,{children:"pyside6"}),". Most, if not all, packages that have\ndependence at runtime on ",(0,a.jsx)(n.code,{children:"matplotlib"})," should list this dependence as ",(0,a.jsx)(n.code,{children:"matplotlib-base"})," unless they\nexplicitly need ",(0,a.jsx)(n.code,{children:"pyside6"}),". The idea is that a user installing ",(0,a.jsx)(n.code,{children:"matplotlib"})," explicitly would get a full\nfeatured installation with ",(0,a.jsx)(n.code,{children:"pyside6"}),". However, ",(0,a.jsx)(n.code,{children:"pyside6"})," is a rather large package, so not requiring it\nindirectly is better for performance. Note that you may need to include a ",(0,a.jsx)(n.code,{children:"yum_requirements.txt"})," file\nin your recipe with"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"xorg-x11-server-Xorg\n"})}),"\n",(0,a.jsxs)(n.p,{children:["if you import parts of ",(0,a.jsx)(n.code,{children:"matplotlib"})," that link to ",(0,a.jsx)(n.code,{children:"libX11"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"pybind11-abi-constraints"})}),"\n",(0,a.jsxs)(n.h3,{id:"pybind11-abi-constraints",children:[(0,a.jsx)(n.code,{children:"pybind11"})," ABI Constraints"]}),"\n",(0,a.jsxs)(n.p,{children:["Sometimes when different python libraries using ",(0,a.jsx)(n.code,{children:"pybind11"})," interact via lower-level C++ interfaces,\nthe underlying ABI between the two libraries has to match. To ease this use case, we have a ",(0,a.jsx)(n.code,{children:"pybind11-abi"}),"\nmetapackage that can be used in the ",(0,a.jsx)(n.code,{children:"host"})," section of a build. Its version is pinned globally and it has a\nrun export on itself, meaning that builds with this package in ",(0,a.jsx)(n.code,{children:"host"})," will have a runtime constraint on it.\nFurther, the ",(0,a.jsx)(n.code,{children:"pybind11"})," has a run constraint on the ABI metapackage to help ensure consistent usage."]}),"\n",(0,a.jsx)(n.p,{children:"To use this package in a build, put it in the host environment like so"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"requirements:\n  host:\n    - pybind11-abi\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"knowledge-empty"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"empty-python-packages"})}),"\n",(0,a.jsx)(n.h3,{id:"empty-python-packages",children:"Empty Python packages"}),"\n",(0,a.jsxs)(n.p,{children:["For some features introduced in later Python versions, the Python community creates backports, which makes these\nfeatures available for earlier versions of Python as well.\nOne example here is ",(0,a.jsx)(n.a,{href:"https://www.python.org/dev/peps/pep-0557/",children:"dataclasses"})," which was introduced with\nPython3.7 but is available as a ",(0,a.jsx)(n.a,{href:"https://github.com/ericvsmith/dataclasses",children:"backport"})," for Python3.6 too.\nTherefore, most upstream packages make those backports only mandatory for specific versions of Python and exclude them otherwise."]}),"\n",(0,a.jsxs)(n.p,{children:["Implementing this restriction in conda-forge is currently only possible through the use of ",(0,a.jsx)(n.code,{children:"skips"}),"\nwhich restricts the corresponding conda-forge recipes from becoming ",(0,a.jsx)(n.code,{children:"noarch"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Therefore, some conda-forge recipes only create an actual package on specific Python versions and are otherwise an\nempty placeholder. This allows them to be safely installed under all Python versions and makes using ",(0,a.jsx)(n.code,{children:"skips"})," unnecessary."]}),"\n",(0,a.jsxs)(n.p,{children:["Similarly, some packages are only platform-specific dependency of a package, such as ",(0,a.jsx)(n.code,{children:"pywin32"}),", and have\nhelper metapackages which can help recipes stay ",(0,a.jsx)(n.code,{children:"noarch"}),". The version of the actual package required\ncan be controlled with ",(0,a.jsx)(n.code,{children:"run_constrained"}),", even for packages not available on all platforms."]}),"\n",(0,a.jsx)(n.p,{children:"Currently available packages:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Name"}),(0,a.jsx)(n.th,{children:"Available on:"}),(0,a.jsx)(n.th,{children:"Empty on:"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"backports.strenum"}),(0,a.jsx)(n.td,{children:"python >=3.8,<3.11"}),(0,a.jsx)(n.td,{children:"python >=3.12"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"dataclasses"}),(0,a.jsx)(n.td,{children:"python >=3.6,<3.7"}),(0,a.jsx)(n.td,{children:"python >=3.7"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"enum34"}),(0,a.jsx)(n.td,{children:"python =2.7"}),(0,a.jsx)(n.td,{children:"python >=3.4"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"pywin32-on-windows"}),(0,a.jsx)(n.td,{children:"windows"}),(0,a.jsx)(n.td,{children:"unix"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"typing"}),(0,a.jsx)(n.td,{}),(0,a.jsx)(n.td,{children:"python >=3"})]})]})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"knowledge-all-installs"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"non-version-specific-python-packages"})}),"\n",(0,a.jsx)(n.h3,{id:"non-version-specific-python-packages",children:"Non-version-specific Python packages"}),"\n",(0,a.jsx)(n.p,{children:"For some dependencies, upstream maintainers list Python versions where those packages are needed,\neven if the packages can actually be installed under all Python versions."}),"\n",(0,a.jsxs)(n.p,{children:["Implementing this restriction in conda-forge is currently only possible through the use of ",(0,a.jsx)(n.code,{children:"skips"}),"\nwhich restricts the corresponding conda-forge recipes from becoming ",(0,a.jsx)(n.code,{children:"noarch"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Therefore, the conda-forge community maintains a list of packages that are safe to be installed under all Python versions,\neven if the original package only requires it for some versions."}),"\n",(0,a.jsxs)(n.p,{children:["For example, the package ",(0,a.jsx)(n.a,{href:"https://github.com/rigetti/pyquil",children:"pyquil"})," only\n",(0,a.jsx)(n.a,{href:"https://github.com/rigetti/pyquil/blob/497791e8108d8780109d75410be786c5f6e590ea/pyproject.toml#L30",children:"requires"})," ",(0,a.jsx)(n.code,{children:"importlib-metadata"})," for ",(0,a.jsx)(n.code,{children:"python <3.8"})," but it is actually safe to be installed under ",(0,a.jsx)(n.code,{children:"python >=3.8"})," as well."]}),"\n",(0,a.jsx)(n.p,{children:"Currently available packages:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"exceptiongroup"}),"\n",(0,a.jsx)(n.li,{children:"importlib-metadata"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"abi3"})}),"\n",(0,a.jsx)(n.h3,{id:"packages-with-abi3-extensions",children:"Packages with abi3 extensions"}),"\n",(0,a.jsxs)(n.p,{children:["Packages can be built using CPython's stable ",(0,a.jsxs)(n.a,{href:"https://docs.python.org/3/c-api/stable.html",children:[(0,a.jsx)(n.code,{children:"abi3"})," mode"]})," by adding a few conditionals to the ",(0,a.jsx)(n.code,{children:"build"}),", ",(0,a.jsx)(n.code,{children:"requirements"}),", and (optionally) ",(0,a.jsx)(n.code,{children:"test"})," sections. See ",(0,a.jsxs)(n.a,{href:"https://github.com/conda-forge/python-abi3-feedstock/blob/main/recipe/example-meta.yaml",children:["this ",(0,a.jsx)(n.code,{children:"meta.yaml"})," example"]})," from the ",(0,a.jsx)(n.code,{children:"python-abi3-feedstock"}),", in particular the parts that depend on the ",(0,a.jsx)(n.code,{children:"is_abi3"}),", as well as the relevant ",(0,a.jsx)(n.a,{href:"https://docs.conda.io/projects/conda-build/en/stable/resources/define-metadata.html#python-version-independent-packages",children:"conda-build documentation"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Note that the python extension that is being packaged needs to support building the extension as an ABI3 package. For setuptools\nbased projects, the keyword argument ",(0,a.jsx)(n.code,{children:"py_limited_api=True"})," needs to be passed to the ",(0,a.jsx)(n.code,{children:"setup"})," function."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"noarch-builds"})}),"\n",(0,a.jsx)(n.h2,{id:"noarch-builds",children:"Noarch builds"}),"\n",(0,a.jsx)(n.p,{children:"Noarch packages are packages that are not architecture specific and therefore only have to be built once."}),"\n",(0,a.jsxs)(n.p,{children:["Declaring these packages as ",(0,a.jsx)(n.code,{children:"noarch"})," in the ",(0,a.jsx)(n.code,{children:"build"})," section of the meta.yaml, reduces shared CI resources.\nTherefore all packages that qualify to be noarch packages should be declared as such."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"noarch"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"noarch-python"})}),"\n",(0,a.jsx)(n.h3,{id:"noarch-python",children:"Noarch python"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"noarch: python"})," directive, in the ",(0,a.jsx)(n.code,{children:"build"})," section, makes pure-Python\npackages that only need to be built once."]}),"\n",(0,a.jsx)(n.p,{children:"In order to qualify as a noarch python package, all of the following criteria must be fulfilled:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"No compiled extensions"}),"\n",(0,a.jsx)(n.li,{children:"No post-link or pre-link or pre-unlink scripts"}),"\n",(0,a.jsx)(n.li,{children:"No OS-specific build scripts"}),"\n",(0,a.jsx)(n.li,{children:"No python version specific requirements"}),"\n",(0,a.jsxs)(n.li,{children:["No skips except for python version. If the recipe is py3 only, remove skip\nstatement and add version constraint on python in ",(0,a.jsx)(n.code,{children:"host"})," and ",(0,a.jsx)(n.code,{children:"run"}),"\nsection."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"2to3"})," is not used"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"scripts"})," argument in ",(0,a.jsx)(n.code,{children:"setup.py"})," is not used"]}),"\n",(0,a.jsxs)(n.li,{children:["If ",(0,a.jsx)(n.code,{children:"console_scripts"})," ",(0,a.jsx)(n.code,{children:"entry_points"})," are defined in ",(0,a.jsx)(n.code,{children:"setup.py"})," or ",(0,a.jsx)(n.code,{children:"setup.cfg"}),", they are also\n",(0,a.jsx)(n.a,{href:"https://conda.io/projects/conda-build/en/stable/resources/define-metadata.html#python-entry-points",children:"listed"}),"\nin the ",(0,a.jsx)(n.code,{children:"build"})," section of ",(0,a.jsx)(n.code,{children:"meta.yaml"})]}),"\n",(0,a.jsx)(n.li,{children:"No activate scripts"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["All recipes employing ",(0,a.jsx)(n.code,{children:"noarch: python"})," should usually use the ",(0,a.jsx)(n.code,{children:"python_min"})," variable per the following example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="recipe/meta.yaml"',children:"name: package\nsource:\n  # ...\nbuild:\n  noarch: python\n  # ...\nrequirements:\n  host:\n    - python {{ python_min }}\n    # ...\n  run:\n    - python >={{ python_min }}\n    # ...\n\ntest:\n  requires:\n    - python {{ python_min }}\n    # ...\n"})}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/cfep/blob/main/cfep-25.md",children:"CFEP-25"})," for more details on this syntax. If you\nneed to override this syntax, you can add a Jinja2 ",(0,a.jsx)(n.code,{children:"set"})," statement (or equivalent ",(0,a.jsx)(n.code,{children:"context"})," variable for v1 recipes)\nat the top of your recipe like this"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="recipe/meta.yaml"',children:'{% set python_min = "3.10" %}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["It also possible to achieve the same effect by adding a ",(0,a.jsx)(n.code,{children:"conda_build_config.yaml"})," file to your recipe that\ncontains a map like"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="recipe/conda_build_config.yaml"',children:'python_min:\n- "3.10"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["If you go that route, you will need to ",(0,a.jsx)(n.a,{href:"../infrastructure/#conda-forge-admin-please-rerender",children:"rerender the feedstock"}),"\nafter adding the ",(0,a.jsx)(n.code,{children:"conda_build_config.yaml"})," file."]}),"\n",(0,a.jsxs)(n.p,{children:["Using ",(0,a.jsx)(n.code,{children:"noarch: python"})," packages, with ",(0,a.jsx)(n.code,{children:"python {{ python_min }}"})," pins in their ",(0,a.jsx)(n.code,{children:"test.requires"})," section, as\n",(0,a.jsx)(n.code,{children:"downstream"})," tests can cause failures for the ",(0,a.jsx)(n.code,{children:"upstream"})," package if the Python version required for the test\nconflicts with ",(0,a.jsx)(n.code,{children:"upstream"})," package's Python version. There are two fixes, depending on what is more important."]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Constrain the ",(0,a.jsx)(n.code,{children:"downstream"})," tests in the ",(0,a.jsx)(n.code,{children:"upstream"})," package to only run on ",(0,a.jsx)(n.code,{children:"python_min"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Remove the ",(0,a.jsx)(n.code,{children:"python_min"})," requirement from the ",(0,a.jsx)(n.code,{children:"downstream"})," package's test requirements."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["More or less, you prefer the first solution when testing the ",(0,a.jsx)(n.code,{children:"downstream"})," package on ",(0,a.jsx)(n.code,{children:"python_min"})," is the most important thing. You prefer the second solution when testing all Python versions of the ",(0,a.jsx)(n.code,{children:"upstream"})," package with the ",(0,a.jsx)(n.code,{children:"downstream"})," package is the most important thing."]}),"\n",(0,a.jsx)(n.admonition,{title:"Hint",type:"tip",children:(0,a.jsxs)(n.p,{children:["Adding an explicit ",(0,a.jsx)(n.code,{children:"python_min"})," to your ",(0,a.jsx)(n.code,{children:"noarch: python"})," recipe can be an effective way to ensure the required\nPython in your package's metadata is enforced at ",(0,a.jsx)(n.code,{children:"conda-build"})," time, as the build will fail if the package's\nrequired Python version is newer than ",(0,a.jsx)(n.code,{children:"python_min"}),"."]})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["While ",(0,a.jsx)(n.code,{children:"noarch: python"})," does not work with selectors, it does work with version constraints.\n",(0,a.jsx)(n.code,{children:"skip: True  # [py2k]"})," can be replaced with a constrained python version in the host and run subsections:\nsay ",(0,a.jsx)(n.code,{children:"python >=3"})," instead of just ",(0,a.jsx)(n.code,{children:"python"}),"."]})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Only ",(0,a.jsx)(n.code,{children:"console_scripts"})," entry points have to be listed in ",(0,a.jsx)(n.code,{children:"meta.yaml"}),". Other entry points do not conflict\nwith ",(0,a.jsx)(n.code,{children:"noarch"})," and therefore do not require extra treatment."]})}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"noarch"})," is a statement about the package's source code and not its install environment. A package is still considered\n",(0,a.jsx)(n.code,{children:"noarch"})," even if one of its dependencies is not available on a given platform. If this is the case, conda will\ndisplay a helpful error message describing which dependency couldn't be found when it tries to install the package.\nIf the dependency is later made available, your package will be installable on that platform without having to make\nany changes to the feedstock."]}),(0,a.jsxs)(n.p,{children:["By default, ",(0,a.jsx)(n.code,{children:"noarch"})," packages are built on Linux, and all dependencies must be available on Linux."]})]}),"\n",(0,a.jsx)(n.admonition,{title:"Hint",type:"tip",children:(0,a.jsxs)(n.p,{children:["If a ",(0,a.jsx)(n.code,{children:"noarch"})," package cannot be built on Linux, one or more ",(0,a.jsx)(n.code,{children:"noarch_platforms"})," can be provided in\n",(0,a.jsx)(n.code,{children:"conda-forge.yml"}),". One example is ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/pywin32-on-windows-feedstock",children:"pywin32-on-windows"}),",\nwhich builds on Linux and Windows, with ",(0,a.jsx)(n.code,{children:"build_number"})," offsets to create a pair packages, like\n",(0,a.jsx)(n.code,{children:"dataclasses"}),"."]})}),"\n",(0,a.jsx)(n.admonition,{title:"Hint",type:"tip",children:(0,a.jsxs)(n.p,{children:["You can build platform-specific ",(0,a.jsx)(n.code,{children:"noarch"})," packages to include runtime requirements depending on the target OS.\nSee mini-tutorial below."]})}),"\n",(0,a.jsxs)(n.p,{children:["If an existing python package qualifies to be converted to a noarch package, you can request the required changes\nby opening a new issue and including ",(0,a.jsx)(n.code,{children:"@conda-forge-admin, please add noarch: python"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"os-specific-noarch"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"noarch-packages-with-os-specific-dependencies"})}),"\n",(0,a.jsx)(n.h4,{id:"noarch-packages-with-os-specific-dependencies",children:"Noarch packages with OS-specific dependencies"}),"\n",(0,a.jsxs)(n.p,{children:["It is possible to build ",(0,a.jsx)(n.code,{children:"noarch"})," packages with runtime requirements that depend on the target OS\n(Linux, Windows, MacOS), regardless the architecture (amd64, ARM, PowerPC, etc). This approach\nrelies on three concepts:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-virtual.html",children:"Virtual packages"}),".\nPrefixed with a double underscore, they are used by conda to represent system properties as\nconstraints for the solver at install-time. We will use ",(0,a.jsx)(n.code,{children:"__linux"}),", ",(0,a.jsx)(n.code,{children:"__win"})," or ",(0,a.jsx)(n.code,{children:"__osx"}),",\nwhich are only present when the running platform is Linux, Windows, or MacOS, respectively.\n",(0,a.jsx)(n.code,{children:"__unix"})," is present in both Linux and MacOS. Note that this feature is ",(0,a.jsx)(n.strong,{children:"only fully available\non conda 4.10 or above"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"conda-forge.yml"}),"'s ",(0,a.jsx)(n.a,{href:"/docs/maintainer/conda_forge_yml#noarch-platforms",children:"noarch_platforms"})," option."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"conda-build 3.25.0 or above"})," changing the build hash depending on virtual packages used."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The idea is to generate different noarch packages for each OS needing different dependencies.\nLet's say you have a pure Python package, perfectly eligible for ",(0,a.jsx)(n.code,{children:"noarch: python"}),", but on Windows\nit requires ",(0,a.jsx)(n.code,{children:"windows-only-dependency"}),". You might have something like:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="recipe/meta.yaml (original)"',children:"name: package\nsource:\n  # ...\nbuild:\n  number: 0\nrequirements:\n  # ...\n  run:\n    - python\n    - numpy\n    - windows-only-dependency  # [win]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Being non-noarch, this means that the build matrix will include at least 12 outputs: three platforms,\ntimes four Python versions. This gets worse with ",(0,a.jsx)(n.code,{children:"arm64"}),", ",(0,a.jsx)(n.code,{children:"aarch64"})," and ",(0,a.jsx)(n.code,{children:"ppc64le"})," in the mix.\nWe can get it down to two outputs if replace it with this other approach!"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="recipe/meta.yaml (modified)"',children:"name: package\nsource:\n  # ...\nbuild:\n  number: 0\n  noarch: python\nrequirements:\n  host:\n    - python {{ python_min }}.*\n    # ...\n  run:\n    - python >={{ python_min }}\n    - numpy\n    - __unix  # [unix]\n    - __win   # [win]\n    - windows-only-dependency  # [win]\n"})}),"\n",(0,a.jsx)(n.p,{children:"Do not forget to specify the platform virtual packages with their selectors!\nOtherwise, the solver will not be able to choose the variants correctly."}),"\n",(0,a.jsxs)(n.p,{children:["By default, conda-forge will only build ",(0,a.jsx)(n.code,{children:"noarch"})," packages on a ",(0,a.jsx)(n.code,{children:"linux_64"})," CI runner, so\nonly the ",(0,a.jsx)(n.code,{children:"# [unix]"})," selectors would be true. However, we can change this behaviour using\nthe ",(0,a.jsx)(n.code,{children:"noarch_platforms"})," option in ",(0,a.jsx)(n.code,{children:"conda-forge.yml"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="conda-forge.yml"',children:"noarch_platforms:\n  - linux_64\n  - win_64\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This will provide two runners per package! Perfect! All these changes require a\nfeedstock rerender to be applied. See ",(0,a.jsx)(n.a,{href:"/docs/maintainer/updating_pkgs#dev-update-rerender",children:"Rerendering feedstocks"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"If you need conditional dependencies on all three operating systems, this is how you do it:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="recipe/meta.yaml"',children:"name: package\nsource:\n  # ...\nbuild:\n  number: 0\n  noarch: python\nrequirements:\n  # ...\n  run:\n    - python >={{ python_min }}\n    - numpy\n    - __linux  # [linux]\n    - __osx    # [osx]\n    - __win    # [win]\n    - linux-only-dependency    # [linux]\n    - osx-only-dependency      # [osx]\n    - windows-only-dependency  # [win]\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="conda-forge.yml"',children:"noarch_platforms:\n  - linux_64\n  - osx_64\n  - win_64\n"})}),"\n",(0,a.jsx)(n.p,{children:"Again, remember to rerender after adding / modifying these files so the changes are applied."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"noarch-generic"})}),"\n",(0,a.jsx)(n.h3,{id:"noarch-generic",children:"Noarch generic"}),"\n",(0,a.jsx)(n.admonition,{title:"Todo",type:"info",children:(0,a.jsxs)(n.p,{children:["add some information on r packages which make heavy use of ",(0,a.jsx)(n.code,{children:"noarch: generic"})]})}),"\n",(0,a.jsx)(n.h2,{id:"multi-output-recipes",children:"Multi-output recipes"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"conda-build"})," has the ability to create multiple package artifacts from a single recipe via the ",(0,a.jsx)(n.code,{children:"outputs"})," section in ",(0,a.jsx)(n.code,{children:"meta.yaml"}),". This is useful in several scenarios, including:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Distributing a project (which share the same source code) in separate artifacts. For example:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A compiled C++ library and its Python bindings:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/mamba-feedstock/blob/e13e667edd0e9efb5091444c11307ddb2bd8fa5e/recipe/meta.yaml",children:"mamba-feedstock"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["A runtime library and its headers:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/cpp-opentelemetry-sdk-feedstock/blob/6c9f81074f0343f2fb41a4491e91b7b84e962cc1/recipe/meta.yaml",children:"cpp-opentelemetry-sdk"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["A dynamic library and a static version:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/libarchive-feedstock/blob/642a473daf5cfc84598ed7fde1016c243e359e3b/recipe/meta.yaml",children:"libarchive"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Distributing the same project with different sets of dependencies. For example:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The project with the minimal dependencies to run, and a separate output that extends that list:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/geopandas-feedstock/blob/d6a3efdf12408f1875f1aa0b7cc2393f877a73e8/recipe/meta.yaml",children:"geopandas-base and geopandas"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/matplotlib-feedstock/blob/dc89bb11d502475b7bb71d8600b2eeaff4c185bd/recipe/meta.yaml",children:"matplotlib-base and matplotlib"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["CPU vs GPU versions of a package (this can also be done with package variants):\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/pytorch-cpu-feedstock/blob/b629af608e13eb180dab698b1e44ac0991ab1135/recipe/meta.yaml",children:"pytorch-cpu, pytorch-gpu and pytorch"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["A package with different strictness levels for its dependencies:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/opencv-feedstock/blob/850a09ec4e4e1a34e2619c5b937bfdc8ffe8bbbd/recipe/meta.yaml",children:"opencv"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["Distributing the same project under two different names (alias packags). For example:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A package that changed names but wants to keep existing users up-to-date:"}),"\n",(0,a.jsxs)(n.li,{children:["A package that uses dashes and underscores and expects users to use either:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/importlib_metadata-feedstock/blob/e4595fd73bba559d248f97896aff89a762073f2a/recipe/meta.yaml",children:"importlib_metadata and importlib-metadata"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/typing_extensions-feedstock/blob/d9d0d1161d5ded886a272c0e4907f62d9272c7a8/recipe/meta.yaml",children:"typing_extensions and typing-extensions"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.h3,{id:"common-pitfalls-with-outputs",children:["Common pitfalls with ",(0,a.jsx)(n.code,{children:"outputs"})]}),"\n",(0,a.jsxs)(n.p,{children:["This is a non-exhaustive list of common pitfalls when using ",(0,a.jsx)(n.code,{children:"outputs"}),"."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["It's usually simpler to use a top-level name that does not match any output names. If the top-level name is different than the feedstock name, make sure to set the ",(0,a.jsx)(n.code,{children:"extra.feedstock-name"})," in ",(0,a.jsx)(n.code,{children:"meta.yaml"}),". See ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/rich-feedstock/blob/0d745692c1bcf/recipe/meta.yaml#L110-L111",children:"rich-feedstock"}),". Note how the top-level name is ",(0,a.jsx)(n.code,{children:"rich-split"}),", the feedstock name is ",(0,a.jsx)(n.code,{children:"rich"})," and the main output is ",(0,a.jsx)(n.code,{children:"rich"})," too."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"build.sh"})," and ",(0,a.jsx)(n.code,{children:"bld.bat"})," scripts are only automatically used for the top-level package. Consider using other file names for the scripts in the outputs. See ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/gdal-feedstock/blob/66ba0a2284476/recipe/meta.yaml#L70-L73",children:"gdal-feedstock"})," for an example."]}),"\n",(0,a.jsxs)(n.li,{children:["The ",(0,a.jsx)(n.code,{children:"outputs[].script"})," field can only be set to a script name. If you prefer passing shell commands, you have to use ",(0,a.jsx)(n.code,{children:"outputs[].build.script"}),". Compare ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/geopandas-feedstock/blob/8b985635a8538af1ee213900bd563085e3cdbd92/recipe/meta.yaml#L17",children:"geopandas-feedstock"})," to ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/gym-feedstock/blob/2b47e0479923b7d49a39e9860ba30a28e263480b/recipe/meta.yaml#L31",children:"gym-feedstock"}),", respectively."]}),"\n",(0,a.jsxs)(n.li,{children:["Some ",(0,a.jsx)(n.code,{children:"PIP_*"})," environment variables that are usually set for the top-level scripts are not automatically set for the outputs. If you are invoking ",(0,a.jsx)(n.code,{children:"pip"})," in an output, you may need to pass additional flags. See ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/napari-feedstock/blob/32a4eb04ca7b6ccd2c4e146bde204f1dd5425a17/recipe/meta.yaml#L26",children:"napari-feedstock"}),". This issue is tracked in ",(0,a.jsx)(n.a,{href:"https://github.com/conda/conda-build/issues/3993",children:"conda/conda-build#3993"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"build-matrices"})}),"\n",(0,a.jsx)(n.h2,{id:"build-matrices",children:"Build matrices"}),"\n",(0,a.jsxs)(n.p,{children:["Currently, ",(0,a.jsx)(n.code,{children:"python, vc, r-base"})," will create a matrix of jobs for each supported version. If ",(0,a.jsx)(n.code,{children:"python"})," is only a\nbuild dependency and not a runtime dependency (eg: build script of the package is written in Python, but the\npackage is not dependent on Python), use ",(0,a.jsx)(n.code,{children:"build"})," section"]}),"\n",(0,a.jsxs)(n.p,{children:["Following implies that ",(0,a.jsx)(n.code,{children:"python"})," is only a build dependency and no Python matrix will be created."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"build:\n  - python\nhost:\n  - some_other_package\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Note that ",(0,a.jsx)(n.code,{children:"host"})," should be non-empty or ",(0,a.jsx)(n.code,{children:"compiler"})," jinja syntax used or ",(0,a.jsx)(n.code,{children:"build/merge_build_host"})," set to\nTrue for the ",(0,a.jsx)(n.code,{children:"build"})," section to be treated as different from ",(0,a.jsx)(n.code,{children:"host"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Following implies that ",(0,a.jsx)(n.code,{children:"python"})," is a runtime dependency and a Python matrix for each supported Python version will be created."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"host:\n  - python\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"conda-forge.yml"}),"'s build matrices is removed in conda-smithy=3. To get a build matrix,\ncreate a ",(0,a.jsx)(n.code,{children:"conda_build_config.yaml"})," file inside the recipe folder. For example, the following will give you 2\nbuilds and you can use the selector ",(0,a.jsx)(n.code,{children:"vtk_with_osmesa"})," in the ",(0,a.jsx)(n.code,{children:"meta.yaml"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"vtk_with_osmesa:\n  - False\n  - True\n"})}),"\n",(0,a.jsx)(n.p,{children:"You need to rerender the feedstock after this change."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"requiring-newer-macos-sdks"})}),"\n",(0,a.jsx)(n.h2,{id:"requiring-newer-macos-sdks",children:"Requiring newer macOS SDKs"}),"\n",(0,a.jsx)(n.p,{children:"conda-forge uses macOS SDK 10.13 to build software so that they can be deployed to\nall macOS versions newer than 10.13. Sometimes, some packages require a newer SDK\nto build with. While the default version 10.13 can be overridden using the following\nchanges to the recipe, it should be done as a last resort. Please consult with\ncore team if this is something you think you need."}),"\n",(0,a.jsxs)(n.p,{children:["To use a new SDK, add the following in ",(0,a.jsx)(n.code,{children:"recipe/conda_build_config.yaml"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# Please consult conda-forge/core before doing this\nMACOSX_SDK_VERSION:        # [osx and x86_64]\n  - "10.15"                # [osx and x86_64]\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Note that this should be done if the error you are getting says that a header is not\nfound or a macro is not defined. This will make your package compile with a newer SDK\nbut with ",(0,a.jsx)(n.code,{children:"10.13"})," as the deployment target.\nWARNING: some packages might use features from ",(0,a.jsx)(n.code,{children:"10.15"})," if you do the above due to\nbuggy symbol availability checks. For example packages looking for ",(0,a.jsx)(n.code,{children:"clock_gettime"}),"\nwill see it as it will be a weak symbol, but the package might not have a codepath\nto handle the weak symbol, in that case, you need to update the ",(0,a.jsx)(n.code,{children:"c_stdlib_version"}),"\n(previously ",(0,a.jsx)(n.code,{children:"MACOSX_DEPLOYMENT_TARGET"}),") as described below."]}),"\n",(0,a.jsxs)(n.p,{children:["After increasing the SDK version, if you are getting an error that says that a function\nis available only for macOS x.x, then do the following in ",(0,a.jsx)(n.code,{children:"recipe/conda_build_config.yaml"}),","]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# Please consult conda-forge/core before doing this\nc_stdlib_version:          # [osx and x86_64]\n  - "10.15"                # [osx and x86_64]\nMACOSX_SDK_VERSION:        # [osx and x86_64]\n  - "10.15"                # [osx and x86_64]\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In ",(0,a.jsx)(n.code,{children:"recipe/meta.yaml"}),", add the following to ensure that the user's system is compatible."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'requirements:\n  build:\n    - {{ stdlib("c") }}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Note that the run-export on ",(0,a.jsx)(n.code,{children:"__osx"})," that's produced by the stdlib metapackages\nrequires ",(0,a.jsx)(n.code,{children:"conda>=4.8"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"newer-c-features-with-old-sdk"})}),"\n",(0,a.jsx)(n.h3,{id:"newer-c-features-with-old-sdk",children:"Newer C++ features with old SDK"}),"\n",(0,a.jsx)(n.p,{children:"The libc++ library uses Clang availability annotations to mark certain symbols as\nunavailable when targeting versions of macOS that ship with a system libc++\nthat do not contain them. Clang always assumes that the system libc++ is used."}),"\n",(0,a.jsxs)(n.p,{children:["The conda-forge build infrastructure targets macOS 10.13 and some newer C++ features\nsuch as ",(0,a.jsx)(n.code,{children:"fs::path"})," are marked as unavailable on that platform, so the build aborts:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"...\nerror: 'path' is unavailable: introduced in macOS 10.15\n...\nnote: 'path' has been explicitly marked unavailable here\nclass _LIBCPP_TYPE_VIS path {\n"})}),"\n",(0,a.jsxs)(n.p,{children:["However, since conda-forge ships its own (modern) libcxx we can ignore these checks\nbecause these symbols are in fact available. To do so, add\n",(0,a.jsx)(n.code,{children:"_LIBCPP_DISABLE_AVAILABILITY"})," to the defines. For example"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'CXXFLAGS="${CXXFLAGS} -D_LIBCPP_DISABLE_AVAILABILITY"\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"pypy-builds"})}),"\n",(0,a.jsx)(n.h2,{id:"pypy-builds",children:"PyPy builds"}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"/docs/user/tipsandtricks#pypy",children:"Using PyPy as an interpreter"})," in the user docs for more info about PyPy and conda-forge."]}),"\n",(0,a.jsxs)(n.p,{children:["To build your python package for pypy, wait for the bot to send a\nPR and contact ",(0,a.jsx)(n.code,{children:"conda-forge/bot"})," team if a PR is not sent after the\ndependencies have been built."]}),"\n",(0,a.jsx)(n.p,{children:"To add a dependency just for pypy or cpython, do,"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"requirements:\n  run:\n    - spam           # [python_impl == 'cpython']\n    - ham            # [python_impl == 'pypy']\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["You'll need to rerender the feedstocks after making the above\nchange in order for the ",(0,a.jsx)(n.code,{children:"python_impl"})," variable to be available to\nconda-build"]})}),"\n",(0,a.jsx)(n.p,{children:"To skip the pypy builds, do the following,"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"build:\n  skip: True         # [python_impl == 'pypy']\n"})}),"\n",(0,a.jsx)(n.p,{children:"If something is failing the PyPy build when it passes the CPython one, reach\nout to @conda-forge/help-pypy."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"using-setuptools-scm"})}),"\n",(0,a.jsx)(n.h2,{id:"using-setuptools_scm",children:"Using setuptools_scm"}),"\n",(0,a.jsxs)(n.p,{children:["The Python module ",(0,a.jsx)(n.a,{href:"https://github.com/pypa/setuptools_scm",children:"setuptools_scm"}),"\ncan be used to manage a package's version automatically from metadata, such as git tags.\nThe package's version string is thus not specified anywhere in the package,\nbut encoded in it at install-time."]}),"\n",(0,a.jsxs)(n.p,{children:["For conda-build this means that ",(0,a.jsx)(n.code,{children:"setuptools_scm"})," must be included as a ",(0,a.jsx)(n.code,{children:"host"})," dependency.\nAdditionally, some attention because the metadata is often not available in the sources.\nThere are two options for how to proceed:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["For Python package also available on PyPI:\nUse the PyPi tarball as a source, as it will have the metadata encoded\n(in such a way that ",(0,a.jsx)(n.code,{children:"setuptools_scm"})," knows how to find it)."]}),"\n",(0,a.jsxs)(n.li,{children:["Specify the environment variable ",(0,a.jsx)(n.code,{children:"SETUPTOOLS_SCM_PRETEND_VERSION"})," with the version string.\nIf specified this environment variable is the principle source for ",(0,a.jsx)(n.code,{children:"setuptools_scm"}),".\nThere are two ways how to do this:\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["If you are using build scripts, in ",(0,a.jsx)(n.code,{children:"build.sh"})," specify:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'export SETUPTOOLS_SCM_PRETEND_VERSION="$PKG_VERSION"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["and in ",(0,a.jsx)(n.code,{children:"bld.bat"})," specify:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"set SETUPTOOLS_SCM_PRETEND_VERSION=%PKG_VERSION%\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Whereby you use that ",(0,a.jsx)(n.code,{children:"PKG_VERSION"})," has been set with the version string,\nsee ",(0,a.jsx)(n.a,{href:"https://docs.conda.io/projects/conda-build/en/stable/user-guide/environment-variables.html#env-vars",children:"Environment variables"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Otherwise, if you are directly building from ",(0,a.jsx)(n.code,{children:"meta.yaml"}),", use for example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'build:\n  # [...]\n  script_env:\n    - SETUPTOOLS_SCM_PRETEND_VERSION={{version}}\n  script: "{{ PYTHON }} -m pip install . -vv"\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"centos7"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"using-centos-7"})}),"\n",(0,a.jsxs)(n.h2,{id:"requiring-newer-glibc-versions",children:["Requiring newer ",(0,a.jsx)(n.code,{children:"glibc"})," versions"]}),"\n",(0,a.jsxs)(n.p,{children:["Conda-forge aims to build for as many users as possible, which means\nthat we target ",(0,a.jsx)(n.code,{children:"glibc 2.17"})," from CentOS 7, which allows packages to be\ninstalled on essentially any linux system (newer than 2014)."]}),"\n",(0,a.jsxs)(n.p,{children:["However, some feedstocks may already require newer ",(0,a.jsx)(n.code,{children:"glibc"})," versions.\nTo use the newer ",(0,a.jsx)(n.code,{children:"sysroot"})," with ",(0,a.jsx)(n.code,{children:"glibc"})," ",(0,a.jsx)(n.code,{children:"2.28"})," or ",(0,a.jsx)(n.code,{children:"2.34"})," on ",(0,a.jsx)(n.code,{children:"linux"}),",\nput the following in your build section."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"requirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ stdlib('c') }}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["and add the following to ",(0,a.jsx)(n.code,{children:"recipe/conda_build_config.yaml"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'c_stdlib_version:          # [linux]\n  - "2.28"                 # [linux]\n'})}),"\n",(0,a.jsxs)(n.p,{children:["This covers the headers/library present at build-time, and will also create\na corresponding run-export on the ",(0,a.jsx)(n.code,{children:"__glibc"})," virtual package."]}),"\n",(0,a.jsxs)(n.p,{children:["By default, conda-forge build infrastructure uses old sysroots on new images, meaning that\nthe ",(0,a.jsx)(n.code,{children:"glibc"})," present in the docker image is not what we compile against. This has\nseveral advantages, and also means that generally you don't have to concern\nyourself with changing the image manually."]}),"\n",(0,a.jsxs)(n.p,{children:["However, if for some reason you want to override the image versions, you can do so\nby setting the following in the ",(0,a.jsx)(n.code,{children:"conda-forge.yml"})," of your recipe and rerendering."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"os_version:             # example of possible values\n  linux_64: cos7\n  linux_aarch64: alma8\n  linux_ppc64le: alma9\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In the exceptional case that a feedstock does ",(0,a.jsx)(n.em,{children:"binary repackaging"})," (i.e. no\ncompilation from source), please ensure that you use the oldest-possible image,\nmatching the ",(0,a.jsx)(n.code,{children:"c_stdlib_version"})," of your recipe. For example, if you use the\ndefault ",(0,a.jsx)(n.code,{children:"c_stdlib_version"})," of ",(0,a.jsx)(n.code,{children:"2.17"}),", then set ",(0,a.jsx)(n.code,{children:"os_version: linux_*: cos7"}),";\nif you're using a ",(0,a.jsx)(n.code,{children:"c_stdlib_version"})," of ",(0,a.jsx)(n.code,{children:"2.28"}),", set it to ",(0,a.jsx)(n.code,{children:"alma8"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"cuda"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"cuda-builds"})}),"\n",(0,a.jsx)(n.h2,{id:"cuda-builds",children:"CUDA builds"}),"\n",(0,a.jsxs)(n.p,{children:["Although the provisioned CI machines do not feature a GPU, conda-forge does provide mechanisms\nto build CUDA-enabled packages.\nSee the ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/cuda-feedstock/blob/main/recipe/doc/recipe_guide.md",children:"guide for maintainers of recipes that use CUDA"}),"\nfor more information.\nIf a feedstock does need access to additional resources (like GPUs), please see the following\n",(0,a.jsx)(n.a,{href:"#packages-that-require-a-gpu-or-long-running-builds",children:"section"}),"."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"common-problems-and-known-issues"})}),"\n",(0,a.jsx)(n.h3,{id:"common-problems-and-known-issues",children:"Common problems and known issues"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"nvcuda-dll-cannot-be-found-on-windows"})}),"\n",(0,a.jsxs)(n.h4,{id:"nvcudadll-cannot-be-found-on-windows",children:[(0,a.jsx)(n.code,{children:"nvcuda.dll"})," cannot be found on Windows"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge-ci-setup-feedstock/blob/master/recipe/install_cuda.bat",children:"scripts"}),"\nused to install the CUDA Toolkit on Windows cannot provide ",(0,a.jsx)(n.code,{children:"nvcuda.dll"}),"\nas part of the installation because no GPU is physically present in the CI machines.\nAs a result, you might get linking errors in the postprocessing steps of ",(0,a.jsx)(n.code,{children:"conda build"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-default",children:"WARNING (arrow-cpp,Library/bin/arrow_cuda.dll): $RPATH/nvcuda.dll not found in packages,\nsysroot(s) nor the missing_dso_whitelist.\n\n.. is this binary repackaging?\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For now, you will have to add ",(0,a.jsx)(n.code,{children:"nvcuda.dll"})," to the ",(0,a.jsx)(n.code,{children:"missing_dso_whitelist"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'build:\n  ...\n  missing_dso_whitelist:\n    - "*/nvcuda.dll"   # [win]\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"my-feedstock-is-not-building-old-cuda-versions-anymore"})}),"\n",(0,a.jsx)(n.h4,{id:"my-feedstock-is-not-building-old-cuda-versions-anymore",children:"My feedstock is not building old CUDA versions anymore"}),"\n",(0,a.jsx)(n.p,{children:"As new CUDA versions come out regularly, periodically conda-forge needs to\ndecide how many versions will be supported within resource constraints.\nAs of January 2025, conda-forge supports CUDA 11 and 12."}),"\n",(0,a.jsxs)(n.p,{children:["To update to the latest supported versions ",(0,a.jsx)(n.a,{href:"/docs/maintainer/updating_pkgs#dev-update-rerender",children:"rerender the feedstock"}),".\nThere may be other fixes needed for the feedstock depending on when it was last updated."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"opengpuserver"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"packages-that-require-a-gpu-or-long-running-builds"})}),"\n",(0,a.jsx)(n.h2,{id:"packages-that-require-a-gpu-or-long-running-builds",children:"Packages that require a GPU or long-running builds"}),"\n",(0,a.jsxs)(n.p,{children:["conda-forge has access to ",(0,a.jsx)(n.a,{href:"https://github.com/Quansight/open-gpu-server",children:"an OpenStack server"})," that provides GPU builds and long-running builds (beyond the usual 6h limit).\nIf your package needs a GPU to be built or tested, or its compilation times are so long that they are currently done manually off-CI, you can request access to these runners.\nTo do so:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Open a PR in ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/admin-requests",children:"conda-forge/admin-requests"}),". Follow the instructions in the repository README.\nNote you need to request the type of resource you want access to (e.g. GPU runners, or long-running CPU builds)\nOnce merged, this will enable the self-hosted Github Actions runners for your feedstock."]}),"\n",(0,a.jsxs)(n.li,{children:["In order to trigger jobs for these runners, the maintainer must have read and agreed to the open-gpu-server ",(0,a.jsx)(n.a,{href:"https://github.com/Quansight/open-gpu-server/blob/main/TOS.md",children:"terms of use"}),".\nYou will need to open a PR in the open-gpu-server repository, as instructed in their README.\nYou only need to do this once per maintainer (e.g. if you maintain multiple feedstocks)."]}),"\n",(0,a.jsxs)(n.li,{children:["Finally, you can configure your feedstock to use the self-hosted runners. A PR will have been created by admin-requests after the PR in step (1) is merged.\nHowever, due to security measurements imposed by Github, automated re-rendering is not possible when they modify Github Actions workflows.\nYou will need to rerender it manually by running ",(0,a.jsx)(n.code,{children:"conda-smithy rerender"})," in your machine and then commit and push the result."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Due to some technical and legal limitations, some of the usual automation infrastructure is not available for these runners.\nAs mentioned above, the conda-forge bots won't be able to rerender your feedstock automatically anymore.\nAutomerge will not function properly either. Also note that the conda-forge bots won't be able to trigger the self-hosted runners.\nClosing and reopening the PR won't work, but a maintainer with sufficient permissions can trigger it manually by pushing an empty commit."})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"osxarm64"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"apple-silicon-builds"})}),"\n",(0,a.jsx)(n.h2,{id:"apple-silicon-builds",children:"Apple Silicon builds"}),"\n",(0,a.jsxs)(n.p,{children:["The new Apple M1 processor is the first Apple Silicon supported by conda-forge\n",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge.github.io/issues/1126",children:"osx-arm64"})," builds.\nFor new builds to be available, via ",(0,a.jsx)(n.a,{href:"#cross-compilation",children:"cross-compilation"}),", a migration is required for\nthe package and its dependencies. These builds are experimental as many of them are untested."]}),"\n",(0,a.jsx)(n.p,{children:"To request a migration for a particular package and all its dependencies:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["It may be that your package is already in the process of being migrated. Please check\nthe status of the\n",(0,a.jsx)(n.a,{href:"https://conda-forge.org/status/#armosxaddition",children:"arm osx addition migration"}),".\nIf your package is already in the process of being migrated, it will appear\nunder the appropriate heading (done, in-pr, awaiting-parents, etc.)."]}),"\n",(0,a.jsx)(n.li,{children:"Check the feedstock in question to see if there is already an issue or pull request.\nOpening an issue here is fine, as it might take a couple iterations of the below,\nespecially if many dependencies need to be built as well."}),"\n",(0,a.jsxs)(n.li,{children:["If nothing is under way, look at the current ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge-pinning-feedstock/blob/master/recipe/migrations/osx_arm64.txt",children:"conda-forge-pinning"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["If the package is not listed there, make a PR, adding the package\nname to a random location in ",(0,a.jsx)(n.code,{children:"osx_arm64.txt"}),".\nThe migration bot should start making automated pull requests to the\nrepo and its dependencies."]}),"\n",(0,a.jsxs)(n.li,{children:["Within a few hours, the ",(0,a.jsx)(n.a,{href:"https://conda-forge.org/status/#armosxaddition",children:"status page"}),"\nshould reflect the progress of the package in question, and help you keep track\nof progress. Help out if you can!"]}),"\n",(0,a.jsxs)(n.li,{children:["The feedstock maintainers (who might not have an M1) will work to make\nany changes required to pass continuous integration. If you have insight into\nthe particular package, ",(0,a.jsx)(n.strong,{children:"please"})," chime in, but most of all ",(0,a.jsx)(n.strong,{children:"be patient and polite"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Once the new builds are available from ",(0,a.jsx)(n.code,{children:"anaconda.org"}),", please help the maintainers\nby testing the packages, and reporting back with any problems\u2026 but also successes!"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"pre-release-builds"})}),"\n",(0,a.jsx)(n.h2,{id:"pre-release-builds",children:"Pre-release builds"}),"\n",(0,a.jsxs)(n.p,{children:["Recipe maintainers can make pre-release builds available on\nconda-forge by adding them to the ",(0,a.jsx)(n.code,{children:"dev"})," or ",(0,a.jsx)(n.code,{children:"rc"})," label."]}),"\n",(0,a.jsxs)(n.p,{children:["The semantics of these labels should generally follow the\n",(0,a.jsx)(n.a,{href:"https://devguide.python.org/developer-workflow/development-cycle/index.html#stages",children:"guidelines"})," that Python\nitself follows."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"rc"}),": ",(0,a.jsx)(n.a,{href:"https://devguide.python.org/developer-workflow/development-cycle/index.html#beta",children:"Beta"})," and ",(0,a.jsx)(n.a,{href:"https://devguide.python.org/developer-workflow/development-cycle/index.html#release-candidate-rc",children:"Release\nCandidate"}),"\n(RC). No new features. Bugfix only."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"dev"}),": ",(0,a.jsx)(n.a,{href:"https://devguide.python.org/developer-workflow/development-cycle/index.html#pre-alpha",children:"Pre-Alpha"}),"\nand ",(0,a.jsx)(n.a,{href:"https://devguide.python.org/developer-workflow/development-cycle/index.html#alpha",children:"Alpha"}),". These are\nstill packages that could see substantial changes\nbetween the dev version and the final release."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"alpha"})," and ",(0,a.jsx)(n.code,{children:"beta"})," labels aren't used. Given the light usage of labels on the conda-forge\nchannel thus far, it seems rather unnecessary to introduce many labels.\n",(0,a.jsx)(n.code,{children:"dev"})," and ",(0,a.jsx)(n.code,{children:"rc"})," seem like a nice compromise."]})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Certain packages (for example ",(0,a.jsx)(n.a,{href:"https://pypi.org/project/black/#history",children:"black"}),") follow\na release cycle in which they have never had a non-beta/alpha release. In these cases\nthe conda packages for those do ",(0,a.jsx)(n.em,{children:"not"})," need to be published to a prerelease label."]})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"creating-a-pre-release-build"})}),"\n",(0,a.jsx)(n.h3,{id:"creating-a-pre-release-build",children:"Creating a pre-release build"}),"\n",(0,a.jsxs)(n.p,{children:["To create a ",(0,a.jsx)(n.code,{children:"dev"})," or ",(0,a.jsx)(n.code,{children:"rc"})," package, a PR can be issued into the ",(0,a.jsx)(n.code,{children:"dev"})," or ",(0,a.jsx)(n.code,{children:"rc"})," branch of the\nfeedstock.\nThis branch must change the ",(0,a.jsx)(n.code,{children:"recipe/conda_build_config.yaml"})," file to point to the ",(0,a.jsx)(n.code,{children:"<package_name>_dev"})," or ",(0,a.jsx)(n.code,{children:"<package_name>_rc"})," label."]}),"\n",(0,a.jsx)(n.p,{children:"For example, matplotlib rc releases would include:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"channel_targets:\n  - conda-forge matplotlib_rc\n"})}),"\n",(0,a.jsx)(n.p,{children:"If a pre-release build of B depends on a pre-release build of A, then A should have,"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"channel_targets:\n  - conda-forge A_rc\n"})}),"\n",(0,a.jsx)(n.p,{children:"while B should have,"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"channel_sources:\n  - conda-forge/label/A_rc,conda-forge\nchannel_targets:\n  - conda-forge B_rc\n"})}),"\n",(0,a.jsxs)(n.p,{children:["in ",(0,a.jsx)(n.code,{children:"recipe/conda_build_config.yaml"})," in their respective feedstocks."]}),"\n",(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.p,{children:"A rerender needs to happen for these changes to reflect in CI files. The channel_targets entries map"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsxs)(n.channel,{target:"",children:[" ",(0,a.jsx)(n.label,{target:"",children:" pairs for use in the post-build upload step."})]})}),"\n"]})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"installing-a-pre-release-build"})}),"\n",(0,a.jsx)(n.h3,{id:"installing-a-pre-release-build",children:"Installing a pre-release build"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"using-the-conda-cli"})}),"\n",(0,a.jsx)(n.h4,{id:"using-the-conda-cli",children:"Using the conda CLI"}),"\n",(0,a.jsxs)(n.p,{children:["Use the following command, but replace ",(0,a.jsx)(n.code,{children:"PACKAGE_NAME"})," with the package you want\nto install and replace ",(0,a.jsx)(n.code,{children:"LABEL"})," with ",(0,a.jsx)(n.code,{children:"rc"})," or ",(0,a.jsx)(n.code,{children:"dev"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"conda install -c conda-forge/label/PACKAGE_NAME_LABEL -c conda-forge PACKAGE_NAME\n"})}),"\n",(0,a.jsxs)(n.p,{children:["For example, let's install matplotlib from the ",(0,a.jsx)(n.code,{children:"rc"})," label:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"conda install -c conda-forge/label/matplotlib_rc -c conda-forge matplotlib\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"using-environment-yml"})}),"\n",(0,a.jsx)(n.h4,{id:"using-environmentyml",children:"Using environment.yml"}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.a,{href:"https://github.com/conda/conda/blob/c3fb8150ed4c3dabb7ca376ade208095f98ee0b9/conda/models/match_spec.py#L70-L150",children:"MatchSpec"}),"\nto specify your package:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"dependencies:\n  - conda-forge/label/matplotlib_rc::matplotlib=3.7.0rc1\n"})}),"\n",(0,a.jsx)(n.p,{children:"Alternately, you can use the channels section to enable the matplotlib_rc channel:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"channels:\n  - conda-forge/label/matplotlib_rc\ndependencies:\n  - matplotlib=3.7.0.rc1\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"pre-release-version-sorting"})}),"\n",(0,a.jsx)(n.h3,{id:"pre-release-version-sorting",children:"Pre-release version sorting"}),"\n",(0,a.jsxs)(n.p,{children:["If you wish to add numbers to your ",(0,a.jsx)(n.code,{children:"dev"})," or ",(0,a.jsx)(n.code,{children:"rc"})," build, you should follow the\n",(0,a.jsx)(n.a,{href:"https://docs.conda.io/projects/conda/en/stable/user-guide/concepts/pkg-specs.html#version-ordering",children:"guidelines"})," put\nforth by Continuum regarding version sorting in ",(0,a.jsx)(n.code,{children:"conda"}),". Also see the ",(0,a.jsx)(n.a,{href:"https://github.com/conda/conda/blob/4.2.13/conda/version.py#L93-L119",children:"source\ncode for conda\n4.2.13"}),".\nThe tl;dr here is that conda sorts as follows:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-default",children:"< 1.0\n< 1.1dev1    # special case 'dev'\n< 1.1.0dev1  # special case 'dev'\n== 1.1.dev1   # 0 is inserted before string\n< 1.1.0rc1\n< 1.1.0\n"})}),"\n",(0,a.jsxs)(n.p,{children:["So make sure that you ",(0,a.jsx)(n.strong,{children:"tag"})," your package in such a way that the package name\nthat conda-build spits out will sort the package uploaded with an ",(0,a.jsx)(n.code,{children:"rc"})," label\nhigher than the package uploaded with the ",(0,a.jsx)(n.code,{children:"dev"})," label."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"how-to-update-your-feedstock-token"})}),"\n",(0,a.jsx)(n.h2,{id:"how-to-update-your-feedstock-token",children:"How to update your feedstock token?"}),"\n",(0,a.jsx)(n.p,{children:"To reset your feedstock token and fix issues with uploads, follow these steps:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Go to the ",(0,a.jsx)(n.code,{children:"conda-forge/admin-requests"})," repo and copy ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/admin-requests/blob/main/examples/example-token-reset.yml",children:"examples/example-token-reset.yml"})," to the ",(0,a.jsx)(n.code,{children:"requests/"})," folder."]}),"\n",(0,a.jsxs)(n.li,{children:['Add the name of your feedstock in the YML file. While adding the name, don\'t add "-feedstock" to the end of it. For example: for ',(0,a.jsx)(n.code,{children:"python-feedstock"}),", just add ",(0,a.jsx)(n.code,{children:"python"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"using-arch-rebuild"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"using-arch-rebuild-txt"})}),"\n",(0,a.jsxs)(n.h2,{id:"using-arch_rebuildtxt",children:["Using ",(0,a.jsx)(n.code,{children:"arch_rebuild.txt"})]}),"\n",(0,a.jsxs)(n.p,{children:["You can add a feedstock to ",(0,a.jsx)(n.code,{children:"arch_rebuild.txt"})," if it requires rebuilding with different architectures/platforms (such as ",(0,a.jsx)(n.code,{children:"ppc64le"})," or ",(0,a.jsx)(n.code,{children:"aarch64"}),").\nCheck the ",(0,a.jsx)(n.a,{href:"https://conda-forge.org/status/#aarch64andppc64leaddition",children:"migration status"})," to see if your package is already in the queue to get migrated.\nIf not, you can add the feedstock to ",(0,a.jsx)(n.code,{children:"arch_rebuild.txt"})," by opening a PR to the ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge-pinning-feedstock",children:"conda-forge-pinning-feedstock repository"}),".\nOnce the PR is merged, the migration bot goes through the list of feedstocks in ",(0,a.jsx)(n.code,{children:"arch_rebuild.txt"})," and opens a migration PR for any new feedstocks and their dependencies, enabling the aarch64/ppc64le builds."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"migrations-and-migrators"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"migrators-and-migrations"})}),"\n",(0,a.jsx)(n.h2,{id:"migrators-and-migrations",children:"Migrators and Migrations"}),"\n",(0,a.jsxs)(n.p,{children:["When any changes are made in the global pinnings of a package, then the entire stack of the packages that need that package on their ",(0,a.jsx)(n.code,{children:"host"})," section would need to be updated and rebuilt.\nDoing it manually can be quite tedious, and that's where migrations come to help. Migrations automate the process of submitting changes to a feedstock and are an integral part of the ",(0,a.jsx)(n.code,{children:"regro-cf-autotick-bot"}),"'s duties."]}),"\n",(0,a.jsxs)(n.p,{children:["There are several kinds of migrations, which you can read about in ",(0,a.jsx)(n.a,{href:"https://github.com/regro/cf-scripts/blob/master/README.md#making-migrators",children:"Making Migrators"}),". To generate these migrations, you use migrators, which are bots that automatically create pull requests for the affected packages in conda-forge.\nTo propose a migration in one or more pins, the migrator issues a PR into the pinning feedstock using a yaml file expressing the changes to the global pinning file in the migrations folder.\nOnce the PR is merged, the dependency graph is built. After that, the bot walks through the graph, migrates all the nodes (feedstocks) one by one, and issues PRs for those feedstocks."]}),"\n",(0,a.jsxs)(n.p,{children:["Usually, the bot generates these migrations automatically. However, when a pin is first made or added, one may need to be added by hand. To do this, you can follow the steps mentioned in ",(0,a.jsx)(n.a,{href:"/docs/maintainer/pinning_deps#update-pins",children:"Updating package pins"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"The way migrations proceed are:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["You make a PR into the ",(0,a.jsx)(n.code,{children:"migrations"})," folder in the ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge-pinning-feedstock",children:"conda-forge-pinning-feedstock"})," with a new yaml file representing the migration."]}),"\n",(0,a.jsx)(n.li,{children:"Once the PR is merged, the bot picks it up, builds a migrator graph, and begins the migration process."}),"\n",(0,a.jsx)(n.li,{children:"A migration PR is issued for a node (a feedstock) only if:"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"- The node depends on the changed pinnings.\n- The node has no dependencies that depend on the new pinnings and have not been migrated.\n"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Process 3 continues until the migration is complete and the change is applied to the global pinning file via a final PR. After this step, we say this migration is closed out."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Sometimes, you might get a migration PR for your package that you don't want to merge. In that case, you should put that PR in draft status but should never close it.\nIf you close the PR, it makes the bot think that another PR implementing the migration is merged instead, letting the migration continue iterating on the graph; however, the downstream dependents fail because the parent (the one we closed the PR of) didn't really get rebuilt.\nAnother reason why it is good to keep the PR open or in draft status is that people might help with it if they want in the future."}),"\n",(0,a.jsxs)(n.p,{children:["In some cases a migration PR may not get opened. Please look for\n",(0,a.jsx)(n.a,{href:"https://conda-forge.org/status/#big_migrations",children:"the migration on our status page"}),"\nto see if there are any issues. This may show there are still dependencies\nneeding migration, in which case the best approach is to wait (or if possible\noffer to help migrate those dependencies). If there is a bot error, there will\nbe a link to the CI job to provide more details about what may have gone wrong.\nIn these cases ",(0,a.jsx)(n.a,{href:"http://github.com/regro/cf-scripts/issues/new",children:"please raise an issue"}),"\nand include as much information as possible."]}),"\n",(0,a.jsx)(n.p,{children:"It is worth noting that one also has the option to create a migration PR\nthemselves. This can be a good option if the bot errored and that is still\nbeing investigated or the migration PR got closed accidentally. To migrate a PR manually:"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Fork the feedstock and clone it locally"}),"\n",(0,a.jsx)(n.li,{children:"Create a new branch"}),"\n",(0,a.jsxs)(n.li,{children:["Create the directory ",(0,a.jsx)(n.code,{children:".ci_support/migrations"})," in the feedstock (if absent)"]}),"\n",(0,a.jsxs)(n.li,{children:["Copy the migrator from ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge-pinning-feedstock/tree/main/recipe/migrations",children:"conda-forge-pinning's migrators"})," to ",(0,a.jsx)(n.code,{children:".ci_support/migrations"})," and commit it"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/docs/maintainer/updating_pkgs#dev-update-rerender",children:"Rerender"})," the feedstock"]}),"\n",(0,a.jsx)(n.li,{children:"Push these changes and open a PR"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"security-considerations-for-conda-forge-builds"})}),"\n",(0,a.jsx)(n.h2,{id:"security-considerations-for-conda-forge-builds",children:"Security considerations for conda-forge builds"}),"\n",(0,a.jsx)(n.p,{children:"All conda-forge packages are built by strangers on the internet on public cloud infrastructure from source code you likely have not inspected, so you should not use conda-forge packages if you or your team require a high level of security.\nYou are also free to download recipes and rebuild them yourself, if you would like at least that much oversight. However, many people use conda-forge all the time with no issues and here are some things that conda-forge does to help with security in some ways:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/docs/maintainer/adding_pkgs#meta-yaml-source",children:"Sources"})," (where you specify where the package's source code is coming from) can be pulled from GitHub, PyPI, or other sources and sha256 hashes are always used, so moving of tags or uploading of new sdists can not cause automatic package rebuilds.\nAlso, once packages are accepted and made into feedstocks, only the maintainers of that feedstock have the right to merge PRs made to that feedstock."]}),"\n",(0,a.jsxs)(n.li,{children:["Each feedstock can only upload packages for that feedstock. This is enforced by using a cf-staging channel where builds are first sent.\nA bot then assesses that the submitting feedstock has permission to build the package it has submitted, and only then will it relay the build to the ",(0,a.jsx)(n.code,{children:"conda-forge"})," channel.\nThis helps mitigate against a bad actor gaining access to an inconspicuous feedstock and then trying to push a build with malicious code into essential infrastructure packages (e.g., OpenSSL or Python)."]}),"\n",(0,a.jsxs)(n.li,{children:["We have ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/artifact-validation",children:"artifact-validation"})," for validating all the conda-forge artifacts uploaded to ",(0,a.jsx)(n.code,{children:"anaconda.org"}),". This validation scans for various security-related items, such as artifacts that overwrite key pieces of certain packages."]}),"\n",(0,a.jsxs)(n.li,{children:["We have a dedicated ",(0,a.jsx)(n.a,{href:"/community/subteams/#security-subteam",children:"Security and Systems Sub-Team"})," who works hard towards making sure to secure and maintain appropriate access to the credentials and services/systems used by conda-forge."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["If you have found a security-related issue with conda-forge, please check our ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/conda-forge.github.io/security/policy",children:"Security Policy"}),"\nto learn how to report it responsibly."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"significant-changes-to-upstream-projects"})}),"\n",(0,a.jsx)(n.h2,{id:"significant-changes-to-upstream-projects",children:"Significant Changes To Upstream Projects"}),"\n",(0,a.jsx)(n.p,{children:"From time to time, we make changes in upstream projects so that they better integrate into the conda-forge ecosystem. We\nhave listed some, but not all, of those changes here for specific projects along with any associated documentation."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{id:"python"})}),"\n",(0,a.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,a.jsxs)(n.p,{children:["We carry an extensive set of python patches that change some core behaviors around search paths, environment isolation\nin conda environments, and some operating system limits. See the ",(0,a.jsx)(n.a,{href:"https://github.com/conda-forge/python-feedstock",children:"python feedstock"})," for more details."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>r});var s=i(96540);const a={},o=s.createContext(a);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);